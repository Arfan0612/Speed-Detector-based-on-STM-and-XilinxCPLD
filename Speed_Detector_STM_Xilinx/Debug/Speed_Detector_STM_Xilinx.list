
Speed_Detector_STM_Xilinx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013474  0800dc88  0800dc88  0001dc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080210fc  080210fc  000401e4  2**0
                  CONTENTS
  4 .ARM          00000008  080210fc  080210fc  000310fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021104  08021104  000401e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021104  08021104  00031104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021108  08021108  00031108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0802110c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f8  200001e4  080212f0  000401e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045dc  080212f0  000445dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024468  00000000  00000000  00040214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000475a  00000000  00000000  0006467c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00068dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  0006a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca16  00000000  00000000  0006bce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020699  00000000  00000000  000986fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010eac7  00000000  00000000  000b8d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c785e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a8  00000000  00000000  001c7924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003c05  00000000  00000000  001cefcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc70 	.word	0x0800dc70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800dc70 	.word	0x0800dc70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Decimal_To_BCD>:
 *      Author: Arfan Danial
 */

#include "Decimal_BCD_converter.h"

uint8_t Decimal_To_BCD(uint8_t decimal){
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	//make sure the format for transmitting is similar to this
	//HAL_UART_Transmit_DMA(&huart4,&BCD,sizeof(BCD));

	uint8_t MSB=0, LSB=0, BCD_8bit=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73bb      	strb	r3, [r7, #14]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	737b      	strb	r3, [r7, #13]

	//get the MSB
	//divide by 10 to get the MSB
	MSB = decimal/10;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <Decimal_To_BCD+0x54>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	08db      	lsrs	r3, r3, #3
 8000fac:	73fb      	strb	r3, [r7, #15]

	//shift the MSB by 4 bits to get (4 bit BCD of MSB) with 0000
	//Example MSB=1, we shift 4 bits to get 00010000
	MSB = MSB<<4;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	73fb      	strb	r3, [r7, #15]

	//get the LSB
	//do %10 to get the LSB
	LSB = decimal%10;
 8000fb4:	79fa      	ldrb	r2, [r7, #7]
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <Decimal_To_BCD+0x54>)
 8000fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fbc:	08d9      	lsrs	r1, r3, #3
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	73bb      	strb	r3, [r7, #14]

	//get the decimal representation of the 8-bit BCD conversion
	//adding the MSB with LSB by using OR bit operation
	BCD_8bit = MSB | LSB;
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	737b      	strb	r3, [r7, #13]

	//return the new decimal that represents 8-bit of the input argument's decimal
	return BCD_8bit;
 8000fd2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	cccccccd 	.word	0xcccccccd
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <rising_edge_trigger>:
uint32_t T2 = 0;
uint16_t TIM16_OVC = 0;
uint8_t state = 0;
uint32_t ticks = 0;

void rising_edge_trigger(COMP_HandleTypeDef *hcomp, COMP_HandleTypeDef *hcomp1, TIM_HandleTypeDef* htim16){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
	//if the trigger callback is caused by comparator 1
	if (hcomp == hcomp1){
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d14b      	bne.n	8001094 <rising_edge_trigger+0xac>
		if(state == 0)
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <rising_edge_trigger+0xc0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10b      	bne.n	800101c <rising_edge_trigger+0x34>
		{
			T1 = __HAL_TIM_GET_COUNTER(htim16);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	4a28      	ldr	r2, [pc, #160]	; (80010ac <rising_edge_trigger+0xc4>)
 800100c:	6013      	str	r3, [r2, #0]
			TIM16_OVC = 0;
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <rising_edge_trigger+0xc8>)
 8001010:	2200      	movs	r2, #0
 8001012:	801a      	strh	r2, [r3, #0]
			state = 1;
 8001014:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <rising_edge_trigger+0xc0>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
			//ticks = (T2 + (TIM2_OVC * 65536)) - T1;
			comp_frequency = (uint32_t)round(1/(CLK_Period*ticks));
			state = 0;
		}
	}
}
 800101a:	e03b      	b.n	8001094 <rising_edge_trigger+0xac>
		else if(state == 1)
 800101c:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <rising_edge_trigger+0xc0>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d137      	bne.n	8001094 <rising_edge_trigger+0xac>
			T2 = __HAL_TIM_GET_COUNTER(htim16);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <rising_edge_trigger+0xcc>)
 800102c:	6013      	str	r3, [r2, #0]
			ticks = (T2+(TIM16_OVC*65536)) - T1;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <rising_edge_trigger+0xc8>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	461a      	mov	r2, r3
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <rising_edge_trigger+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	441a      	add	r2, r3
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <rising_edge_trigger+0xc4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <rising_edge_trigger+0xd0>)
 8001044:	6013      	str	r3, [r2, #0]
			comp_frequency = (uint32_t)round(1/(CLK_Period*ticks));
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <rising_edge_trigger+0xd0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fa5a 	bl	8000504 <__aeabi_ui2d>
 8001050:	a313      	add	r3, pc, #76	; (adr r3, 80010a0 <rising_edge_trigger+0xb8>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff facf 	bl	80005f8 <__aeabi_dmul>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4916      	ldr	r1, [pc, #88]	; (80010bc <rising_edge_trigger+0xd4>)
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	ec43 2b17 	vmov	d7, r2, r3
 8001070:	eeb0 0a47 	vmov.f32	s0, s14
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	f00c fd92 	bl	800dba0 <round>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd90 	bl	8000ba8 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <rising_edge_trigger+0xd8>)
 800108c:	6013      	str	r3, [r2, #0]
			state = 0;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <rising_edge_trigger+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	f3af 8000 	nop.w
 80010a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80010a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80010a8:	2000020e 	.word	0x2000020e
 80010ac:	20000204 	.word	0x20000204
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	20000208 	.word	0x20000208
 80010b8:	20000210 	.word	0x20000210
 80010bc:	3ff00000 	.word	0x3ff00000
 80010c0:	20000200 	.word	0x20000200

080010c4 <Update_rollover>:

void Update_rollover(TIM_HandleTypeDef* htim, TIM_HandleTypeDef* htim16){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	if(htim==htim16){
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d105      	bne.n	80010e2 <Update_rollover+0x1e>
		TIM16_OVC++;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <Update_rollover+0x2c>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	3301      	adds	r3, #1
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <Update_rollover+0x2c>)
 80010e0:	801a      	strh	r2, [r3, #0]
	}
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000020c 	.word	0x2000020c

080010f4 <get_comp_frequency>:

uint32_t get_comp_frequency(){
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return comp_frequency; //just for testing NOT actual return value
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <get_comp_frequency+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000200 	.word	0x20000200

0800110c <LCD_init>:
//to store speed for TX
uint8_t v_xilinx = 0;

void LCD_init(GPIO_TypeDef* port_rs, uint16_t rs_pin, GPIO_TypeDef* port_e, uint16_t e_pin,
		   GPIO_TypeDef* port_d4, uint16_t d4_pin, GPIO_TypeDef* port_d5, uint16_t d5_pin, GPIO_TypeDef* port_d6, uint16_t d6_pin, GPIO_TypeDef* port_d7, uint16_t d7_pin,
		   GPIO_TypeDef* port_d10, uint16_t d10_pin){
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af0a      	add	r7, sp, #40	; 0x28
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	460b      	mov	r3, r1
 800111a:	817b      	strh	r3, [r7, #10]
 800111c:	4613      	mov	r3, r2
 800111e:	813b      	strh	r3, [r7, #8]
	lcd16x2_init_4bits(GPIOA, RS_Pin, GPIOC, E_Pin, GPIOB, D4_Pin, GPIOB, D5_Pin, GPIOB, D6_Pin, GPIOA, D7_Pin, GPIOB, D10_Pin);
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	9309      	str	r3, [sp, #36]	; 0x24
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <LCD_init+0x5c>)
 8001126:	9308      	str	r3, [sp, #32]
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	9307      	str	r3, [sp, #28]
 800112e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001132:	9306      	str	r3, [sp, #24]
 8001134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001138:	9305      	str	r3, [sp, #20]
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <LCD_init+0x5c>)
 800113c:	9304      	str	r3, [sp, #16]
 800113e:	2310      	movs	r3, #16
 8001140:	9303      	str	r3, [sp, #12]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <LCD_init+0x5c>)
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2320      	movs	r3, #32
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <LCD_init+0x5c>)
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <LCD_init+0x60>)
 8001152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001156:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115a:	f000 fbf1 	bl	8001940 <lcd16x2_init_4bits>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	48000400 	.word	0x48000400
 800116c:	48000800 	.word	0x48000800

08001170 <keypad_read_key>:

void keypad_read_key(uint32_t adc_readout, UART_HandleTypeDef *huart){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	//for when up button is pressed
	if (adc_readout > 700 && adc_readout < 800){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001180:	d907      	bls.n	8001192 <keypad_read_key+0x22>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001188:	d203      	bcs.n	8001192 <keypad_read_key+0x22>
		//reset button to show menu
		mode=0;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <keypad_read_key+0x8c>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e02a      	b.n	80011e8 <keypad_read_key+0x78>
	}

	//for when down button is pressed
	else if (adc_readout > 1700 && adc_readout < 1900 ){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8001198:	4293      	cmp	r3, r2
 800119a:	d912      	bls.n	80011c2 <keypad_read_key+0x52>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f240 726b 	movw	r2, #1899	; 0x76b
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d80d      	bhi.n	80011c2 <keypad_read_key+0x52>
		//change the speed unit each time the down button is pressed
		if(speed_unit==3){
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <keypad_read_key+0x90>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d103      	bne.n	80011b6 <keypad_read_key+0x46>
			//reset back to M/S
			speed_unit=1;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <keypad_read_key+0x90>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		if(speed_unit==3){
 80011b4:	e018      	b.n	80011e8 <keypad_read_key+0x78>
		}
		else{
			speed_unit++;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <keypad_read_key+0x90>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <keypad_read_key+0x90>)
 80011be:	6013      	str	r3, [r2, #0]
		if(speed_unit==3){
 80011c0:	e012      	b.n	80011e8 <keypad_read_key+0x78>
		}
	}

	//for when left button is pressed
	else if (adc_readout > 2000 && adc_readout < 3000){
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011c8:	d908      	bls.n	80011dc <keypad_read_key+0x6c>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d803      	bhi.n	80011dc <keypad_read_key+0x6c>
		//change to ADC mode
		mode = 1;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <keypad_read_key+0x8c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	e005      	b.n	80011e8 <keypad_read_key+0x78>
	}

	//for when right button is pressed
	else if (adc_readout == 0){
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <keypad_read_key+0x78>
		//change to COMP mode
		mode = 2;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <keypad_read_key+0x8c>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	601a      	str	r2, [r3, #0]
	}

	checking();
 80011e8:	f000 f80c 	bl	8001204 <checking>
	Output(huart);
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f000 f99f 	bl	8001530 <Output>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000027c 	.word	0x2000027c
 8001200:	20000000 	.word	0x20000000

08001204 <checking>:

void checking(){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	int frequency = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]

	//get the frequency of the current mode used
	frequency = cutOff();
 800120e:	f000 f83d 	bl	800128c <cutOff>
 8001212:	6078      	str	r0, [r7, #4]

	//check for which mode the LCD is current in
	if(mode==0){
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <checking+0x6c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <checking+0x30>
		//main menu
		sprintf(LCD_1st_Row, "Press button:");
 800121c:	4915      	ldr	r1, [pc, #84]	; (8001274 <checking+0x70>)
 800121e:	4816      	ldr	r0, [pc, #88]	; (8001278 <checking+0x74>)
 8001220:	f00a fa26 	bl	800b670 <siprintf>
		sprintf(LCD_2nd_Row, "L=ADC | R=COMP");
 8001224:	4915      	ldr	r1, [pc, #84]	; (800127c <checking+0x78>)
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <checking+0x7c>)
 8001228:	f00a fa22 	bl	800b670 <siprintf>
		setTX(0); //set data transmit to Xilinx to be 0
 800122c:	2000      	movs	r0, #0
 800122e:	f000 f967 	bl	8001500 <setTX>
	else if(mode==2){
		//comp
		sprintf(LCD_1st_Row, "COMP F: %u Hz",frequency);
		printing_speed(frequency);
	}
}
 8001232:	e018      	b.n	8001266 <checking+0x62>
	else if(mode==1){
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <checking+0x6c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <checking+0x4a>
		sprintf(LCD_1st_Row, "ADC F: %u Hz",frequency);
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4911      	ldr	r1, [pc, #68]	; (8001284 <checking+0x80>)
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <checking+0x74>)
 8001242:	f00a fa15 	bl	800b670 <siprintf>
		printing_speed(frequency);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f846 	bl	80012d8 <printing_speed>
}
 800124c:	e00b      	b.n	8001266 <checking+0x62>
	else if(mode==2){
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <checking+0x6c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d107      	bne.n	8001266 <checking+0x62>
		sprintf(LCD_1st_Row, "COMP F: %u Hz",frequency);
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	490b      	ldr	r1, [pc, #44]	; (8001288 <checking+0x84>)
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <checking+0x74>)
 800125c:	f00a fa08 	bl	800b670 <siprintf>
		printing_speed(frequency);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f839 	bl	80012d8 <printing_speed>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000027c 	.word	0x2000027c
 8001274:	0800dc88 	.word	0x0800dc88
 8001278:	20000214 	.word	0x20000214
 800127c:	0800dc98 	.word	0x0800dc98
 8001280:	20000248 	.word	0x20000248
 8001284:	0800dca8 	.word	0x0800dca8
 8001288:	0800dcb8 	.word	0x0800dcb8

0800128c <cutOff>:

int cutOff(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	int frequency = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]

	//getting ADC frequency
	if(mode==1){
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <cutOff+0x48>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d104      	bne.n	80012a8 <cutOff+0x1c>
		frequency = get_adc_frequency();
 800129e:	f000 fc83 	bl	8001ba8 <get_adc_frequency>
 80012a2:	4603      	mov	r3, r0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	e007      	b.n	80012b8 <cutOff+0x2c>
	}
	//getting COMP frequency
	else if(mode==2){
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <cutOff+0x48>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d103      	bne.n	80012b8 <cutOff+0x2c>
		frequency = get_comp_frequency();
 80012b0:	f7ff ff20 	bl	80010f4 <get_comp_frequency>
 80012b4:	4603      	mov	r3, r0
 80012b6:	607b      	str	r3, [r7, #4]
	}

	//further filtering to only output frequency within BW
	if(frequency>=100 && frequency<=600){
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b63      	cmp	r3, #99	; 0x63
 80012bc:	dd05      	ble.n	80012ca <cutOff+0x3e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80012c4:	dc01      	bgt.n	80012ca <cutOff+0x3e>
		//if within BW, return the detected frequency
		return frequency;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e000      	b.n	80012cc <cutOff+0x40>
	}
	else{
		//if out of BW, return 0 Hz
		return 0;
 80012ca:	2300      	movs	r3, #0
	}
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000027c 	.word	0x2000027c

080012d8 <printing_speed>:

void printing_speed(int frequency){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	if(speed_unit==1){
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <printing_speed+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d103      	bne.n	80012f0 <printing_speed+0x18>
		MPS(frequency);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f869 	bl	80013c0 <MPS>
		KPH(frequency);
	}
	else if(speed_unit==3){
		MPH(frequency);
	}
}
 80012ee:	e00e      	b.n	800130e <printing_speed+0x36>
	else if(speed_unit==2){
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <printing_speed+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d103      	bne.n	8001300 <printing_speed+0x28>
		KPH(frequency);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f811 	bl	8001320 <KPH>
}
 80012fe:	e006      	b.n	800130e <printing_speed+0x36>
	else if(speed_unit==3){
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <printing_speed+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d102      	bne.n	800130e <printing_speed+0x36>
		MPH(frequency);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8a9 	bl	8001460 <MPH>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	00000000 	.word	0x00000000

08001320 <KPH>:

void KPH(int frequency){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	float v_kph = ((c_kph)*((float)frequency/(2*f_transmit)));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	a31d      	add	r3, pc, #116	; (adr r3, 80013b0 <KPH+0x90>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa84 	bl	800084c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	a31a      	add	r3, pc, #104	; (adr r3, 80013b8 <KPH+0x98>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f951 	bl	80005f8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fc43 	bl	8000be8 <__aeabi_d2f>
 8001362:	4603      	mov	r3, r0
 8001364:	60fb      	str	r3, [r7, #12]
	sprintf(LCD_2nd_Row, "V: %.2f km/h",v_kph); //-u_printf_float enabled
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	490d      	ldr	r1, [pc, #52]	; (80013a8 <KPH+0x88>)
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <KPH+0x8c>)
 8001374:	f00a f97c 	bl	800b670 <siprintf>
	setTX(round(v_kph)); //set TX value for transmission to Xilinx
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff f8e5 	bl	8000548 <__aeabi_f2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	ec43 2b10 	vmov	d0, r2, r3
 8001386:	f00c fc0b 	bl	800dba0 <round>
 800138a:	ec53 2b10 	vmov	r2, r3, d0
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fbe1 	bl	8000b58 <__aeabi_d2iz>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f8b1 	bl	8001500 <setTX>
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	0800dcc8 	.word	0x0800dcc8
 80013ac:	20000248 	.word	0x20000248
 80013b0:	0a000000 	.word	0x0a000000
 80013b4:	42139ab6 	.word	0x42139ab6
 80013b8:	80000000 	.word	0x80000000
 80013bc:	41d017df 	.word	0x41d017df

080013c0 <MPS>:

void MPS(int frequency){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	float v_mps = ((c_mps)*((float)frequency/(2*f_transmit)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ee17 0a90 	vmov	r0, s15
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	a31d      	add	r3, pc, #116	; (adr r3, 8001450 <MPS+0x90>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff fa34 	bl	800084c <__aeabi_ddiv>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	a31a      	add	r3, pc, #104	; (adr r3, 8001458 <MPS+0x98>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f901 	bl	80005f8 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbf3 	bl	8000be8 <__aeabi_d2f>
 8001402:	4603      	mov	r3, r0
 8001404:	60fb      	str	r3, [r7, #12]
	sprintf(LCD_2nd_Row, "V: %.2f m/s",v_mps); //-u_printf_float enabled
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff f89e 	bl	8000548 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	490d      	ldr	r1, [pc, #52]	; (8001448 <MPS+0x88>)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MPS+0x8c>)
 8001414:	f00a f92c 	bl	800b670 <siprintf>
	setTX(round(v_mps)); //set TX value for transmission to Xilinx
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff f895 	bl	8000548 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	ec43 2b10 	vmov	d0, r2, r3
 8001426:	f00c fbbb 	bl	800dba0 <round>
 800142a:	ec53 2b10 	vmov	r2, r3, d0
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb91 	bl	8000b58 <__aeabi_d2iz>
 8001436:	4603      	mov	r3, r0
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f861 	bl	8001500 <setTX>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0800dcd8 	.word	0x0800dcd8
 800144c:	20000248 	.word	0x20000248
 8001450:	0a000000 	.word	0x0a000000
 8001454:	42139ab6 	.word	0x42139ab6
 8001458:	00000000 	.word	0x00000000
 800145c:	41b1e1a3 	.word	0x41b1e1a3

08001460 <MPH>:

void MPH(int frequency){
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	float v_mph = ((c_mph)*((float)frequency/(2*f_transmit)));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	ee17 0a90 	vmov	r0, s15
 8001476:	f7ff f867 	bl	8000548 <__aeabi_f2d>
 800147a:	a31d      	add	r3, pc, #116	; (adr r3, 80014f0 <MPH+0x90>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7ff f9e4 	bl	800084c <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	a31a      	add	r3, pc, #104	; (adr r3, 80014f8 <MPH+0x98>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8b1 	bl	80005f8 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fba3 	bl	8000be8 <__aeabi_d2f>
 80014a2:	4603      	mov	r3, r0
 80014a4:	60fb      	str	r3, [r7, #12]
	sprintf(LCD_2nd_Row, "V: %.2f mph",v_mph); //-u_printf_float enabled
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff f84e 	bl	8000548 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	490d      	ldr	r1, [pc, #52]	; (80014e8 <MPH+0x88>)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MPH+0x8c>)
 80014b4:	f00a f8dc 	bl	800b670 <siprintf>
	setTX(round(v_mph)); //set TX value for transmission to Xilinx
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f7ff f845 	bl	8000548 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	ec43 2b10 	vmov	d0, r2, r3
 80014c6:	f00c fb6b 	bl	800dba0 <round>
 80014ca:	ec53 2b10 	vmov	r2, r3, d0
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff fb41 	bl	8000b58 <__aeabi_d2iz>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f811 	bl	8001500 <setTX>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	0800dce4 	.word	0x0800dce4
 80014ec:	20000248 	.word	0x20000248
 80014f0:	0a000000 	.word	0x0a000000
 80014f4:	42139ab6 	.word	0x42139ab6
 80014f8:	dbced917 	.word	0xdbced917
 80014fc:	41c3fff0 	.word	0x41c3fff0

08001500 <setTX>:

void setTX(int v){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	//set a limiter so that the xilinx never output above the value 99 in any speed unit
	if (v > 99) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b63      	cmp	r3, #99	; 0x63
 800150c:	dd01      	ble.n	8001512 <setTX+0x12>
		v = 99;
 800150e:	2363      	movs	r3, #99	; 0x63
 8001510:	607b      	str	r3, [r7, #4]
	}

	//convert the speed unit to BCD before transmission
	v_xilinx = Decimal_To_BCD((uint8_t) v);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd38 	bl	8000f8c <Decimal_To_BCD>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <setTX+0x2c>)
 8001522:	701a      	strb	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000280 	.word	0x20000280

08001530 <Output>:

void Output(UART_HandleTypeDef *huart) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	lcd16x2_clear();
 8001538:	f000 fac6 	bl	8001ac8 <lcd16x2_clear>
	lcd16x2_1stLine();
 800153c:	f000 fab4 	bl	8001aa8 <lcd16x2_1stLine>
	lcd16x2_printf(LCD_1st_Row);
 8001540:	480a      	ldr	r0, [pc, #40]	; (800156c <Output+0x3c>)
 8001542:	f000 facb 	bl	8001adc <lcd16x2_printf>
	lcd16x2_2ndLine();
 8001546:	f000 fab7 	bl	8001ab8 <lcd16x2_2ndLine>
	lcd16x2_printf(LCD_2nd_Row);
 800154a:	4809      	ldr	r0, [pc, #36]	; (8001570 <Output+0x40>)
 800154c:	f000 fac6 	bl	8001adc <lcd16x2_printf>
	HAL_UART_Transmit (huart, &v_xilinx, 1, 1);
 8001550:	2301      	movs	r3, #1
 8001552:	2201      	movs	r2, #1
 8001554:	4907      	ldr	r1, [pc, #28]	; (8001574 <Output+0x44>)
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f006 ff88 	bl	800846c <HAL_UART_Transmit>
	HAL_Delay(400);
 800155c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001560:	f001 fc06 	bl	8002d70 <HAL_Delay>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000214 	.word	0x20000214
 8001570:	20000248 	.word	0x20000248
 8001574:	20000280 	.word	0x20000280

08001578 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <DWT_Delay_Init+0x58>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <DWT_Delay_Init+0x58>)
 8001582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001586:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <DWT_Delay_Init+0x58>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <DWT_Delay_Init+0x58>)
 800158e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001592:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <DWT_Delay_Init+0x5c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <DWT_Delay_Init+0x5c>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <DWT_Delay_Init+0x5c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <DWT_Delay_Init+0x5c>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <DWT_Delay_Init+0x5c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80015b2:	bf00      	nop
  __NOP();
 80015b4:	bf00      	nop
  __NOP();
 80015b6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <DWT_Delay_Init+0x5c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <DWT_Delay_Init+0x4c>
  {
    return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e000      	b.n	80015c6 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 80015c4:	2301      	movs	r3, #1
  }
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000edf0 	.word	0xe000edf0
 80015d4:	e0001000 	.word	0xe0001000

080015d8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <DWT_Delay_us+0x40>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80015e6:	f004 fccd 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a0b      	ldr	r2, [pc, #44]	; (800161c <DWT_Delay_us+0x44>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0c9b      	lsrs	r3, r3, #18
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80015fc:	bf00      	nop
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <DWT_Delay_us+0x40>)
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	429a      	cmp	r2, r3
 800160a:	d3f8      	bcc.n	80015fe <DWT_Delay_us+0x26>
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e0001000 	.word	0xe0001000
 800161c:	431bde83 	.word	0x431bde83

08001620 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_E, PIN_E, GPIO_PIN_SET);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <lcd16x2_enablePulse+0x34>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <lcd16x2_enablePulse+0x38>)
 800162a:	8811      	ldrh	r1, [r2, #0]
 800162c:	2201      	movs	r2, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fec4 	bl	80053bc <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001634:	2014      	movs	r0, #20
 8001636:	f7ff ffcf 	bl	80015d8 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_E, PIN_E, GPIO_PIN_RESET);
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <lcd16x2_enablePulse+0x34>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <lcd16x2_enablePulse+0x38>)
 8001640:	8811      	ldrh	r1, [r2, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f003 feb9 	bl	80053bc <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800164a:	203c      	movs	r0, #60	; 0x3c
 800164c:	f7ff ffc4 	bl	80015d8 <DWT_Delay_us>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000288 	.word	0x20000288
 8001658:	2000028e 	.word	0x2000028e

0800165c <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS, PIN_RS, (GPIO_PinState)state);
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <lcd16x2_rs+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <lcd16x2_rs+0x28>)
 800166c:	8811      	ldrh	r1, [r2, #0]
 800166e:	79fa      	ldrb	r2, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fea3 	bl	80053bc <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000284 	.word	0x20000284
 8001684:	2000028c 	.word	0x2000028c

08001688 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80016a0:	4b5f      	ldr	r3, [pc, #380]	; (8001820 <lcd16x2_write+0x198>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d05a      	beq.n	800175e <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB_D0, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80016a8:	4b5e      	ldr	r3, [pc, #376]	; (8001824 <lcd16x2_write+0x19c>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4b5e      	ldr	r3, [pc, #376]	; (8001828 <lcd16x2_write+0x1a0>)
 80016ae:	8819      	ldrh	r1, [r3, #0]
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	f003 fe7f 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB_D1, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80016be:	4b5b      	ldr	r3, [pc, #364]	; (800182c <lcd16x2_write+0x1a4>)
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	4b5b      	ldr	r3, [pc, #364]	; (8001830 <lcd16x2_write+0x1a8>)
 80016c4:	8819      	ldrh	r1, [r3, #0]
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	f003 fe74 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB_D2, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <lcd16x2_write+0x1ac>)
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	4b57      	ldr	r3, [pc, #348]	; (8001838 <lcd16x2_write+0x1b0>)
 80016da:	8819      	ldrh	r1, [r3, #0]
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	f003 fe69 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB_D3, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80016ea:	4b54      	ldr	r3, [pc, #336]	; (800183c <lcd16x2_write+0x1b4>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	4b54      	ldr	r3, [pc, #336]	; (8001840 <lcd16x2_write+0x1b8>)
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	f003 fe5e 	bl	80053bc <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB_D4, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <lcd16x2_write+0x1bc>)
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	4b50      	ldr	r3, [pc, #320]	; (8001848 <lcd16x2_write+0x1c0>)
 8001706:	8819      	ldrh	r1, [r3, #0]
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	f003 fe53 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D5, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001716:	4b4d      	ldr	r3, [pc, #308]	; (800184c <lcd16x2_write+0x1c4>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <lcd16x2_write+0x1c8>)
 800171c:	8819      	ldrh	r1, [r3, #0]
 800171e:	7bbb      	ldrb	r3, [r7, #14]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	f003 fe48 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D6, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800172c:	4b49      	ldr	r3, [pc, #292]	; (8001854 <lcd16x2_write+0x1cc>)
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	4b49      	ldr	r3, [pc, #292]	; (8001858 <lcd16x2_write+0x1d0>)
 8001732:	8819      	ldrh	r1, [r3, #0]
 8001734:	7bbb      	ldrb	r3, [r7, #14]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	f003 fe3d 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D7, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001742:	4b46      	ldr	r3, [pc, #280]	; (800185c <lcd16x2_write+0x1d4>)
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	4b46      	ldr	r3, [pc, #280]	; (8001860 <lcd16x2_write+0x1d8>)
 8001748:	8819      	ldrh	r1, [r3, #0]
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	f003 fe32 	bl	80053bc <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001758:	f7ff ff62 	bl	8001620 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB_D5, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB_D6, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB_D7, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 800175c:	e05b      	b.n	8001816 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB_D4, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <lcd16x2_write+0x1bc>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	4b39      	ldr	r3, [pc, #228]	; (8001848 <lcd16x2_write+0x1c0>)
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	7bbb      	ldrb	r3, [r7, #14]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	f003 fe24 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D5, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <lcd16x2_write+0x1c4>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4b35      	ldr	r3, [pc, #212]	; (8001850 <lcd16x2_write+0x1c8>)
 800177a:	8819      	ldrh	r1, [r3, #0]
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	f003 fe19 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D6, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <lcd16x2_write+0x1cc>)
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <lcd16x2_write+0x1d0>)
 8001790:	8819      	ldrh	r1, [r3, #0]
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	f003 fe0e 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D7, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <lcd16x2_write+0x1d4>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <lcd16x2_write+0x1d8>)
 80017a6:	8819      	ldrh	r1, [r3, #0]
 80017a8:	7bbb      	ldrb	r3, [r7, #14]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	f003 fe03 	bl	80053bc <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80017b6:	f7ff ff33 	bl	8001620 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB_D4, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80017ba:	4b22      	ldr	r3, [pc, #136]	; (8001844 <lcd16x2_write+0x1bc>)
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <lcd16x2_write+0x1c0>)
 80017c0:	8819      	ldrh	r1, [r3, #0]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	f003 fdf6 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D5, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <lcd16x2_write+0x1c4>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <lcd16x2_write+0x1c8>)
 80017d6:	8819      	ldrh	r1, [r3, #0]
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	f003 fdeb 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D6, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <lcd16x2_write+0x1cc>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <lcd16x2_write+0x1d0>)
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	f003 fde0 	bl	80053bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB_D7, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <lcd16x2_write+0x1d4>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	4b17      	ldr	r3, [pc, #92]	; (8001860 <lcd16x2_write+0x1d8>)
 8001802:	8819      	ldrh	r1, [r3, #0]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	b2db      	uxtb	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	f003 fdd5 	bl	80053bc <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001812:	f7ff ff05 	bl	8001620 <lcd16x2_enablePulse>
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000004 	.word	0x20000004
 8001824:	20000290 	.word	0x20000290
 8001828:	200002a0 	.word	0x200002a0
 800182c:	20000294 	.word	0x20000294
 8001830:	200002a2 	.word	0x200002a2
 8001834:	20000298 	.word	0x20000298
 8001838:	200002a4 	.word	0x200002a4
 800183c:	2000029c 	.word	0x2000029c
 8001840:	200002a6 	.word	0x200002a6
 8001844:	200002a8 	.word	0x200002a8
 8001848:	200002bc 	.word	0x200002bc
 800184c:	200002ac 	.word	0x200002ac
 8001850:	200002be 	.word	0x200002be
 8001854:	200002b0 	.word	0x200002b0
 8001858:	200002c0 	.word	0x200002c0
 800185c:	200002b4 	.word	0x200002b4
 8001860:	200002c2 	.word	0x200002c2

08001864 <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fef4 	bl	800165c <lcd16x2_rs>
  lcd16x2_write(cmd);
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff06 	bl	8001688 <lcd16x2_write>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fee4 	bl	800165c <lcd16x2_rs>
  lcd16x2_write(data);
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fef6 	bl	8001688 <lcd16x2_write>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f7ff fed0 	bl	800165c <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB_D4, D4_PIN, (GPIO_PinState)(nib&0x1));
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <lcd16x2_write4+0x7c>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <lcd16x2_write4+0x80>)
 80018c2:	8819      	ldrh	r1, [r3, #0]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	f003 fd75 	bl	80053bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB_D5, D5_PIN, (GPIO_PinState)(nib&0x2));
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <lcd16x2_write4+0x84>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <lcd16x2_write4+0x88>)
 80018d8:	8819      	ldrh	r1, [r3, #0]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	f003 fd6a 	bl	80053bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB_D6, D6_PIN, (GPIO_PinState)(nib&0x4));
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <lcd16x2_write4+0x8c>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <lcd16x2_write4+0x90>)
 80018ee:	8819      	ldrh	r1, [r3, #0]
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f003 fd5f 	bl	80053bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB_D7, D7_PIN, (GPIO_PinState)(nib&0x8));
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <lcd16x2_write4+0x94>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <lcd16x2_write4+0x98>)
 8001904:	8819      	ldrh	r1, [r3, #0]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	f003 fd54 	bl	80053bc <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001914:	f7ff fe84 	bl	8001620 <lcd16x2_enablePulse>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200002a8 	.word	0x200002a8
 8001924:	200002bc 	.word	0x200002bc
 8001928:	200002ac 	.word	0x200002ac
 800192c:	200002be 	.word	0x200002be
 8001930:	200002b0 	.word	0x200002b0
 8001934:	200002c0 	.word	0x200002c0
 8001938:	200002b4 	.word	0x200002b4
 800193c:	200002c2 	.word	0x200002c2

08001940 <lcd16x2_init_4bits>:

void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs, uint16_t rs_pin, GPIO_TypeDef* port_e, uint16_t e_pin,
   GPIO_TypeDef* port_d4, uint16_t d4_pin, GPIO_TypeDef* port_d5, uint16_t d5_pin, GPIO_TypeDef* port_d6, uint16_t d6_pin, GPIO_TypeDef* port_d7, uint16_t d7_pin,
   GPIO_TypeDef* port_d10, uint16_t d10_pin)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	461a      	mov	r2, r3
 800194c:	460b      	mov	r3, r1
 800194e:	817b      	strh	r3, [r7, #10]
 8001950:	4613      	mov	r3, r2
 8001952:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8001954:	f7ff fe10 	bl	8001578 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS = port_rs;
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <lcd16x2_init_4bits+0xe0>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <lcd16x2_init_4bits+0xe4>)
 8001960:	897b      	ldrh	r3, [r7, #10]
 8001962:	8013      	strh	r3, [r2, #0]
  PORT_E = port_e;
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <lcd16x2_init_4bits+0xe8>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  PIN_E = e_pin;
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <lcd16x2_init_4bits+0xec>)
 800196c:	893b      	ldrh	r3, [r7, #8]
 800196e:	8013      	strh	r3, [r2, #0]
  PORT_MSB_D4 = port_d4;
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <lcd16x2_init_4bits+0xf0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001976:	4a2f      	ldr	r2, [pc, #188]	; (8001a34 <lcd16x2_init_4bits+0xf4>)
 8001978:	8bbb      	ldrh	r3, [r7, #28]
 800197a:	8013      	strh	r3, [r2, #0]
  PORT_MSB_D5 = port_d5;
 800197c:	4a2e      	ldr	r2, [pc, #184]	; (8001a38 <lcd16x2_init_4bits+0xf8>)
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	6013      	str	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <lcd16x2_init_4bits+0xfc>)
 8001984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001986:	8013      	strh	r3, [r2, #0]
  PORT_MSB_D6 = port_d6;
 8001988:	4a2d      	ldr	r2, [pc, #180]	; (8001a40 <lcd16x2_init_4bits+0x100>)
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	6013      	str	r3, [r2, #0]
  D6_PIN = d6_pin;
 800198e:	4a2d      	ldr	r2, [pc, #180]	; (8001a44 <lcd16x2_init_4bits+0x104>)
 8001990:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001992:	8013      	strh	r3, [r2, #0]
  PORT_MSB_D7 = port_d7;
 8001994:	4a2c      	ldr	r2, [pc, #176]	; (8001a48 <lcd16x2_init_4bits+0x108>)
 8001996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001998:	6013      	str	r3, [r2, #0]
  D7_PIN = d7_pin;
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <lcd16x2_init_4bits+0x10c>)
 800199c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800199e:	8013      	strh	r3, [r2, #0]
  backlight_PORT = port_d10;
 80019a0:	4a2b      	ldr	r2, [pc, #172]	; (8001a50 <lcd16x2_init_4bits+0x110>)
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	6013      	str	r3, [r2, #0]
  backlight_PIN = d10_pin;
 80019a6:	4a2b      	ldr	r2, [pc, #172]	; (8001a54 <lcd16x2_init_4bits+0x114>)
 80019a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019aa:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <lcd16x2_init_4bits+0x118>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <lcd16x2_init_4bits+0x11c>)
 80019b4:	2228      	movs	r2, #40	; 0x28
 80019b6:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80019b8:	2014      	movs	r0, #20
 80019ba:	f001 f9d9 	bl	8002d70 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80019be:	2003      	movs	r0, #3
 80019c0:	f7ff ff70 	bl	80018a4 <lcd16x2_write4>
  LCD_MS_DELAY(5);
 80019c4:	2005      	movs	r0, #5
 80019c6:	f001 f9d3 	bl	8002d70 <HAL_Delay>
  lcd16x2_write4(0x3);
 80019ca:	2003      	movs	r0, #3
 80019cc:	f7ff ff6a 	bl	80018a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f001 f9cd 	bl	8002d70 <HAL_Delay>
  lcd16x2_write4(0x3);
 80019d6:	2003      	movs	r0, #3
 80019d8:	f7ff ff64 	bl	80018a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80019dc:	2001      	movs	r0, #1
 80019de:	f001 f9c7 	bl	8002d70 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff ff5e 	bl	80018a4 <lcd16x2_write4>
  LCD_MS_DELAY(1);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f001 f9c1 	bl	8002d70 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80019ee:	2028      	movs	r0, #40	; 0x28
 80019f0:	f7ff ff38 	bl	8001864 <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80019f4:	200f      	movs	r0, #15
 80019f6:	f7ff ff35 	bl	8001864 <lcd16x2_writeCommand>
  HAL_GPIO_WritePin(backlight_PORT, backlight_PIN, GPIO_PIN_SET); //turn on backlight of LCD
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <lcd16x2_init_4bits+0x110>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a15      	ldr	r2, [pc, #84]	; (8001a54 <lcd16x2_init_4bits+0x114>)
 8001a00:	8811      	ldrh	r1, [r2, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fcd9 	bl	80053bc <HAL_GPIO_WritePin>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff ff2a 	bl	8001864 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f001 f9ad 	bl	8002d70 <HAL_Delay>
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000284 	.word	0x20000284
 8001a24:	2000028c 	.word	0x2000028c
 8001a28:	20000288 	.word	0x20000288
 8001a2c:	2000028e 	.word	0x2000028e
 8001a30:	200002a8 	.word	0x200002a8
 8001a34:	200002bc 	.word	0x200002bc
 8001a38:	200002ac 	.word	0x200002ac
 8001a3c:	200002be 	.word	0x200002be
 8001a40:	200002b0 	.word	0x200002b0
 8001a44:	200002c0 	.word	0x200002c0
 8001a48:	200002b4 	.word	0x200002b4
 8001a4c:	200002c2 	.word	0x200002c2
 8001a50:	200002b8 	.word	0x200002b8
 8001a54:	200002c4 	.word	0x200002c4
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	20000005 	.word	0x20000005

08001a60 <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	460a      	mov	r2, r1
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001a70:	79bb      	ldrb	r3, [r7, #6]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a84:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff feeb 	bl	8001864 <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001a8e:	e007      	b.n	8001aa0 <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001a96:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fee2 	bl	8001864 <lcd16x2_writeCommand>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001aac:	2100      	movs	r1, #0
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff ffd6 	bl	8001a60 <lcd16x2_setCursor>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff ffce 	bl	8001a60 <lcd16x2_setCursor>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f7ff fec9 	bl	8001864 <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f001 f94c 	bl	8002d70 <HAL_Delay>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001adc:	b40f      	push	{r0, r1, r2, r3}
 8001ade:	b590      	push	{r4, r7, lr}
 8001ae0:	b089      	sub	sp, #36	; 0x24
 8001ae2:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae8:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001af2:	4618      	mov	r0, r3
 8001af4:	f009 fdf2 	bl	800b6dc <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	77fb      	strb	r3, [r7, #31]
 8001afc:	e00a      	b.n	8001b14 <lcd16x2_printf+0x38>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	3320      	adds	r3, #32
 8001b02:	443b      	add	r3, r7
 8001b04:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff febb 	bl	8001884 <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001b0e:	7ffb      	ldrb	r3, [r7, #31]
 8001b10:	3301      	adds	r3, #1
 8001b12:	77fb      	strb	r3, [r7, #31]
 8001b14:	7ffc      	ldrb	r4, [r7, #31]
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fb58 	bl	80001d0 <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	429c      	cmp	r4, r3
 8001b24:	d202      	bcs.n	8001b2c <lcd16x2_printf+0x50>
 8001b26:	7ffb      	ldrb	r3, [r7, #31]
 8001b28:	2b0f      	cmp	r3, #15
 8001b2a:	d9e8      	bls.n	8001afe <lcd16x2_printf+0x22>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3724      	adds	r7, #36	; 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b36:	b004      	add	sp, #16
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_COMP_TriggerCallback>:
uint32_t lcd_buf;

int flag = 0;
uint32_t adc_frequency = 0;

void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	rising_edge_trigger(hcomp, &hcomp1, &htim16);
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_COMP_TriggerCallback+0x1c>)
 8001b46:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_COMP_TriggerCallback+0x20>)
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fa4d 	bl	8000fe8 <rising_edge_trigger>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200004e4 	.word	0x200004e4
 8001b5c:	20000420 	.word	0x20000420

08001b60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	Update_rollover(htim, &htim16);
 8001b68:	4903      	ldr	r1, [pc, #12]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff faaa 	bl	80010c4 <Update_rollover>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200004e4 	.word	0x200004e4

08001b7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc2){
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_ConvCpltCallback+0x1c>
		flag = 1;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_ADC_ConvCpltCallback+0x28>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
		HAL_ADC_Stop_DMA(&hadc2);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b94:	f001 fd46 	bl	8003624 <HAL_ADC_Stop_DMA>
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000032c 	.word	0x2000032c
 8001ba4:	200045b8 	.word	0x200045b8

08001ba8 <get_adc_frequency>:

uint32_t get_adc_frequency(){
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
	return adc_frequency;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <get_adc_frequency+0x14>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200045bc 	.word	0x200045bc

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b096      	sub	sp, #88	; 0x58
 8001bc4:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
	//char uart_buf[50];
	//int uart_buf_len;
	struct ADC_param ADC_val={0};
 8001bc6:	f107 0318 	add.w	r3, r7, #24
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	615a      	str	r2, [r3, #20]
	struct FFT_res FFT_val={0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	615a      	str	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be8:	f001 f846 	bl	8002c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bec:	f000 f898 	bl	8001d20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bf0:	f000 f8e7 	bl	8001dc2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f000 fbdc 	bl	80023b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bf8:	f000 fbb4 	bl	8002364 <MX_DMA_Init>
  MX_TIM16_Init();
 8001bfc:	f000 fb5c 	bl	80022b8 <MX_TIM16_Init>
  MX_COMP1_Init();
 8001c00:	f000 f9e6 	bl	8001fd0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001c04:	f000 fabe 	bl	8002184 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001c08:	f000 f906 	bl	8001e18 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c0c:	f000 f97c 	bl	8001f08 <MX_ADC2_Init>
  MX_TIM1_Init();
 8001c10:	f000 fa0c 	bl	800202c <MX_TIM1_Init>
  MX_UART5_Init();
 8001c14:	f000 fb76 	bl	8002304 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  //-----------------LCD
  HAL_ADC_Start_DMA(&hadc1, &lcd_buf,1); // Start ADC reading from DMA (ADC_name, buffer, buffer_length)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4932      	ldr	r1, [pc, #200]	; (8001ce4 <main+0x124>)
 8001c1c:	4832      	ldr	r0, [pc, #200]	; (8001ce8 <main+0x128>)
 8001c1e:	f001 fc45 	bl	80034ac <HAL_ADC_Start_DMA>
  LCD_init(GPIOA, RS_Pin, GPIOC, E_Pin, GPIOB, D4_Pin, GPIOB, D5_Pin, GPIOB, D6_Pin, GPIOA, D7_Pin, GPIOB, D10_Pin);
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	9309      	str	r3, [sp, #36]	; 0x24
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <main+0x12c>)
 8001c28:	9308      	str	r3, [sp, #32]
 8001c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2e:	9307      	str	r3, [sp, #28]
 8001c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c34:	9306      	str	r3, [sp, #24]
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	9305      	str	r3, [sp, #20]
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	; (8001cec <main+0x12c>)
 8001c3e:	9304      	str	r3, [sp, #16]
 8001c40:	2310      	movs	r3, #16
 8001c42:	9303      	str	r3, [sp, #12]
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <main+0x12c>)
 8001c46:	9302      	str	r3, [sp, #8]
 8001c48:	2320      	movs	r3, #32
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <main+0x12c>)
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <main+0x130>)
 8001c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c5c:	f7ff fa56 	bl	800110c <LCD_init>
  //-----------------COMP
  HAL_TIM_Base_Start_IT(&htim16);
 8001c60:	4824      	ldr	r0, [pc, #144]	; (8001cf4 <main+0x134>)
 8001c62:	f004 ff3b 	bl	8006adc <HAL_TIM_Base_Start_IT>
  HAL_COMP_Start(&hcomp1);
 8001c66:	4824      	ldr	r0, [pc, #144]	; (8001cf8 <main+0x138>)
 8001c68:	f002 fdfe 	bl	8004868 <HAL_COMP_Start>
  //set up PWM for COMP testing
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4823      	ldr	r0, [pc, #140]	; (8001cfc <main+0x13c>)
 8001c70:	f005 f806 	bl	8006c80 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1999999);
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <main+0x13c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <main+0x140>)
 8001c7a:	635a      	str	r2, [r3, #52]	; 0x34

  //-----------------ADC
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buf, 4096);
 8001c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c80:	4920      	ldr	r1, [pc, #128]	; (8001d04 <main+0x144>)
 8001c82:	4821      	ldr	r0, [pc, #132]	; (8001d08 <main+0x148>)
 8001c84:	f001 fc12 	bl	80034ac <HAL_ADC_Start_DMA>
  ADC_val.bit=12; //largest ADC bit resolution, 16-bit doesn't work
 8001c88:	230c      	movs	r3, #12
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_val.prescaler=64; //prescalar of clock, cannot be too high or have weird reading
 8001c8c:	2340      	movs	r3, #64	; 0x40
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_val.sampling_time=247.5; //sampling time
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <main+0x14c>)
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_val.speed=64000000;					//clock speed on .ioc file
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <main+0x150>)
 8001c96:	623b      	str	r3, [r7, #32]
  ADC_val.adc_buf_len=4096;				//buffer length
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	61fb      	str	r3, [r7, #28]
  //uint32_t adc_buf[4096];				//buffer array
  ADC_val.adc_buf= adc_buf;				//point adc_buf to ADC buffer array
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <main+0x144>)
 8001ca0:	61bb      	str	r3, [r7, #24]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (flag == 1){
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <main+0x154>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d114      	bne.n	8001cd4 <main+0x114>
		start_FFT(&flag,&ADC_val,&FFT_val); // start FFT
 8001caa:	463a      	mov	r2, r7
 8001cac:	f107 0318 	add.w	r3, r7, #24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <main+0x154>)
 8001cb4:	f007 fe40 	bl	8009938 <start_FFT>
		adc_frequency = (FFT_val.fdominant); // assign frequency obtained from ADC
 8001cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc0:	ee17 2a90 	vmov	r2, s15
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <main+0x158>)
 8001cc6:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_DMA(&hadc2, adc_buf, ADC_val.adc_buf_len); //restart DMA
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	490d      	ldr	r1, [pc, #52]	; (8001d04 <main+0x144>)
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <main+0x148>)
 8001cd0:	f001 fbec 	bl	80034ac <HAL_ADC_Start_DMA>
	}
	  //to read the keypad buttons if any is pressed
	  keypad_read_key(lcd_buf, &huart5);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <main+0x124>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4910      	ldr	r1, [pc, #64]	; (8001d1c <main+0x15c>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fa48 	bl	8001170 <keypad_read_key>
	if (flag == 1){
 8001ce0:	e7df      	b.n	8001ca2 <main+0xe2>
 8001ce2:	bf00      	nop
 8001ce4:	200045b4 	.word	0x200045b4
 8001ce8:	200002c8 	.word	0x200002c8
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	200004e4 	.word	0x200004e4
 8001cf8:	20000420 	.word	0x20000420
 8001cfc:	20000498 	.word	0x20000498
 8001d00:	001e847f 	.word	0x001e847f
 8001d04:	200005b4 	.word	0x200005b4
 8001d08:	2000032c 	.word	0x2000032c
 8001d0c:	43778000 	.word	0x43778000
 8001d10:	03d09000 	.word	0x03d09000
 8001d14:	200045b8 	.word	0x200045b8
 8001d18:	200045bc 	.word	0x200045bc
 8001d1c:	20000530 	.word	0x20000530

08001d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b096      	sub	sp, #88	; 0x58
 8001d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2244      	movs	r2, #68	; 0x44
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f009 f82c 	bl	800ad8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d34:	463b      	mov	r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d46:	f003 fb5f 	bl	8005408 <HAL_PWREx_ControlVoltageScaling>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d50:	f000 fbc0 	bl	80024d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d54:	2302      	movs	r3, #2
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d5e:	2310      	movs	r3, #16
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d66:	2302      	movs	r3, #2
 8001d68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d6e:	230a      	movs	r3, #10
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d72:	2307      	movs	r3, #7
 8001d74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d76:	2302      	movs	r3, #2
 8001d78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fb96 	bl	80054b4 <HAL_RCC_OscConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d8e:	f000 fba1 	bl	80024d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d92:	230f      	movs	r3, #15
 8001d94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d96:	2303      	movs	r3, #3
 8001d98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001da6:	463b      	mov	r3, r7
 8001da8:	2104      	movs	r1, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 ff5e 	bl	8005c6c <HAL_RCC_ClockConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001db6:	f000 fb8d 	bl	80024d4 <Error_Handler>
  }
}
 8001dba:	bf00      	nop
 8001dbc:	3758      	adds	r7, #88	; 0x58
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b0a2      	sub	sp, #136	; 0x88
 8001dc6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2288      	movs	r2, #136	; 0x88
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f008 ffdc 	bl	800ad8c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dde:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001de0:	2302      	movs	r3, #2
 8001de2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001de8:	2308      	movs	r3, #8
 8001dea:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001dec:	2307      	movs	r3, #7
 8001dee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dfc:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4618      	mov	r0, r3
 8001e02:	f004 f957 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001e0c:	f000 fb62 	bl	80024d4 <Error_Handler>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3788      	adds	r7, #136	; 0x88
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e3c:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <MX_ADC1_Init+0xe8>)
 8001e3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e42:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8001e46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e48:	4b2c      	ldr	r3, [pc, #176]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e60:	4b26      	ldr	r3, [pc, #152]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e66:	4b25      	ldr	r3, [pc, #148]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e9c:	4817      	ldr	r0, [pc, #92]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001e9e:	f001 f9af 	bl	8003200 <HAL_ADC_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001ea8:	f000 fb14 	bl	80024d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4811      	ldr	r0, [pc, #68]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001eb8:	f002 fa76 	bl	80043a8 <HAL_ADCEx_MultiModeConfigChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001ec2:	f000 fb07 	bl	80024d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <MX_ADC1_Init+0xec>)
 8001ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eca:	2306      	movs	r3, #6
 8001ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ed2:	237f      	movs	r3, #127	; 0x7f
 8001ed4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4806      	ldr	r0, [pc, #24]	; (8001efc <MX_ADC1_Init+0xe4>)
 8001ee4:	f001 fc14 	bl	8003710 <HAL_ADC_ConfigChannel>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001eee:	f000 faf1 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	3728      	adds	r7, #40	; 0x28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002c8 	.word	0x200002c8
 8001f00:	50040000 	.word	0x50040000
 8001f04:	14f00020 	.word	0x14f00020

08001f08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
 8001f1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001f1e:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f20:	4a29      	ldr	r2, [pc, #164]	; (8001fc8 <MX_ADC2_Init+0xc0>)
 8001f22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f26:	f44f 1210 	mov.w	r2, #2359296	; 0x240000
 8001f2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f40:	2204      	movs	r2, #4
 8001f42:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001f82:	f001 f93d 	bl	8003200 <HAL_ADC_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001f8c:	f000 faa2 	bl	80024d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_ADC2_Init+0xc4>)
 8001f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f94:	2306      	movs	r3, #6
 8001f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001f98:	2306      	movs	r3, #6
 8001f9a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f9c:	237f      	movs	r3, #127	; 0x7f
 8001f9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fa8:	463b      	mov	r3, r7
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_ADC2_Init+0xbc>)
 8001fae:	f001 fbaf 	bl	8003710 <HAL_ADC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001fb8:	f000 fa8c 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000032c 	.word	0x2000032c
 8001fc8:	50040100 	.word	0x50040100
 8001fcc:	19200040 	.word	0x19200040

08001fd0 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_COMP1_Init+0x50>)
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <MX_COMP1_Init+0x54>)
 8001fd8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_COMP1_Init+0x50>)
 8001fdc:	4a12      	ldr	r2, [pc, #72]	; (8002028 <MX_COMP1_Init+0x58>)
 8001fde:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_COMP1_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_COMP1_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_COMP1_Init+0x50>)
 8001fee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ff2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_COMP1_Init+0x50>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_COMP1_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_COMP1_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_COMP1_Init+0x50>)
 8002008:	2211      	movs	r2, #17
 800200a:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_COMP1_Init+0x50>)
 800200e:	f002 fb39 	bl	8004684 <HAL_COMP_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_COMP1_Init+0x4c>
  {
    Error_Handler();
 8002018:	f000 fa5c 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000420 	.word	0x20000420
 8002024:	40010200 	.word	0x40010200
 8002028:	00800030 	.word	0x00800030

0800202c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b09a      	sub	sp, #104	; 0x68
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800204c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
 800205c:	615a      	str	r2, [r3, #20]
 800205e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	222c      	movs	r2, #44	; 0x2c
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f008 fe90 	bl	800ad8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <MX_TIM1_Init+0x150>)
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <MX_TIM1_Init+0x154>)
 8002070:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002072:	4b42      	ldr	r3, [pc, #264]	; (800217c <MX_TIM1_Init+0x150>)
 8002074:	224f      	movs	r2, #79	; 0x4f
 8002076:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <MX_TIM1_Init+0x150>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <MX_TIM1_Init+0x150>)
 8002080:	2263      	movs	r2, #99	; 0x63
 8002082:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b3d      	ldr	r3, [pc, #244]	; (800217c <MX_TIM1_Init+0x150>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <MX_TIM1_Init+0x150>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <MX_TIM1_Init+0x150>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002096:	4839      	ldr	r0, [pc, #228]	; (800217c <MX_TIM1_Init+0x150>)
 8002098:	f004 fcc8 	bl	8006a2c <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020a2:	f000 fa17 	bl	80024d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020aa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020b0:	4619      	mov	r1, r3
 80020b2:	4832      	ldr	r0, [pc, #200]	; (800217c <MX_TIM1_Init+0x150>)
 80020b4:	f005 fa1a 	bl	80074ec <HAL_TIM_ConfigClockSource>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020be:	f000 fa09 	bl	80024d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020c2:	482e      	ldr	r0, [pc, #184]	; (800217c <MX_TIM1_Init+0x150>)
 80020c4:	f004 fd7a 	bl	8006bbc <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80020ce:	f000 fa01 	bl	80024d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020e2:	4619      	mov	r1, r3
 80020e4:	4825      	ldr	r0, [pc, #148]	; (800217c <MX_TIM1_Init+0x150>)
 80020e6:	f006 f847 	bl	8008178 <HAL_TIMEx_MasterConfigSynchronization>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80020f0:	f000 f9f0 	bl	80024d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f4:	2360      	movs	r3, #96	; 0x60
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002110:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002114:	2208      	movs	r2, #8
 8002116:	4619      	mov	r1, r3
 8002118:	4818      	ldr	r0, [pc, #96]	; (800217c <MX_TIM1_Init+0x150>)
 800211a:	f005 f8d3 	bl	80072c4 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002124:	f000 f9d6 	bl	80024d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002140:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800214a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4807      	ldr	r0, [pc, #28]	; (800217c <MX_TIM1_Init+0x150>)
 800215e:	f006 f893 	bl	8008288 <HAL_TIMEx_ConfigBreakDeadTime>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002168:	f000 f9b4 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800216c:	4803      	ldr	r0, [pc, #12]	; (800217c <MX_TIM1_Init+0x150>)
 800216e:	f000 fb65 	bl	800283c <HAL_TIM_MspPostInit>

}
 8002172:	bf00      	nop
 8002174:	3768      	adds	r7, #104	; 0x68
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000044c 	.word	0x2000044c
 8002180:	40012c00 	.word	0x40012c00

08002184 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b092      	sub	sp, #72	; 0x48
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
 80021b4:	615a      	str	r2, [r3, #20]
 80021b6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021b8:	463b      	mov	r3, r7
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c4:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80021cc:	4b38      	ldr	r3, [pc, #224]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021ce:	224f      	movs	r2, #79	; 0x4f
 80021d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999999;
 80021d8:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021da:	4a36      	ldr	r2, [pc, #216]	; (80022b4 <MX_TIM2_Init+0x130>)
 80021dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e4:	4b32      	ldr	r3, [pc, #200]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ea:	4831      	ldr	r0, [pc, #196]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80021ec:	f004 fc1e 	bl	8006a2c <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80021f6:	f000 f96d 	bl	80024d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002200:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002204:	4619      	mov	r1, r3
 8002206:	482a      	ldr	r0, [pc, #168]	; (80022b0 <MX_TIM2_Init+0x12c>)
 8002208:	f005 f970 	bl	80074ec <HAL_TIM_ConfigClockSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002212:	f000 f95f 	bl	80024d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002216:	4826      	ldr	r0, [pc, #152]	; (80022b0 <MX_TIM2_Init+0x12c>)
 8002218:	f004 fcd0 	bl	8006bbc <HAL_TIM_PWM_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002222:	f000 f957 	bl	80024d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002226:	4822      	ldr	r0, [pc, #136]	; (80022b0 <MX_TIM2_Init+0x12c>)
 8002228:	f004 fe30 	bl	8006e8c <HAL_TIM_IC_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002232:	f000 f94f 	bl	80024d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002242:	4619      	mov	r1, r3
 8002244:	481a      	ldr	r0, [pc, #104]	; (80022b0 <MX_TIM2_Init+0x12c>)
 8002246:	f005 ff97 	bl	8008178 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002250:	f000 f940 	bl	80024d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	; 0x60
 8002256:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <MX_TIM2_Init+0x12c>)
 800226e:	f005 f829 	bl	80072c4 <HAL_TIM_PWM_ConfigChannel>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002278:	f000 f92c 	bl	80024d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800227c:	2300      	movs	r3, #0
 800227e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002280:	2301      	movs	r3, #1
 8002282:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	2208      	movs	r2, #8
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MX_TIM2_Init+0x12c>)
 8002294:	f004 ff7a 	bl	800718c <HAL_TIM_IC_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 800229e:	f000 f919 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <MX_TIM2_Init+0x12c>)
 80022a4:	f000 faca 	bl	800283c <HAL_TIM_MspPostInit>

}
 80022a8:	bf00      	nop
 80022aa:	3748      	adds	r7, #72	; 0x48
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20000498 	.word	0x20000498
 80022b4:	003d08ff 	.word	0x003d08ff

080022b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_TIM16_Init+0x44>)
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <MX_TIM16_Init+0x48>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_TIM16_Init+0x44>)
 80022c4:	224f      	movs	r2, #79	; 0x4f
 80022c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_TIM16_Init+0x44>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_TIM16_Init+0x44>)
 80022d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_TIM16_Init+0x44>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <MX_TIM16_Init+0x44>)
 80022de:	2200      	movs	r2, #0
 80022e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_TIM16_Init+0x44>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_TIM16_Init+0x44>)
 80022ea:	f004 fb9f 	bl	8006a2c <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80022f4:	f000 f8ee 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200004e4 	.word	0x200004e4
 8002300:	40014400 	.word	0x40014400

08002304 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <MX_UART5_Init+0x58>)
 800230a:	4a15      	ldr	r2, [pc, #84]	; (8002360 <MX_UART5_Init+0x5c>)
 800230c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 800230e:	4b13      	ldr	r3, [pc, #76]	; (800235c <MX_UART5_Init+0x58>)
 8002310:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002314:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_UART5_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <MX_UART5_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_UART5_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_UART5_Init+0x58>)
 800232a:	2208      	movs	r2, #8
 800232c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MX_UART5_Init+0x58>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_UART5_Init+0x58>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <MX_UART5_Init+0x58>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_UART5_Init+0x58>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_UART5_Init+0x58>)
 8002348:	f006 f83a 	bl	80083c0 <HAL_HalfDuplex_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002352:	f000 f8bf 	bl	80024d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000530 	.word	0x20000530
 8002360:	40005000 	.word	0x40005000

08002364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <MX_DMA_Init+0x48>)
 800236c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236e:	4a0f      	ldr	r2, [pc, #60]	; (80023ac <MX_DMA_Init+0x48>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6493      	str	r3, [r2, #72]	; 0x48
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <MX_DMA_Init+0x48>)
 8002378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	200b      	movs	r0, #11
 8002388:	f002 fbc1 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800238c:	200b      	movs	r0, #11
 800238e:	f002 fbda 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	200c      	movs	r0, #12
 8002398:	f002 fbb9 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800239c:	200c      	movs	r0, #12
 800239e:	f002 fbd2 	bl	8004b46 <HAL_NVIC_EnableIRQ>

}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000

080023b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	60da      	str	r2, [r3, #12]
 80023c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	4a3f      	ldr	r2, [pc, #252]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a39      	ldr	r2, [pc, #228]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <MX_GPIO_Init+0x118>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <MX_GPIO_Init+0x118>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <MX_GPIO_Init+0x118>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a2d      	ldr	r2, [pc, #180]	; (80024c8 <MX_GPIO_Init+0x118>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <MX_GPIO_Init+0x118>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin|D10_Pin, GPIO_PIN_RESET);
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800242c:	4827      	ldr	r0, [pc, #156]	; (80024cc <MX_GPIO_Init+0x11c>)
 800242e:	f002 ffc5 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	4826      	ldr	r0, [pc, #152]	; (80024d0 <MX_GPIO_Init+0x120>)
 8002438:	f002 ffc0 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|RS_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	f002 ffb9 	bl	80053bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800244a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800244e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002450:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	481b      	ldr	r0, [pc, #108]	; (80024d0 <MX_GPIO_Init+0x120>)
 8002462:	f002 fe01 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin|D10_Pin;
 8002466:	f44f 638e 	mov.w	r3, #1136	; 0x470
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4813      	ldr	r0, [pc, #76]	; (80024cc <MX_GPIO_Init+0x11c>)
 8002480:	f002 fdf2 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_Pin */
  GPIO_InitStruct.Pin = E_Pin;
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_GPIO_Init+0x120>)
 800249c:	f002 fde4 	bl	8005068 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin;
 80024a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024bc:	f002 fdd4 	bl	8005068 <HAL_GPIO_Init>

}
 80024c0:	bf00      	nop
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	48000800 	.word	0x48000800

080024d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d8:	b672      	cpsid	i
}
 80024da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024dc:	e7fe      	b.n	80024dc <Error_Handler+0x8>
	...

080024e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_MspInit+0x44>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <HAL_MspInit+0x44>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6613      	str	r3, [r2, #96]	; 0x60
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_MspInit+0x44>)
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_MspInit+0x44>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_MspInit+0x44>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_MspInit+0x44>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000

08002528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <HAL_ADC_MspInit+0x19c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d159      	bne.n	80025fe <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 8002552:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002554:	4b5c      	ldr	r3, [pc, #368]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10b      	bne.n	8002574 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 800255c:	4b5b      	ldr	r3, [pc, #364]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	4a5a      	ldr	r2, [pc, #360]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002562:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002568:	4b58      	ldr	r3, [pc, #352]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002574:	4b55      	ldr	r3, [pc, #340]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	4a54      	ldr	r2, [pc, #336]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002580:	4b52      	ldr	r3, [pc, #328]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800258c:	2301      	movs	r3, #1
 800258e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002590:	230b      	movs	r3, #11
 8002592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 031c 	add.w	r3, r7, #28
 800259c:	4619      	mov	r1, r3
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f002 fd61 	bl	8005068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025a8:	4a4a      	ldr	r2, [pc, #296]	; (80026d4 <HAL_ADC_MspInit+0x1ac>)
 80025aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025ac:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025c4:	4b42      	ldr	r3, [pc, #264]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025cc:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025d6:	2220      	movs	r2, #32
 80025d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025e2:	f002 facb 	bl	8004b7c <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80025ec:	f7ff ff72 	bl	80024d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_ADC_MspInit+0x1a8>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025fc:	e05d      	b.n	80026ba <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a35      	ldr	r2, [pc, #212]	; (80026d8 <HAL_ADC_MspInit+0x1b0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d158      	bne.n	80026ba <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC_CLK_ENABLED++;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 8002610:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_ADC_MspInit+0x1a0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10b      	bne.n	8002632 <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800261a:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b26      	ldr	r3, [pc, #152]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4a25      	ldr	r2, [pc, #148]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263e:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_ADC_MspInit+0x1a4>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800264a:	2302      	movs	r3, #2
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800264e:	230b      	movs	r3, #11
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002660:	f002 fd02 	bl	8005068 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 8002666:	4a1e      	ldr	r2, [pc, #120]	; (80026e0 <HAL_ADC_MspInit+0x1b8>)
 8002668:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_0;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 8002684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002688:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 800268c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002690:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 800269a:	2200      	movs	r2, #0
 800269c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800269e:	480f      	ldr	r0, [pc, #60]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 80026a0:	f002 fa6c 	bl	8004b7c <HAL_DMA_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80026aa:	f7ff ff13 	bl	80024d4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 80026b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80026b4:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_ADC_MspInit+0x1b4>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80026ba:	bf00      	nop
 80026bc:	3730      	adds	r7, #48	; 0x30
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	50040000 	.word	0x50040000
 80026c8:	200045c0 	.word	0x200045c0
 80026cc:	40021000 	.word	0x40021000
 80026d0:	20000390 	.word	0x20000390
 80026d4:	40020008 	.word	0x40020008
 80026d8:	50040100 	.word	0x50040100
 80026dc:	200003d8 	.word	0x200003d8
 80026e0:	4002001c 	.word	0x4002001c

080026e4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <HAL_COMP_MspInit+0x6c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11f      	bne.n	8002746 <HAL_COMP_MspInit+0x62>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_COMP_MspInit+0x70>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a12      	ldr	r2, [pc, #72]	; (8002754 <HAL_COMP_MspInit+0x70>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_COMP_MspInit+0x70>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PC5     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800271e:	2320      	movs	r3, #32
 8002720:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002722:	2303      	movs	r3, #3
 8002724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	4619      	mov	r1, r3
 8002730:	4809      	ldr	r0, [pc, #36]	; (8002758 <HAL_COMP_MspInit+0x74>)
 8002732:	f002 fc99 	bl	8005068 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2040      	movs	r0, #64	; 0x40
 800273c:	f002 f9e7 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8002740:	2040      	movs	r0, #64	; 0x40
 8002742:	f002 fa00 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40010200 	.word	0x40010200
 8002754:	40021000 	.word	0x40021000
 8002758:	48000800 	.word	0x48000800

0800275c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_TIM_Base_MspInit+0xd4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 8002780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 8002784:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002788:	6613      	str	r3, [r2, #96]	; 0x60
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002796:	e047      	b.n	8002828 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d131      	bne.n	8002806 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027d2:	2304      	movs	r3, #4
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027e2:	2301      	movs	r3, #1
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f002 fc3a 	bl	8005068 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	201c      	movs	r0, #28
 80027fa:	f002 f988 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027fe:	201c      	movs	r0, #28
 8002800:	f002 f9a1 	bl	8004b46 <HAL_NVIC_EnableIRQ>
}
 8002804:	e010      	b.n	8002828 <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM16)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <HAL_TIM_Base_MspInit+0xdc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d10b      	bne.n	8002828 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 8002812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002814:	4a07      	ldr	r2, [pc, #28]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 8002816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281a:	6613      	str	r3, [r2, #96]	; 0x60
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 800281e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	bf00      	nop
 800282a:	3730      	adds	r7, #48	; 0x30
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40014400 	.word	0x40014400

0800283c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	60da      	str	r2, [r3, #12]
 8002852:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_TIM_MspPostInit+0xac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d11e      	bne.n	800289c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002888:	2301      	movs	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002896:	f002 fbe7 	bl	8005068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800289a:	e021      	b.n	80028e0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a4:	d11c      	bne.n	80028e0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <HAL_TIM_MspPostInit+0xb0>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028be:	2320      	movs	r3, #32
 80028c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028dc:	f002 fbc4 	bl	8005068 <HAL_GPIO_Init>
}
 80028e0:	bf00      	nop
 80028e2:	3728      	adds	r7, #40	; 0x28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0ac      	sub	sp, #176	; 0xb0
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2288      	movs	r2, #136	; 0x88
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f008 fa3b 	bl	800ad8c <memset>
  if(huart->Instance==UART5)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <HAL_UART_MspInit+0xc0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d143      	bne.n	80029a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002920:	2310      	movs	r3, #16
 8002922:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002924:	2300      	movs	r3, #0
 8002926:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f003 fbc1 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002938:	f7ff fdcc 	bl	80024d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	6593      	str	r3, [r2, #88]	; 0x58
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0xc4>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002974:	2312      	movs	r3, #18
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800297a:	2301      	movs	r3, #1
 800297c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002986:	2308      	movs	r3, #8
 8002988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002990:	4619      	mov	r1, r3
 8002992:	4809      	ldr	r0, [pc, #36]	; (80029b8 <HAL_UART_MspInit+0xc8>)
 8002994:	f002 fb68 	bl	8005068 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	2035      	movs	r0, #53	; 0x35
 800299e:	f002 f8b6 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80029a2:	2035      	movs	r0, #53	; 0x35
 80029a4:	f002 f8cf 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80029a8:	bf00      	nop
 80029aa:	37b0      	adds	r7, #176	; 0xb0
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40005000 	.word	0x40005000
 80029b4:	40021000 	.word	0x40021000
 80029b8:	48000800 	.word	0x48000800

080029bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <NMI_Handler+0x4>

080029c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <HardFault_Handler+0x4>

080029c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <MemManage_Handler+0x4>

080029ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d2:	e7fe      	b.n	80029d2 <BusFault_Handler+0x4>

080029d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <UsageFault_Handler+0x4>

080029da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a08:	f000 f992 	bl	8002d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <DMA1_Channel1_IRQHandler+0x10>)
 8002a16:	f002 fa48 	bl	8004eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000390 	.word	0x20000390

08002a24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <DMA1_Channel2_IRQHandler+0x10>)
 8002a2a:	f002 fa3e 	bl	8004eaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200003d8 	.word	0x200003d8

08002a38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <TIM2_IRQHandler+0x10>)
 8002a3e:	f004 fa86 	bl	8006f4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000498 	.word	0x20000498

08002a4c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <UART5_IRQHandler+0x10>)
 8002a52:	f005 fd9f 	bl	8008594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000530 	.word	0x20000530

08002a60 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 21 and 22.
  */
void COMP_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <COMP_IRQHandler+0x10>)
 8002a66:	f001 ff49 	bl	80048fc <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000420 	.word	0x20000420

08002a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
	return 1;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_kill>:

int _kill(int pid, int sig)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a8e:	f008 f953 	bl	800ad38 <__errno>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2216      	movs	r2, #22
 8002a96:	601a      	str	r2, [r3, #0]
	return -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <_exit>:

void _exit (int status)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffe7 	bl	8002a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ab6:	e7fe      	b.n	8002ab6 <_exit+0x12>

08002ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e00a      	b.n	8002ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aca:	f3af 8000 	nop.w
 8002ace:	4601      	mov	r1, r0
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	60ba      	str	r2, [r7, #8]
 8002ad6:	b2ca      	uxtb	r2, r1
 8002ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbf0      	blt.n	8002aca <_read+0x12>
	}

return len;
 8002ae8:	687b      	ldr	r3, [r7, #4]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b086      	sub	sp, #24
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e009      	b.n	8002b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	60ba      	str	r2, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	dbf1      	blt.n	8002b04 <_write+0x12>
	}
	return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <_close>:

int _close(int file)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
	return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b52:	605a      	str	r2, [r3, #4]
	return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_isatty>:

int _isatty(int file)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
	return 1;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <_sbrk+0x5c>)
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <_sbrk+0x60>)
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba8:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <_sbrk+0x64>)
 8002bb2:	4a12      	ldr	r2, [pc, #72]	; (8002bfc <_sbrk+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d207      	bcs.n	8002bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc4:	f008 f8b8 	bl	800ad38 <__errno>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	220c      	movs	r2, #12
 8002bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	e009      	b.n	8002be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <_sbrk+0x64>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <_sbrk+0x64>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a05      	ldr	r2, [pc, #20]	; (8002bf8 <_sbrk+0x64>)
 8002be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20018000 	.word	0x20018000
 8002bf4:	00000400 	.word	0x00000400
 8002bf8:	200045c4 	.word	0x200045c4
 8002bfc:	200045e0 	.word	0x200045e0

08002c00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <SystemInit+0x20>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <SystemInit+0x20>)
 8002c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c28:	f7ff ffea 	bl	8002c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c2e:	490d      	ldr	r1, [pc, #52]	; (8002c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c30:	4a0d      	ldr	r2, [pc, #52]	; (8002c68 <LoopForever+0xe>)
  movs r3, #0
 8002c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c34:	e002      	b.n	8002c3c <LoopCopyDataInit>

08002c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c3a:	3304      	adds	r3, #4

08002c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c40:	d3f9      	bcc.n	8002c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c42:	4a0a      	ldr	r2, [pc, #40]	; (8002c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c44:	4c0a      	ldr	r4, [pc, #40]	; (8002c70 <LoopForever+0x16>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c48:	e001      	b.n	8002c4e <LoopFillZerobss>

08002c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c4c:	3204      	adds	r2, #4

08002c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c50:	d3fb      	bcc.n	8002c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c52:	f008 f877 	bl	800ad44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c56:	f7fe ffb3 	bl	8001bc0 <main>

08002c5a <LoopForever>:

LoopForever:
    b LoopForever
 8002c5a:	e7fe      	b.n	8002c5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c64:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c68:	0802110c 	.word	0x0802110c
  ldr r2, =_sbss
 8002c6c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c70:	200045dc 	.word	0x200045dc

08002c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c74:	e7fe      	b.n	8002c74 <ADC1_2_IRQHandler>
	...

08002c78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <HAL_Init+0x3c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <HAL_Init+0x3c>)
 8002c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c8e:	2003      	movs	r0, #3
 8002c90:	f001 ff32 	bl	8004af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c94:	2000      	movs	r0, #0
 8002c96:	f000 f80f 	bl	8002cb8 <HAL_InitTick>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	e001      	b.n	8002caa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ca6:	f7ff fc1b 	bl	80024e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002caa:	79fb      	ldrb	r3, [r7, #7]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40022000 	.word	0x40022000

08002cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cc4:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_InitTick+0x6c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d023      	beq.n	8002d14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_InitTick+0x70>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_InitTick+0x6c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 ff3d 	bl	8004b62 <HAL_SYSTICK_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d809      	bhi.n	8002d08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f001 ff07 	bl	8004b0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_InitTick+0x74>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e007      	b.n	8002d18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
 8002d0c:	e004      	b.n	8002d18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e001      	b.n	8002d18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000010 	.word	0x20000010
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	2000000c 	.word	0x2000000c

08002d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d34:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x20>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x24>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_IncTick+0x24>)
 8002d42:	6013      	str	r3, [r2, #0]
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000010 	.word	0x20000010
 8002d54:	200045c8 	.word	0x200045c8

08002d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_GetTick+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200045c8 	.word	0x200045c8

08002d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7ff ffee 	bl	8002d58 <HAL_GetTick>
 8002d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d005      	beq.n	8002d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_Delay+0x44>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d96:	bf00      	nop
 8002d98:	f7ff ffde 	bl	8002d58 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d8f7      	bhi.n	8002d98 <HAL_Delay+0x28>
  {
  }
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000010 	.word	0x20000010

08002db8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	461a      	mov	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <LL_ADC_SetOffset+0x44>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	03fff000 	.word	0x03fff000

08002e68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	461a      	mov	r2, r3
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	3360      	adds	r3, #96	; 0x60
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ebe:	bf00      	nop
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	3330      	adds	r3, #48	; 0x30
 8002f00:	461a      	mov	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	211f      	movs	r1, #31
 8002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0e9b      	lsrs	r3, r3, #26
 8002f28:	f003 011f 	and.w	r1, r3, #31
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	431a      	orrs	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3314      	adds	r3, #20
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	0e5b      	lsrs	r3, r3, #25
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	0d1b      	lsrs	r3, r3, #20
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2107      	movs	r1, #7
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	401a      	ands	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0d1b      	lsrs	r3, r3, #20
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	401a      	ands	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0318 	and.w	r3, r3, #24
 8002fc2:	4908      	ldr	r1, [pc, #32]	; (8002fe4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002fc4:	40d9      	lsrs	r1, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	400b      	ands	r3, r1
 8002fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	0007ffff 	.word	0x0007ffff

08002fe8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6093      	str	r3, [r2, #8]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303c:	d101      	bne.n	8003042 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003060:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003064:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308c:	d101      	bne.n	8003092 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030dc:	f043 0202 	orr.w	r2, r3, #2
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <LL_ADC_IsEnabled+0x18>
 8003104:	2301      	movs	r3, #1
 8003106:	e000      	b.n	800310a <LL_ADC_IsEnabled+0x1a>
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d101      	bne.n	800312e <LL_ADC_IsDisableOngoing+0x18>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_ADC_IsDisableOngoing+0x1a>
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800314c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003178:	f043 0210 	orr.w	r2, r3, #16
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d101      	bne.n	80031a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031c6:	f043 0220 	orr.w	r2, r3, #32
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e136      	b.n	8003488 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff f97d 	bl	8002528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fef1 	bl	8003028 <LL_ADC_IsDeepPowerDownEnabled>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fed7 	bl	8003004 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff0c 	bl	8003078 <LL_ADC_IsInternalRegulatorEnabled>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fef0 	bl	8003050 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003270:	4b87      	ldr	r3, [pc, #540]	; (8003490 <HAL_ADC_Init+0x290>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	4a87      	ldr	r2, [pc, #540]	; (8003494 <HAL_ADC_Init+0x294>)
 8003278:	fba2 2303 	umull	r2, r3, r2, r3
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003284:	e002      	b.n	800328c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff feee 	bl	8003078 <LL_ADC_IsInternalRegulatorEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff ff62 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80032c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f040 80cf 	bne.w	8003476 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f040 80cb 	bne.w	8003476 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80032e8:	f043 0202 	orr.w	r2, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fefb 	bl	80030f0 <LL_ADC_IsEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003300:	4865      	ldr	r0, [pc, #404]	; (8003498 <HAL_ADC_Init+0x298>)
 8003302:	f7ff fef5 	bl	80030f0 <LL_ADC_IsEnabled>
 8003306:	4604      	mov	r4, r0
 8003308:	4864      	ldr	r0, [pc, #400]	; (800349c <HAL_ADC_Init+0x29c>)
 800330a:	f7ff fef1 	bl	80030f0 <LL_ADC_IsEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	431c      	orrs	r4, r3
 8003312:	4863      	ldr	r0, [pc, #396]	; (80034a0 <HAL_ADC_Init+0x2a0>)
 8003314:	f7ff feec 	bl	80030f0 <LL_ADC_IsEnabled>
 8003318:	4603      	mov	r3, r0
 800331a:	4323      	orrs	r3, r4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d105      	bne.n	800332c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	485f      	ldr	r0, [pc, #380]	; (80034a4 <HAL_ADC_Init+0x2a4>)
 8003328:	f7ff fd46 	bl	8002db8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7e5b      	ldrb	r3, [r3, #25]
 8003330:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003336:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800333c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003342:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800334c:	4313      	orrs	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d106      	bne.n	8003368 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	3b01      	subs	r3, #1
 8003360:	045b      	lsls	r3, r3, #17
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_ADC_Init+0x2a8>)
 800338c:	4013      	ands	r3, r2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	430b      	orrs	r3, r1
 8003396:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fef5 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80033a2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff16 	bl	80031da <LL_ADC_INJ_IsConversionOngoing>
 80033ae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d13d      	bne.n	8003432 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d13a      	bne.n	8003432 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033c0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033c8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d8:	f023 0302 	bic.w	r3, r3, #2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	430b      	orrs	r3, r1
 80033e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d118      	bne.n	8003422 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003406:	4311      	orrs	r1, r2
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800340c:	4311      	orrs	r1, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003412:	430a      	orrs	r2, r1
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	611a      	str	r2, [r3, #16]
 8003420:	e007      	b.n	8003432 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0201 	bic.w	r2, r2, #1
 8003430:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10c      	bne.n	8003454 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	f023 010f 	bic.w	r1, r3, #15
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	1e5a      	subs	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
 8003452:	e007      	b.n	8003464 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 020f 	bic.w	r2, r2, #15
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f023 0303 	bic.w	r3, r3, #3
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
 8003474:	e007      	b.n	8003486 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003486:	7ffb      	ldrb	r3, [r7, #31]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3724      	adds	r7, #36	; 0x24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd90      	pop	{r4, r7, pc}
 8003490:	20000008 	.word	0x20000008
 8003494:	053e2d63 	.word	0x053e2d63
 8003498:	50040000 	.word	0x50040000
 800349c:	50040100 	.word	0x50040100
 80034a0:	50040200 	.word	0x50040200
 80034a4:	50040300 	.word	0x50040300
 80034a8:	fff0c007 	.word	0xfff0c007

080034ac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b8:	4853      	ldr	r0, [pc, #332]	; (8003608 <HAL_ADC_Start_DMA+0x15c>)
 80034ba:	f7ff fd95 	bl	8002fe8 <LL_ADC_GetMultimode>
 80034be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fe61 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 8093 	bne.w	80035f8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_Start_DMA+0x34>
 80034dc:	2302      	movs	r3, #2
 80034de:	e08e      	b.n	80035fe <HAL_ADC_Start_DMA+0x152>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a47      	ldr	r2, [pc, #284]	; (800360c <HAL_ADC_Start_DMA+0x160>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d008      	beq.n	8003504 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d002      	beq.n	8003504 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b09      	cmp	r3, #9
 8003502:	d172      	bne.n	80035ea <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fdaf 	bl	8004068 <ADC_Enable>
 800350a:	4603      	mov	r3, r0
 800350c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d165      	bne.n	80035e0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a38      	ldr	r2, [pc, #224]	; (8003610 <HAL_ADC_Start_DMA+0x164>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d002      	beq.n	8003538 <HAL_ADC_Start_DMA+0x8c>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	e000      	b.n	800353a <HAL_ADC_Start_DMA+0x8e>
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_ADC_Start_DMA+0x168>)
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4293      	cmp	r3, r2
 8003540:	d002      	beq.n	8003548 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d006      	beq.n	800356e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f023 0206 	bic.w	r2, r3, #6
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	659a      	str	r2, [r3, #88]	; 0x58
 800356c:	e002      	b.n	8003574 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003578:	4a27      	ldr	r2, [pc, #156]	; (8003618 <HAL_ADC_Start_DMA+0x16c>)
 800357a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_ADC_Start_DMA+0x170>)
 8003582:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	4a25      	ldr	r2, [pc, #148]	; (8003620 <HAL_ADC_Start_DMA+0x174>)
 800358a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	221c      	movs	r2, #28
 8003592:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0210 	orr.w	r2, r2, #16
 80035aa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	4619      	mov	r1, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f001 fb8e 	bl	8004cec <HAL_DMA_Start_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff fdaf 	bl	800313c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80035de:	e00d      	b.n	80035fc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80035e8:	e008      	b.n	80035fc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035f6:	e001      	b.n	80035fc <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
 80035fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	50040300 	.word	0x50040300
 800360c:	50040200 	.word	0x50040200
 8003610:	50040100 	.word	0x50040100
 8003614:	50040000 	.word	0x50040000
 8003618:	08004233 	.word	0x08004233
 800361c:	0800430b 	.word	0x0800430b
 8003620:	08004327 	.word	0x08004327

08003624 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_ADC_Stop_DMA+0x16>
 8003636:	2302      	movs	r3, #2
 8003638:	e051      	b.n	80036de <HAL_ADC_Stop_DMA+0xba>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003642:	2103      	movs	r1, #3
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fc53 	bl	8003ef0 <ADC_ConversionStop>
 800364a:	4603      	mov	r3, r0
 800364c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800364e:	7bfb      	ldrb	r3, [r7, #15]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d13f      	bne.n	80036d4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003668:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d10f      	bne.n	8003692 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fb98 	bl	8004dac <HAL_DMA_Abort>
 800367c:	4603      	mov	r3, r0
 800367e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0210 	bic.w	r2, r2, #16
 80036a0:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fd63 	bl	8004174 <ADC_Disable>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e002      	b.n	80036ba <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fd5d 	bl	8004174 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b0b6      	sub	sp, #216	; 0xd8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_ADC_ConfigChannel+0x22>
 800372e:	2302      	movs	r3, #2
 8003730:	e3c7      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x7b2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fd24 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 83a8 	bne.w	8003e9c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b05      	cmp	r3, #5
 8003752:	d824      	bhi.n	800379e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	3b02      	subs	r3, #2
 800375a:	2b03      	cmp	r3, #3
 800375c:	d81b      	bhi.n	8003796 <HAL_ADC_ConfigChannel+0x86>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_ADC_ConfigChannel+0x54>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003775 	.word	0x08003775
 8003768:	0800377d 	.word	0x0800377d
 800376c:	08003785 	.word	0x08003785
 8003770:	0800378d 	.word	0x0800378d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	220c      	movs	r2, #12
 8003778:	605a      	str	r2, [r3, #4]
          break;
 800377a:	e011      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2212      	movs	r2, #18
 8003780:	605a      	str	r2, [r3, #4]
          break;
 8003782:	e00d      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2218      	movs	r2, #24
 8003788:	605a      	str	r2, [r3, #4]
          break;
 800378a:	e009      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003792:	605a      	str	r2, [r3, #4]
          break;
 8003794:	e004      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2206      	movs	r2, #6
 800379a:	605a      	str	r2, [r3, #4]
          break;
 800379c:	e000      	b.n	80037a0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800379e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f7ff fb9f 	bl	8002ef0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fce8 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 80037bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd08 	bl	80031da <LL_ADC_INJ_IsConversionOngoing>
 80037ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 81a6 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 81a1 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f7ff fbaa 	bl	8002f48 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	08db      	lsrs	r3, r3, #3
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b04      	cmp	r3, #4
 8003814:	d00a      	beq.n	800382c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	6919      	ldr	r1, [r3, #16]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003826:	f7ff fafb 	bl	8002e20 <LL_ADC_SetOffset>
 800382a:	e17b      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fb18 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x148>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fb0d 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	e01e      	b.n	8003896 <HAL_ADC_ConfigChannel+0x186>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fb02 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800387a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800387e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800388a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x19e>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	e018      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80038ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80038d2:	2320      	movs	r3, #32
 80038d4:	e004      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80038d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d106      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fad1 	bl	8002e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fab5 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003904:	2b00      	cmp	r3, #0
 8003906:	d10a      	bne.n	800391e <HAL_ADC_ConfigChannel+0x20e>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff faaa 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003914:	4603      	mov	r3, r0
 8003916:	0e9b      	lsrs	r3, r3, #26
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	e01e      	b.n	800395c <HAL_ADC_ConfigChannel+0x24c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff fa9f 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800393c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800394c:	2320      	movs	r3, #32
 800394e:	e004      	b.n	800395a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003950:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x264>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	e018      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x296>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003988:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800398c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003990:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003998:	2320      	movs	r3, #32
 800399a:	e004      	b.n	80039a6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800399c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d106      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fa6e 	bl	8002e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2102      	movs	r1, #2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fa52 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x2d4>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2102      	movs	r1, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fa47 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 80039da:	4603      	mov	r3, r0
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	f003 021f 	and.w	r2, r3, #31
 80039e2:	e01e      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x312>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2102      	movs	r1, #2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fa3c 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039fa:	fa93 f3a3 	rbit	r3, r3
 80039fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	e004      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a1a:	fab3 f383 	clz	r3, r3
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d105      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x32a>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	0e9b      	lsrs	r3, r3, #26
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	e016      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x358>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a46:	fa93 f3a3 	rbit	r3, r3
 8003a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e004      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003a5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d106      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fa0d 	bl	8002e94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2103      	movs	r1, #3
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff f9f1 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x396>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2103      	movs	r1, #3
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f9e6 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	0e9b      	lsrs	r3, r3, #26
 8003aa0:	f003 021f 	and.w	r2, r3, #31
 8003aa4:	e017      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x3c6>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2103      	movs	r1, #3
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff f9db 	bl	8002e68 <LL_ADC_GetOffsetChannel>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x3de>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	0e9b      	lsrs	r3, r3, #26
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	e011      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x402>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003afe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e003      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d106      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2103      	movs	r1, #3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f9b8 	bl	8002e94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fae1 	bl	80030f0 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 813f 	bne.w	8003db4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7ff fa2c 	bl	8002fa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a8e      	ldr	r2, [pc, #568]	; (8003d88 <HAL_ADC_ConfigChannel+0x678>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f040 8130 	bne.w	8003db4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x46c>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	bf94      	ite	ls
 8003b74:	2301      	movls	r3, #1
 8003b76:	2300      	movhi	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e019      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x4a0>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e003      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003b98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	bf94      	ite	ls
 8003baa:	2301      	movls	r3, #1
 8003bac:	2300      	movhi	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d079      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x4c0>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	069b      	lsls	r3, r3, #26
 8003bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bce:	e015      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x4ec>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	069b      	lsls	r3, r3, #26
 8003bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x50c>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0e9b      	lsrs	r3, r3, #26
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	e017      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x53c>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003c34:	2320      	movs	r3, #32
 8003c36:	e003      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x562>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	3301      	adds	r3, #1
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	051b      	lsls	r3, r3, #20
 8003c70:	e018      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x594>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e003      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	e080      	b.n	8003daa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x5b4>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	069b      	lsls	r3, r3, #26
 8003cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc2:	e015      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x5e0>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	e003      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	069b      	lsls	r3, r3, #26
 8003cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x600>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	3301      	adds	r3, #1
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	e017      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x630>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e003      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	ea42 0103 	orr.w	r1, r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x65c>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	3301      	adds	r3, #1
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	3b1e      	subs	r3, #30
 8003d64:	051b      	lsls	r3, r3, #20
 8003d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	e01d      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x698>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	613b      	str	r3, [r7, #16]
  return result;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e005      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x684>
 8003d88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f003 021f 	and.w	r2, r3, #31
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	3b1e      	subs	r3, #30
 8003da2:	051b      	lsls	r3, r3, #20
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da8:	430b      	orrs	r3, r1
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	4619      	mov	r1, r3
 8003db0:	f7ff f8ca 	bl	8002f48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <HAL_ADC_ConfigChannel+0x7bc>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d07a      	beq.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc0:	4843      	ldr	r0, [pc, #268]	; (8003ed0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003dc2:	f7ff f81f 	bl	8002e04 <LL_ADC_GetCommonPathInternalCh>
 8003dc6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d12c      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d126      	bne.n	8003e2e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x6e4>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <HAL_ADC_ConfigChannel+0x7cc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d15d      	bne.n	8003eb0 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4834      	ldr	r0, [pc, #208]	; (8003ed0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e00:	f7fe ffed 	bl	8002dde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	4a36      	ldr	r2, [pc, #216]	; (8003ee4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	099b      	lsrs	r3, r3, #6
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e1e:	e002      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f9      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e2c:	e040      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2d      	ldr	r2, [pc, #180]	; (8003ee8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d118      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x75a>
 8003e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d112      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x748>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_ADC_ConfigChannel+0x7cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d12d      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e60:	4619      	mov	r1, r3
 8003e62:	481b      	ldr	r0, [pc, #108]	; (8003ed0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e64:	f7fe ffbb 	bl	8002dde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e68:	e024      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_ADC_ConfigChannel+0x7dc>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d120      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11a      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d115      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e92:	4619      	mov	r1, r3
 8003e94:	480e      	ldr	r0, [pc, #56]	; (8003ed0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e96:	f7fe ffa2 	bl	8002dde <LL_ADC_SetCommonPathInternalCh>
 8003e9a:	e00c      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f043 0220 	orr.w	r2, r3, #32
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003eae:	e002      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003eb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	37d8      	adds	r7, #216	; 0xd8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	80080000 	.word	0x80080000
 8003ed0:	50040300 	.word	0x50040300
 8003ed4:	c7520000 	.word	0xc7520000
 8003ed8:	50040000 	.word	0x50040000
 8003edc:	50040200 	.word	0x50040200
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	053e2d63 	.word	0x053e2d63
 8003ee8:	cb840000 	.word	0xcb840000
 8003eec:	80000001 	.word	0x80000001

08003ef0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b088      	sub	sp, #32
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff f940 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003f0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f961 	bl	80031da <LL_ADC_INJ_IsConversionOngoing>
 8003f18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d103      	bne.n	8003f28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8098 	beq.w	8004058 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d02a      	beq.n	8003f8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	7e5b      	ldrb	r3, [r3, #25]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d126      	bne.n	8003f8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7e1b      	ldrb	r3, [r3, #24]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d122      	bne.n	8003f8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f4a:	e014      	b.n	8003f76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	4a45      	ldr	r2, [pc, #276]	; (8004064 <ADC_ConversionStop+0x174>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d90d      	bls.n	8003f70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e074      	b.n	800405a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f80:	2b40      	cmp	r3, #64	; 0x40
 8003f82:	d1e3      	bne.n	8003f4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d014      	beq.n	8003fbc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f8f8 	bl	800318c <LL_ADC_REG_IsConversionOngoing>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f8b5 	bl	8003116 <LL_ADC_IsDisableOngoing>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff f8d4 	bl	8003164 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d014      	beq.n	8003fec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff f907 	bl	80031da <LL_ADC_INJ_IsConversionOngoing>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff f89d 	bl	8003116 <LL_ADC_IsDisableOngoing>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff f8e3 	bl	80031b2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d005      	beq.n	8003ffe <ADC_ConversionStop+0x10e>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d105      	bne.n	8004004 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	617b      	str	r3, [r7, #20]
        break;
 8003ffc:	e005      	b.n	800400a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ffe:	2308      	movs	r3, #8
 8004000:	617b      	str	r3, [r7, #20]
        break;
 8004002:	e002      	b.n	800400a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004004:	2304      	movs	r3, #4
 8004006:	617b      	str	r3, [r7, #20]
        break;
 8004008:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800400a:	f7fe fea5 	bl	8002d58 <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004010:	e01b      	b.n	800404a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004012:	f7fe fea1 	bl	8002d58 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b05      	cmp	r3, #5
 800401e:	d914      	bls.n	800404a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e007      	b.n	800405a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1dc      	bne.n	8004012 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	a33fffff 	.word	0xa33fffff

08004068 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f839 	bl	80030f0 <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d169      	bne.n	8004158 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <ADC_Enable+0xfc>)
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f043 0210 	orr.w	r2, r3, #16
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e055      	b.n	800415a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fff4 	bl	80030a0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80040b8:	482b      	ldr	r0, [pc, #172]	; (8004168 <ADC_Enable+0x100>)
 80040ba:	f7fe fea3 	bl	8002e04 <LL_ADC_GetCommonPathInternalCh>
 80040be:	4603      	mov	r3, r0
 80040c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <ADC_Enable+0x104>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	4a28      	ldr	r2, [pc, #160]	; (8004170 <ADC_Enable+0x108>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80040e2:	e002      	b.n	80040ea <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f9      	bne.n	80040e4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040f0:	f7fe fe32 	bl	8002d58 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f6:	e028      	b.n	800414a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fe fff7 	bl	80030f0 <LL_ADC_IsEnabled>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fe ffc7 	bl	80030a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004112:	f7fe fe21 	bl	8002d58 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d914      	bls.n	800414a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d00d      	beq.n	800414a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	f043 0201 	orr.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e007      	b.n	800415a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b01      	cmp	r3, #1
 8004156:	d1cf      	bne.n	80040f8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	8000003f 	.word	0x8000003f
 8004168:	50040300 	.word	0x50040300
 800416c:	20000008 	.word	0x20000008
 8004170:	053e2d63 	.word	0x053e2d63

08004174 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe ffc8 	bl	8003116 <LL_ADC_IsDisableOngoing>
 8004186:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe ffaf 	bl	80030f0 <LL_ADC_IsEnabled>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d047      	beq.n	8004228 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d144      	bne.n	8004228 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030d 	and.w	r3, r3, #13
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10c      	bne.n	80041c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ff89 	bl	80030c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2203      	movs	r2, #3
 80041bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041be:	f7fe fdcb 	bl	8002d58 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041c4:	e029      	b.n	800421a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0210 	orr.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f043 0201 	orr.w	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e023      	b.n	800422a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041e2:	f7fe fdb9 	bl	8002d58 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d914      	bls.n	800421a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f043 0210 	orr.w	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e007      	b.n	800422a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1dc      	bne.n	80041e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d14b      	bne.n	80042e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d021      	beq.n	80042aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fe2d 	bl	8002eca <LL_ADC_REG_IsTriggerSourceSWStart>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d032      	beq.n	80042dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d12b      	bne.n	80042dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11f      	bne.n	80042dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
 80042a8:	e018      	b.n	80042dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d111      	bne.n	80042dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7fd fc4d 	bl	8001b7c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042e2:	e00e      	b.n	8004302 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7ff fa02 	bl	80036fa <HAL_ADC_ErrorCallback>
}
 80042f6:	e004      	b.n	8004302 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff f9e4 	bl	80036e6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff f9d4 	bl	80036fa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004352:	bf00      	nop
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <LL_ADC_IsEnabled>:
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <LL_ADC_IsEnabled+0x18>
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <LL_ADC_IsEnabled+0x1a>
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_REG_IsConversionOngoing>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b04      	cmp	r3, #4
 8004392:	d101      	bne.n	8004398 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b09f      	sub	sp, #124	; 0x7c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e093      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80043ce:	2300      	movs	r3, #0
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80043d2:	2300      	movs	r3, #0
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a47      	ldr	r2, [pc, #284]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d102      	bne.n	80043e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80043e0:	4b46      	ldr	r3, [pc, #280]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	e001      	b.n	80043ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e072      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ffb8 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 8004410:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff ffb2 	bl	8004380 <LL_ADC_REG_IsConversionOngoing>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d154      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004424:	2b00      	cmp	r3, #0
 8004426:	d151      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800442a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02c      	beq.n	800448e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004446:	035b      	lsls	r3, r3, #13
 8004448:	430b      	orrs	r3, r1
 800444a:	431a      	orrs	r2, r3
 800444c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004450:	4829      	ldr	r0, [pc, #164]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004452:	f7ff ff82 	bl	800435a <LL_ADC_IsEnabled>
 8004456:	4604      	mov	r4, r0
 8004458:	4828      	ldr	r0, [pc, #160]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800445a:	f7ff ff7e 	bl	800435a <LL_ADC_IsEnabled>
 800445e:	4603      	mov	r3, r0
 8004460:	431c      	orrs	r4, r3
 8004462:	4828      	ldr	r0, [pc, #160]	; (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004464:	f7ff ff79 	bl	800435a <LL_ADC_IsEnabled>
 8004468:	4603      	mov	r3, r0
 800446a:	4323      	orrs	r3, r4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d137      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004478:	f023 030f 	bic.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	6811      	ldr	r1, [r2, #0]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	430a      	orrs	r2, r1
 8004486:	431a      	orrs	r2, r3
 8004488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800448c:	e028      	b.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800448e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004498:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800449a:	4817      	ldr	r0, [pc, #92]	; (80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800449c:	f7ff ff5d 	bl	800435a <LL_ADC_IsEnabled>
 80044a0:	4604      	mov	r4, r0
 80044a2:	4816      	ldr	r0, [pc, #88]	; (80044fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80044a4:	f7ff ff59 	bl	800435a <LL_ADC_IsEnabled>
 80044a8:	4603      	mov	r3, r0
 80044aa:	431c      	orrs	r4, r3
 80044ac:	4815      	ldr	r0, [pc, #84]	; (8004504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80044ae:	f7ff ff54 	bl	800435a <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4323      	orrs	r3, r4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d112      	bne.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80044ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80044c2:	f023 030f 	bic.w	r3, r3, #15
 80044c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044ca:	e009      	b.n	80044e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80044de:	e000      	b.n	80044e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80044ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	377c      	adds	r7, #124	; 0x7c
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	50040000 	.word	0x50040000
 80044fc:	50040100 	.word	0x50040100
 8004500:	50040300 	.word	0x50040300
 8004504:	50040200 	.word	0x50040200

08004508 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004510:	4b05      	ldr	r3, [pc, #20]	; (8004528 <LL_EXTI_EnableIT_0_31+0x20>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4904      	ldr	r1, [pc, #16]	; (8004528 <LL_EXTI_EnableIT_0_31+0x20>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010400 	.word	0x40010400

0800452c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <LL_EXTI_DisableIT_0_31+0x24>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	43db      	mvns	r3, r3
 800453c:	4904      	ldr	r1, [pc, #16]	; (8004550 <LL_EXTI_DisableIT_0_31+0x24>)
 800453e:	4013      	ands	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40010400 	.word	0x40010400

08004554 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <LL_EXTI_EnableEvent_0_31+0x20>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4904      	ldr	r1, [pc, #16]	; (8004574 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]

}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	40010400 	.word	0x40010400

08004578 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <LL_EXTI_DisableEvent_0_31+0x24>)
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	43db      	mvns	r3, r3
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <LL_EXTI_DisableEvent_0_31+0x24>)
 800458a:	4013      	ands	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40010400 	.word	0x40010400

080045a0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80045a8:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4904      	ldr	r1, [pc, #16]	; (80045c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	608b      	str	r3, [r1, #8]

}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40010400 	.word	0x40010400

080045c4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	608b      	str	r3, [r1, #8]

}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010400 	.word	0x40010400

080045ec <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	4904      	ldr	r1, [pc, #16]	; (800460c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60cb      	str	r3, [r1, #12]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	40010400 	.word	0x40010400

08004610 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	43db      	mvns	r3, r3
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004622:	4013      	ands	r3, r2
 8004624:	60cb      	str	r3, [r1, #12]
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010400 	.word	0x40010400

08004638 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	429a      	cmp	r2, r3
 800464c:	d101      	bne.n	8004652 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40010400 	.word	0x40010400

08004664 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6153      	str	r3, [r2, #20]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e0d1      	b.n	8004844 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ae:	d102      	bne.n	80046b6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0c6      	b.n	8004844 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d0:	4b5f      	ldr	r3, [pc, #380]	; (8004850 <HAL_COMP_Init+0x1cc>)
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	4a5e      	ldr	r2, [pc, #376]	; (8004850 <HAL_COMP_Init+0x1cc>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6613      	str	r3, [r2, #96]	; 0x60
 80046dc:	4b5c      	ldr	r3, [pc, #368]	; (8004850 <HAL_COMP_Init+0x1cc>)
 80046de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7fd fffb 	bl	80026e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046f8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_COMP_Init+0x1d0>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	6979      	ldr	r1, [r7, #20]
 800472e:	430b      	orrs	r3, r1
 8004730:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473a:	d106      	bne.n	800474a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800473c:	4b46      	ldr	r3, [pc, #280]	; (8004858 <HAL_COMP_Init+0x1d4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a45      	ldr	r2, [pc, #276]	; (8004858 <HAL_COMP_Init+0x1d4>)
 8004742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e005      	b.n	8004756 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800474a:	4b43      	ldr	r3, [pc, #268]	; (8004858 <HAL_COMP_Init+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a42      	ldr	r2, [pc, #264]	; (8004858 <HAL_COMP_Init+0x1d4>)
 8004750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004754:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_COMP_Init+0x10e>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d113      	bne.n	8004792 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800476a:	4b3c      	ldr	r3, [pc, #240]	; (800485c <HAL_COMP_Init+0x1d8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	4a3b      	ldr	r2, [pc, #236]	; (8004860 <HAL_COMP_Init+0x1dc>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	4613      	mov	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004784:	e002      	b.n	800478c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3b01      	subs	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f9      	bne.n	8004786 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a33      	ldr	r2, [pc, #204]	; (8004864 <HAL_COMP_Init+0x1e0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d102      	bne.n	80047a2 <HAL_COMP_Init+0x11e>
 800479c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047a0:	e001      	b.n	80047a6 <HAL_COMP_Init+0x122>
 80047a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047a6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d037      	beq.n	8004824 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80047c0:	6938      	ldr	r0, [r7, #16]
 80047c2:	f7ff feed 	bl	80045a0 <LL_EXTI_EnableRisingTrig_0_31>
 80047c6:	e002      	b.n	80047ce <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80047c8:	6938      	ldr	r0, [r7, #16]
 80047ca:	f7ff fefb 	bl	80045c4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80047da:	6938      	ldr	r0, [r7, #16]
 80047dc:	f7ff ff06 	bl	80045ec <LL_EXTI_EnableFallingTrig_0_31>
 80047e0:	e002      	b.n	80047e8 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80047e2:	6938      	ldr	r0, [r7, #16]
 80047e4:	f7ff ff14 	bl	8004610 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80047e8:	6938      	ldr	r0, [r7, #16]
 80047ea:	f7ff ff3b 	bl	8004664 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80047fa:	6938      	ldr	r0, [r7, #16]
 80047fc:	f7ff feaa 	bl	8004554 <LL_EXTI_EnableEvent_0_31>
 8004800:	e002      	b.n	8004808 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004802:	6938      	ldr	r0, [r7, #16]
 8004804:	f7ff feb8 	bl	8004578 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8004814:	6938      	ldr	r0, [r7, #16]
 8004816:	f7ff fe77 	bl	8004508 <LL_EXTI_EnableIT_0_31>
 800481a:	e009      	b.n	8004830 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800481c:	6938      	ldr	r0, [r7, #16]
 800481e:	f7ff fe85 	bl	800452c <LL_EXTI_DisableIT_0_31>
 8004822:	e005      	b.n	8004830 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8004824:	6938      	ldr	r0, [r7, #16]
 8004826:	f7ff fea7 	bl	8004578 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800482a:	6938      	ldr	r0, [r7, #16]
 800482c:	f7ff fe7e 	bl	800452c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004844:	7ffb      	ldrb	r3, [r7, #31]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000
 8004854:	ff207d03 	.word	0xff207d03
 8004858:	40010204 	.word	0x40010204
 800485c:	20000008 	.word	0x20000008
 8004860:	053e2d63 	.word	0x053e2d63
 8004864:	40010200 	.word	0x40010200

08004868 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
 8004882:	e030      	b.n	80048e6 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800488e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004892:	d102      	bne.n	800489a <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e025      	b.n	80048e6 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d11d      	bne.n	80048e2 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <HAL_COMP_Start+0x8c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	099b      	lsrs	r3, r3, #6
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <HAL_COMP_Start+0x90>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	3301      	adds	r3, #1
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80048d2:	e002      	b.n	80048da <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f9      	bne.n	80048d4 <HAL_COMP_Start+0x6c>
 80048e0:	e001      	b.n	80048e6 <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000008 	.word	0x20000008
 80048f8:	053e2d63 	.word	0x053e2d63

080048fc <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a11      	ldr	r2, [pc, #68]	; (8004950 <HAL_COMP_IRQHandler+0x54>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d102      	bne.n	8004914 <HAL_COMP_IRQHandler+0x18>
 800490e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004912:	e001      	b.n	8004918 <HAL_COMP_IRQHandler+0x1c>
 8004914:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004918:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7ff fe8c 	bl	8004638 <LL_EXTI_IsActiveFlag_0_31>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_COMP_IRQHandler+0x4c>
  {
#if defined(COMP2)
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_COMP_IRQHandler+0x58>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d004      	beq.n	800493c <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 8004932:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 8004936:	f7ff fe95 	bl	8004664 <LL_EXTI_ClearFlag_0_31>
 800493a:	e002      	b.n	8004942 <HAL_COMP_IRQHandler+0x46>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff fe91 	bl	8004664 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd f8fa 	bl	8001b3c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40010200 	.word	0x40010200
 8004954:	40010204 	.word	0x40010204

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	79fb      	ldrb	r3, [r7, #7]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
         );
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d301      	bcc.n	8004aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e00f      	b.n	8004aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <SysTick_Config+0x40>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f7ff ff8e 	bl	80049f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <SysTick_Config+0x40>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <SysTick_Config+0x40>)
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000e010 	.word	0xe000e010

08004af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff29 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b20:	f7ff ff3e 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff8e 	bl	8004a4c <NVIC_EncodePriority>
 8004b30:	4602      	mov	r2, r0
 8004b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff5d 	bl	80049f8 <__NVIC_SetPriority>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ff31 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ffa2 	bl	8004ab4 <SysTick_Config>
 8004b70:	4603      	mov	r3, r0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e098      	b.n	8004cc0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_DMA_Init+0x150>)
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d80f      	bhi.n	8004bba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_DMA_Init+0x154>)
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4a4b      	ldr	r2, [pc, #300]	; (8004cd4 <HAL_DMA_Init+0x158>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	009a      	lsls	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a48      	ldr	r2, [pc, #288]	; (8004cd8 <HAL_DMA_Init+0x15c>)
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8004bb8:	e00e      	b.n	8004bd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b46      	ldr	r3, [pc, #280]	; (8004cdc <HAL_DMA_Init+0x160>)
 8004bc2:	4413      	add	r3, r2
 8004bc4:	4a43      	ldr	r2, [pc, #268]	; (8004cd4 <HAL_DMA_Init+0x158>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	009a      	lsls	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a42      	ldr	r2, [pc, #264]	; (8004ce0 <HAL_DMA_Init+0x164>)
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c32:	d039      	beq.n	8004ca8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <HAL_DMA_Init+0x15c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d11a      	bne.n	8004c74 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c3e:	4b29      	ldr	r3, [pc, #164]	; (8004ce4 <HAL_DMA_Init+0x168>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f003 031c 	and.w	r3, r3, #28
 8004c4a:	210f      	movs	r1, #15
 8004c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	4924      	ldr	r1, [pc, #144]	; (8004ce4 <HAL_DMA_Init+0x168>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c58:	4b22      	ldr	r3, [pc, #136]	; (8004ce4 <HAL_DMA_Init+0x168>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	f003 031c 	and.w	r3, r3, #28
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	491d      	ldr	r1, [pc, #116]	; (8004ce4 <HAL_DMA_Init+0x168>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	600b      	str	r3, [r1, #0]
 8004c72:	e019      	b.n	8004ca8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004c74:	4b1c      	ldr	r3, [pc, #112]	; (8004ce8 <HAL_DMA_Init+0x16c>)
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	f003 031c 	and.w	r3, r3, #28
 8004c80:	210f      	movs	r1, #15
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43db      	mvns	r3, r3
 8004c88:	4917      	ldr	r1, [pc, #92]	; (8004ce8 <HAL_DMA_Init+0x16c>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_DMA_Init+0x16c>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f003 031c 	and.w	r3, r3, #28
 8004c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca2:	4911      	ldr	r1, [pc, #68]	; (8004ce8 <HAL_DMA_Init+0x16c>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40020407 	.word	0x40020407
 8004cd0:	bffdfff8 	.word	0xbffdfff8
 8004cd4:	cccccccd 	.word	0xcccccccd
 8004cd8:	40020000 	.word	0x40020000
 8004cdc:	bffdfbf8 	.word	0xbffdfbf8
 8004ce0:	40020400 	.word	0x40020400
 8004ce4:	400200a8 	.word	0x400200a8
 8004ce8:	400204a8 	.word	0x400204a8

08004cec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_DMA_Start_IT+0x20>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e04b      	b.n	8004da4 <HAL_DMA_Start_IT+0xb8>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d13a      	bne.n	8004d96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f95f 	bl	8005008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 020e 	orr.w	r2, r2, #14
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e00f      	b.n	8004d84 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0204 	bic.w	r2, r2, #4
 8004d72:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 020a 	orr.w	r2, r2, #10
 8004d82:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e005      	b.n	8004da2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d008      	beq.n	8004dd6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e022      	b.n	8004e1c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 020e 	bic.w	r2, r2, #14
 8004de4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0201 	bic.w	r2, r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f003 021c 	and.w	r2, r3, #28
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	2101      	movs	r1, #1
 8004e04:	fa01 f202 	lsl.w	r2, r1, r2
 8004e08:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d005      	beq.n	8004e4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2204      	movs	r2, #4
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e029      	b.n	8004ea0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020e 	bic.w	r2, r2, #14
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0201 	bic.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f003 021c 	and.w	r2, r3, #28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e7e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
    }
  }
  return status;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f003 031c 	and.w	r3, r3, #28
 8004eca:	2204      	movs	r2, #4
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d026      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x7a>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d021      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0204 	bic.w	r2, r2, #4
 8004efc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f003 021c 	and.w	r2, r3, #28
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f10:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d071      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004f22:	e06c      	b.n	8004ffe <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f28:	f003 031c 	and.w	r3, r3, #28
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d02e      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xec>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d029      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 020a 	bic.w	r2, r2, #10
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	f003 021c 	and.w	r2, r3, #28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	2102      	movs	r1, #2
 8004f76:	fa01 f202 	lsl.w	r2, r1, r2
 8004f7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d038      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004f94:	e033      	b.n	8004ffe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f003 031c 	and.w	r3, r3, #28
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02a      	beq.n	8005000 <HAL_DMA_IRQHandler+0x156>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d025      	beq.n	8005000 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020e 	bic.w	r2, r2, #14
 8004fc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	f003 021c 	and.w	r2, r3, #28
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
}
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	f003 021c 	and.w	r2, r3, #28
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b10      	cmp	r3, #16
 8005038:	d108      	bne.n	800504c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800504a:	e007      	b.n	800505c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005076:	e17f      	b.n	8005378 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	2101      	movs	r1, #1
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 8171 	beq.w	8005372 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	2b01      	cmp	r3, #1
 800509a:	d005      	beq.n	80050a8 <HAL_GPIO_Init+0x40>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d130      	bne.n	800510a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	2203      	movs	r2, #3
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	43db      	mvns	r3, r3
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80050de:	2201      	movs	r2, #1
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	4013      	ands	r3, r2
 80050ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	f003 0201 	and.w	r2, r3, #1
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b03      	cmp	r3, #3
 8005114:	d118      	bne.n	8005148 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800511c:	2201      	movs	r2, #1
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	08db      	lsrs	r3, r3, #3
 8005132:	f003 0201 	and.w	r2, r3, #1
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b03      	cmp	r3, #3
 8005152:	d017      	beq.n	8005184 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	2203      	movs	r2, #3
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d123      	bne.n	80051d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	220f      	movs	r2, #15
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80ac 	beq.w	8005372 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <HAL_GPIO_Init+0x330>)
 800521c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521e:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_GPIO_Init+0x330>)
 8005220:	f043 0301 	orr.w	r3, r3, #1
 8005224:	6613      	str	r3, [r2, #96]	; 0x60
 8005226:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_GPIO_Init+0x330>)
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005232:	4a5a      	ldr	r2, [pc, #360]	; (800539c <HAL_GPIO_Init+0x334>)
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800525c:	d025      	beq.n	80052aa <HAL_GPIO_Init+0x242>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4f      	ldr	r2, [pc, #316]	; (80053a0 <HAL_GPIO_Init+0x338>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01f      	beq.n	80052a6 <HAL_GPIO_Init+0x23e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <HAL_GPIO_Init+0x33c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d019      	beq.n	80052a2 <HAL_GPIO_Init+0x23a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4d      	ldr	r2, [pc, #308]	; (80053a8 <HAL_GPIO_Init+0x340>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_GPIO_Init+0x236>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a4c      	ldr	r2, [pc, #304]	; (80053ac <HAL_GPIO_Init+0x344>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00d      	beq.n	800529a <HAL_GPIO_Init+0x232>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a4b      	ldr	r2, [pc, #300]	; (80053b0 <HAL_GPIO_Init+0x348>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <HAL_GPIO_Init+0x22e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a4a      	ldr	r2, [pc, #296]	; (80053b4 <HAL_GPIO_Init+0x34c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d101      	bne.n	8005292 <HAL_GPIO_Init+0x22a>
 800528e:	2306      	movs	r3, #6
 8005290:	e00c      	b.n	80052ac <HAL_GPIO_Init+0x244>
 8005292:	2307      	movs	r3, #7
 8005294:	e00a      	b.n	80052ac <HAL_GPIO_Init+0x244>
 8005296:	2305      	movs	r3, #5
 8005298:	e008      	b.n	80052ac <HAL_GPIO_Init+0x244>
 800529a:	2304      	movs	r3, #4
 800529c:	e006      	b.n	80052ac <HAL_GPIO_Init+0x244>
 800529e:	2303      	movs	r3, #3
 80052a0:	e004      	b.n	80052ac <HAL_GPIO_Init+0x244>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_Init+0x244>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <HAL_GPIO_Init+0x244>
 80052aa:	2300      	movs	r3, #0
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	f002 0203 	and.w	r2, r2, #3
 80052b2:	0092      	lsls	r2, r2, #2
 80052b4:	4093      	lsls	r3, r2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052bc:	4937      	ldr	r1, [pc, #220]	; (800539c <HAL_GPIO_Init+0x334>)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	3302      	adds	r3, #2
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_GPIO_Init+0x350>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4013      	ands	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052ee:	4a32      	ldr	r2, [pc, #200]	; (80053b8 <HAL_GPIO_Init+0x350>)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80052f4:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <HAL_GPIO_Init+0x350>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4013      	ands	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005318:	4a27      	ldr	r2, [pc, #156]	; (80053b8 <HAL_GPIO_Init+0x350>)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800531e:	4b26      	ldr	r3, [pc, #152]	; (80053b8 <HAL_GPIO_Init+0x350>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	43db      	mvns	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005342:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <HAL_GPIO_Init+0x350>)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_GPIO_Init+0x350>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	43db      	mvns	r3, r3
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800536c:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <HAL_GPIO_Init+0x350>)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	3301      	adds	r3, #1
 8005376:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa22 f303 	lsr.w	r3, r2, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f ae78 	bne.w	8005078 <HAL_GPIO_Init+0x10>
  }
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40021000 	.word	0x40021000
 800539c:	40010000 	.word	0x40010000
 80053a0:	48000400 	.word	0x48000400
 80053a4:	48000800 	.word	0x48000800
 80053a8:	48000c00 	.word	0x48000c00
 80053ac:	48001000 	.word	0x48001000
 80053b0:	48001400 	.word	0x48001400
 80053b4:	48001800 	.word	0x48001800
 80053b8:	40010400 	.word	0x40010400

080053bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
 80053c8:	4613      	mov	r3, r2
 80053ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053cc:	787b      	ldrb	r3, [r7, #1]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053d8:	e002      	b.n	80053e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053da:	887a      	ldrh	r2, [r7, #2]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <HAL_PWREx_GetVoltageRange+0x18>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	40007000 	.word	0x40007000

08005408 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005416:	d130      	bne.n	800547a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005418:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005424:	d038      	beq.n	8005498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005426:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800542e:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005434:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005436:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2232      	movs	r2, #50	; 0x32
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	0c9b      	lsrs	r3, r3, #18
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800544c:	e002      	b.n	8005454 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3b01      	subs	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d102      	bne.n	8005468 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f2      	bne.n	800544e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005474:	d110      	bne.n	8005498 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e00f      	b.n	800549a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005486:	d007      	beq.n	8005498 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005490:	4a05      	ldr	r2, [pc, #20]	; (80054a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005496:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40007000 	.word	0x40007000
 80054ac:	20000008 	.word	0x20000008
 80054b0:	431bde83 	.word	0x431bde83

080054b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e3ca      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054c6:	4b97      	ldr	r3, [pc, #604]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d0:	4b94      	ldr	r3, [pc, #592]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0303 	and.w	r3, r3, #3
 80054d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80e4 	beq.w	80056b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_RCC_OscConfig+0x4a>
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b0c      	cmp	r3, #12
 80054f2:	f040 808b 	bne.w	800560c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	f040 8087 	bne.w	800560c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054fe:	4b89      	ldr	r3, [pc, #548]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_RCC_OscConfig+0x62>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e3a2      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	4b82      	ldr	r3, [pc, #520]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <HAL_RCC_OscConfig+0x7c>
 8005526:	4b7f      	ldr	r3, [pc, #508]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800552e:	e005      	b.n	800553c <HAL_RCC_OscConfig+0x88>
 8005530:	4b7c      	ldr	r3, [pc, #496]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800553c:	4293      	cmp	r3, r2
 800553e:	d223      	bcs.n	8005588 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fd55 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e383      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005554:	4b73      	ldr	r3, [pc, #460]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a72      	ldr	r2, [pc, #456]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b70      	ldr	r3, [pc, #448]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	496d      	ldr	r1, [pc, #436]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005572:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4968      	ldr	r1, [pc, #416]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 8005586:	e025      	b.n	80055d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005588:	4b66      	ldr	r3, [pc, #408]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a65      	ldr	r2, [pc, #404]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800558e:	f043 0308 	orr.w	r3, r3, #8
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	4960      	ldr	r1, [pc, #384]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055a6:	4b5f      	ldr	r3, [pc, #380]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	495b      	ldr	r1, [pc, #364]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd15 	bl	8005ff4 <RCC_SetFlashLatencyFromMSIRange>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e343      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d4:	f000 fc4a 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 80055d8:	4602      	mov	r2, r0
 80055da:	4b52      	ldr	r3, [pc, #328]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	4950      	ldr	r1, [pc, #320]	; (8005728 <HAL_RCC_OscConfig+0x274>)
 80055e6:	5ccb      	ldrb	r3, [r1, r3]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	4a4e      	ldr	r2, [pc, #312]	; (800572c <HAL_RCC_OscConfig+0x278>)
 80055f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055f4:	4b4e      	ldr	r3, [pc, #312]	; (8005730 <HAL_RCC_OscConfig+0x27c>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fb5d 	bl	8002cb8 <HAL_InitTick>
 80055fe:	4603      	mov	r3, r0
 8005600:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d052      	beq.n	80056ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	e327      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d032      	beq.n	800567a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005614:	4b43      	ldr	r3, [pc, #268]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a42      	ldr	r2, [pc, #264]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005620:	f7fd fb9a 	bl	8002d58 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005628:	f7fd fb96 	bl	8002d58 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e310      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563a:	4b3a      	ldr	r3, [pc, #232]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f0      	beq.n	8005628 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005646:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a36      	ldr	r2, [pc, #216]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	4b34      	ldr	r3, [pc, #208]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	4931      	ldr	r1, [pc, #196]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005660:	4313      	orrs	r3, r2
 8005662:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005664:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	492c      	ldr	r1, [pc, #176]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
 8005678:	e01a      	b.n	80056b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800567a:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a29      	ldr	r2, [pc, #164]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005686:	f7fd fb67 	bl	8002d58 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800568e:	f7fd fb63 	bl	8002d58 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e2dd      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f0      	bne.n	800568e <HAL_RCC_OscConfig+0x1da>
 80056ac:	e000      	b.n	80056b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d074      	beq.n	80057a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d005      	beq.n	80056ce <HAL_RCC_OscConfig+0x21a>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d10e      	bne.n	80056e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d10b      	bne.n	80056e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ce:	4b15      	ldr	r3, [pc, #84]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d064      	beq.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d160      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e2ba      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ee:	d106      	bne.n	80056fe <HAL_RCC_OscConfig+0x24a>
 80056f0:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fa:	6013      	str	r3, [r2, #0]
 80056fc:	e026      	b.n	800574c <HAL_RCC_OscConfig+0x298>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005706:	d115      	bne.n	8005734 <HAL_RCC_OscConfig+0x280>
 8005708:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a05      	ldr	r2, [pc, #20]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800570e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a02      	ldr	r2, [pc, #8]	; (8005724 <HAL_RCC_OscConfig+0x270>)
 800571a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e014      	b.n	800574c <HAL_RCC_OscConfig+0x298>
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	0800dcf0 	.word	0x0800dcf0
 800572c:	20000008 	.word	0x20000008
 8005730:	2000000c 	.word	0x2000000c
 8005734:	4ba0      	ldr	r3, [pc, #640]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a9f      	ldr	r2, [pc, #636]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	4b9d      	ldr	r3, [pc, #628]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a9c      	ldr	r2, [pc, #624]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fd fb00 	bl	8002d58 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800575c:	f7fd fafc 	bl	8002d58 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b64      	cmp	r3, #100	; 0x64
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e276      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576e:	4b92      	ldr	r3, [pc, #584]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f0      	beq.n	800575c <HAL_RCC_OscConfig+0x2a8>
 800577a:	e014      	b.n	80057a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd faec 	bl	8002d58 <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005784:	f7fd fae8 	bl	8002d58 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e262      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005796:	4b88      	ldr	r3, [pc, #544]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x2d0>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d060      	beq.n	8005874 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d005      	beq.n	80057c4 <HAL_RCC_OscConfig+0x310>
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0c      	cmp	r3, #12
 80057bc:	d119      	bne.n	80057f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d116      	bne.n	80057f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c4:	4b7c      	ldr	r3, [pc, #496]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCC_OscConfig+0x328>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e23f      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057dc:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	061b      	lsls	r3, r3, #24
 80057ea:	4973      	ldr	r1, [pc, #460]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f0:	e040      	b.n	8005874 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d023      	beq.n	8005842 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fa:	4b6f      	ldr	r3, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6e      	ldr	r2, [pc, #440]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fd faa7 	bl	8002d58 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580e:	f7fd faa3 	bl	8002d58 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e21d      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005820:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582c:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	495f      	ldr	r1, [pc, #380]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800583c:	4313      	orrs	r3, r2
 800583e:	604b      	str	r3, [r1, #4]
 8005840:	e018      	b.n	8005874 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005842:	4b5d      	ldr	r3, [pc, #372]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a5c      	ldr	r2, [pc, #368]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005848:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800584c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fd fa83 	bl	8002d58 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005856:	f7fd fa7f 	bl	8002d58 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e1f9      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005868:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f0      	bne.n	8005856 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d03c      	beq.n	80058fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005888:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800588e:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fd fa5e 	bl	8002d58 <HAL_GetTick>
 800589c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a0:	f7fd fa5a 	bl	8002d58 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e1d4      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b2:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80058b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <HAL_RCC_OscConfig+0x3ec>
 80058c0:	e01b      	b.n	80058fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c2:	4b3d      	ldr	r3, [pc, #244]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80058c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c8:	4a3b      	ldr	r2, [pc, #236]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fd fa41 	bl	8002d58 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058da:	f7fd fa3d 	bl	8002d58 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e1b7      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ec:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80058ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1ef      	bne.n	80058da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 80a6 	beq.w	8005a54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005908:	2300      	movs	r3, #0
 800590a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800590c:	4b2a      	ldr	r3, [pc, #168]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10d      	bne.n	8005934 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800591e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005922:	6593      	str	r3, [r2, #88]	; 0x58
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005930:	2301      	movs	r3, #1
 8005932:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005934:	4b21      	ldr	r3, [pc, #132]	; (80059bc <HAL_RCC_OscConfig+0x508>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593c:	2b00      	cmp	r3, #0
 800593e:	d118      	bne.n	8005972 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005940:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <HAL_RCC_OscConfig+0x508>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <HAL_RCC_OscConfig+0x508>)
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800594c:	f7fd fa04 	bl	8002d58 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005954:	f7fd fa00 	bl	8002d58 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e17a      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <HAL_RCC_OscConfig+0x508>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d108      	bne.n	800598c <HAL_RCC_OscConfig+0x4d8>
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800597c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005980:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598a:	e029      	b.n	80059e0 <HAL_RCC_OscConfig+0x52c>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b05      	cmp	r3, #5
 8005992:	d115      	bne.n	80059c0 <HAL_RCC_OscConfig+0x50c>
 8005994:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 800599c:	f043 0304 	orr.w	r3, r3, #4
 80059a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	4a03      	ldr	r2, [pc, #12]	; (80059b8 <HAL_RCC_OscConfig+0x504>)
 80059ac:	f043 0301 	orr.w	r3, r3, #1
 80059b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b4:	e014      	b.n	80059e0 <HAL_RCC_OscConfig+0x52c>
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	40007000 	.word	0x40007000
 80059c0:	4b9c      	ldr	r3, [pc, #624]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	4a9b      	ldr	r2, [pc, #620]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d0:	4b98      	ldr	r3, [pc, #608]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	4a97      	ldr	r2, [pc, #604]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d016      	beq.n	8005a16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fd f9b6 	bl	8002d58 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f7fd f9b2 	bl	8002d58 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e12a      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a06:	4b8b      	ldr	r3, [pc, #556]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0ed      	beq.n	80059f0 <HAL_RCC_OscConfig+0x53c>
 8005a14:	e015      	b.n	8005a42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a16:	f7fd f99f 	bl	8002d58 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a1c:	e00a      	b.n	8005a34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fd f99b 	bl	8002d58 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d901      	bls.n	8005a34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e113      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a34:	4b7f      	ldr	r3, [pc, #508]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1ed      	bne.n	8005a1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a48:	4b7a      	ldr	r3, [pc, #488]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	4a79      	ldr	r2, [pc, #484]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80fe 	beq.w	8005c5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	f040 80d0 	bne.w	8005c08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a68:	4b72      	ldr	r3, [pc, #456]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0203 	and.w	r2, r3, #3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d130      	bne.n	8005ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	3b01      	subs	r3, #1
 8005a88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d127      	bne.n	8005ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d11f      	bne.n	8005ade <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005aa8:	2a07      	cmp	r2, #7
 8005aaa:	bf14      	ite	ne
 8005aac:	2201      	movne	r2, #1
 8005aae:	2200      	moveq	r2, #0
 8005ab0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d113      	bne.n	8005ade <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d109      	bne.n	8005ade <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d06e      	beq.n	8005bbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d069      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ae4:	4b53      	ldr	r3, [pc, #332]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005af0:	4b50      	ldr	r3, [pc, #320]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e0ad      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b00:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a4b      	ldr	r2, [pc, #300]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b0c:	f7fd f924 	bl	8002d58 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fd f920 	bl	8002d58 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e09a      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b26:	4b43      	ldr	r3, [pc, #268]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b32:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	4b40      	ldr	r3, [pc, #256]	; (8005c38 <HAL_RCC_OscConfig+0x784>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b42:	3a01      	subs	r2, #1
 8005b44:	0112      	lsls	r2, r2, #4
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b4c:	0212      	lsls	r2, r2, #8
 8005b4e:	4311      	orrs	r1, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b54:	0852      	lsrs	r2, r2, #1
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0552      	lsls	r2, r2, #21
 8005b5a:	4311      	orrs	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b60:	0852      	lsrs	r2, r2, #1
 8005b62:	3a01      	subs	r2, #1
 8005b64:	0652      	lsls	r2, r2, #25
 8005b66:	4311      	orrs	r1, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b6c:	0912      	lsrs	r2, r2, #4
 8005b6e:	0452      	lsls	r2, r2, #17
 8005b70:	430a      	orrs	r2, r1
 8005b72:	4930      	ldr	r1, [pc, #192]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b78:	4b2e      	ldr	r3, [pc, #184]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2d      	ldr	r2, [pc, #180]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b84:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b90:	f7fd f8e2 	bl	8002d58 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fd f8de 	bl	8002d58 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e058      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f0      	beq.n	8005b98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bb6:	e050      	b.n	8005c5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e04f      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbc:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d148      	bne.n	8005c5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bc8:	4b1a      	ldr	r3, [pc, #104]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a19      	ldr	r2, [pc, #100]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd4:	4b17      	ldr	r3, [pc, #92]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005be0:	f7fd f8ba 	bl	8002d58 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fd f8b6 	bl	8002d58 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e030      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfa:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0f0      	beq.n	8005be8 <HAL_RCC_OscConfig+0x734>
 8005c06:	e028      	b.n	8005c5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d023      	beq.n	8005c56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <HAL_RCC_OscConfig+0x780>)
 8005c14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7fd f89d 	bl	8002d58 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c20:	e00c      	b.n	8005c3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c22:	f7fd f899 	bl	8002d58 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d905      	bls.n	8005c3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e013      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
 8005c34:	40021000 	.word	0x40021000
 8005c38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCC_OscConfig+0x7b0>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ec      	bne.n	8005c22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <HAL_RCC_OscConfig+0x7b0>)
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	4905      	ldr	r1, [pc, #20]	; (8005c64 <HAL_RCC_OscConfig+0x7b0>)
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCC_OscConfig+0x7b4>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	60cb      	str	r3, [r1, #12]
 8005c54:	e001      	b.n	8005c5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3720      	adds	r7, #32
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	feeefffc 	.word	0xfeeefffc

08005c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e0e7      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c80:	4b75      	ldr	r3, [pc, #468]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d910      	bls.n	8005cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8e:	4b72      	ldr	r3, [pc, #456]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 0207 	bic.w	r2, r3, #7
 8005c96:	4970      	ldr	r1, [pc, #448]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9e:	4b6e      	ldr	r3, [pc, #440]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0cf      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d010      	beq.n	8005cde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	4b66      	ldr	r3, [pc, #408]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d908      	bls.n	8005cde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ccc:	4b63      	ldr	r3, [pc, #396]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4960      	ldr	r1, [pc, #384]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d04c      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cf2:	4b5a      	ldr	r3, [pc, #360]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d121      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e0a6      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d107      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d0a:	4b54      	ldr	r3, [pc, #336]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d115      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e09a      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d107      	bne.n	8005d32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d22:	4b4e      	ldr	r3, [pc, #312]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e08e      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d32:	4b4a      	ldr	r3, [pc, #296]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e086      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d42:	4b46      	ldr	r3, [pc, #280]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 0203 	bic.w	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	4943      	ldr	r1, [pc, #268]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d54:	f7fd f800 	bl	8002d58 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	e00a      	b.n	8005d72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d5c:	f7fc fffc 	bl	8002d58 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e06e      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d72:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 020c 	and.w	r2, r3, #12
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d1eb      	bne.n	8005d5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d208      	bcs.n	8005db2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da0:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	492b      	ldr	r1, [pc, #172]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db2:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d210      	bcs.n	8005de2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc0:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f023 0207 	bic.w	r2, r3, #7
 8005dc8:	4923      	ldr	r1, [pc, #140]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd0:	4b21      	ldr	r3, [pc, #132]	; (8005e58 <HAL_RCC_ClockConfig+0x1ec>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e036      	b.n	8005e50 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dee:	4b1b      	ldr	r3, [pc, #108]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	4918      	ldr	r1, [pc, #96]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4910      	ldr	r1, [pc, #64]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e20:	f000 f824 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8005e24:	4602      	mov	r2, r0
 8005e26:	4b0d      	ldr	r3, [pc, #52]	; (8005e5c <HAL_RCC_ClockConfig+0x1f0>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	091b      	lsrs	r3, r3, #4
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	490b      	ldr	r1, [pc, #44]	; (8005e60 <HAL_RCC_ClockConfig+0x1f4>)
 8005e32:	5ccb      	ldrb	r3, [r1, r3]
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3c:	4a09      	ldr	r2, [pc, #36]	; (8005e64 <HAL_RCC_ClockConfig+0x1f8>)
 8005e3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <HAL_RCC_ClockConfig+0x1fc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fc ff37 	bl	8002cb8 <HAL_InitTick>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40022000 	.word	0x40022000
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	0800dcf0 	.word	0x0800dcf0
 8005e64:	20000008 	.word	0x20000008
 8005e68:	2000000c 	.word	0x2000000c

08005e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b089      	sub	sp, #36	; 0x24
 8005e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e7a:	4b3e      	ldr	r3, [pc, #248]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e84:	4b3b      	ldr	r3, [pc, #236]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d121      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d11e      	bne.n	8005ede <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ea0:	4b34      	ldr	r3, [pc, #208]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0308 	and.w	r3, r3, #8
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005eac:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	61fb      	str	r3, [r7, #28]
 8005eba:	e005      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ebc:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005edc:	e00a      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d102      	bne.n	8005eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee4:	4b25      	ldr	r3, [pc, #148]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8005ee6:	61bb      	str	r3, [r7, #24]
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d101      	bne.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ef2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	d134      	bne.n	8005f64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005efa:	4b1e      	ldr	r3, [pc, #120]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d003      	beq.n	8005f12 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0xac>
 8005f10:	e005      	b.n	8005f1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8005f14:	617b      	str	r3, [r7, #20]
      break;
 8005f16:	e005      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f1a:	617b      	str	r3, [r7, #20]
      break;
 8005f1c:	e002      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	617b      	str	r3, [r7, #20]
      break;
 8005f22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	3301      	adds	r3, #1
 8005f30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f32:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	fb03 f202 	mul.w	r2, r3, r2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	0e5b      	lsrs	r3, r3, #25
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	3301      	adds	r3, #1
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f64:	69bb      	ldr	r3, [r7, #24]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3724      	adds	r7, #36	; 0x24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	0800dd08 	.word	0x0800dd08
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	007a1200 	.word	0x007a1200

08005f84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f88:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000008 	.word	0x20000008

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fa0:	f7ff fff0 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4904      	ldr	r1, [pc, #16]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	f003 031f 	and.w	r3, r3, #31
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40021000 	.word	0x40021000
 8005fc4:	0800dd00 	.word	0x0800dd00

08005fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fcc:	f7ff ffda 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	0adb      	lsrs	r3, r3, #11
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	0800dd00 	.word	0x0800dd00

08005ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006000:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800600c:	f7ff f9ee 	bl	80053ec <HAL_PWREx_GetVoltageRange>
 8006010:	6178      	str	r0, [r7, #20]
 8006012:	e014      	b.n	800603e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006014:	4b25      	ldr	r3, [pc, #148]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	4a24      	ldr	r2, [pc, #144]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800601a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601e:	6593      	str	r3, [r2, #88]	; 0x58
 8006020:	4b22      	ldr	r3, [pc, #136]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800602c:	f7ff f9de 	bl	80053ec <HAL_PWREx_GetVoltageRange>
 8006030:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006044:	d10b      	bne.n	800605e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d919      	bls.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2ba0      	cmp	r3, #160	; 0xa0
 8006050:	d902      	bls.n	8006058 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006052:	2302      	movs	r3, #2
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	e013      	b.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006058:	2301      	movs	r3, #1
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	e010      	b.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b80      	cmp	r3, #128	; 0x80
 8006062:	d902      	bls.n	800606a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006064:	2303      	movs	r3, #3
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	e00a      	b.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b80      	cmp	r3, #128	; 0x80
 800606e:	d102      	bne.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006070:	2302      	movs	r3, #2
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	e004      	b.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b70      	cmp	r3, #112	; 0x70
 800607a:	d101      	bne.n	8006080 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800607c:	2301      	movs	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006080:	4b0b      	ldr	r3, [pc, #44]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f023 0207 	bic.w	r2, r3, #7
 8006088:	4909      	ldr	r1, [pc, #36]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006090:	4b07      	ldr	r3, [pc, #28]	; (80060b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	429a      	cmp	r2, r3
 800609c:	d001      	beq.n	80060a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40021000 	.word	0x40021000
 80060b0:	40022000 	.word	0x40022000

080060b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060bc:	2300      	movs	r3, #0
 80060be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d041      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060d8:	d02a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060de:	d824      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e4:	d008      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ea:	d81e      	bhi.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f4:	d010      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060f6:	e018      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80060f8:	4b86      	ldr	r3, [pc, #536]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	4a85      	ldr	r2, [pc, #532]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006102:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006104:	e015      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3304      	adds	r3, #4
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fabb 	bl	8006688 <RCCEx_PLLSAI1_Config>
 8006112:	4603      	mov	r3, r0
 8006114:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006116:	e00c      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3320      	adds	r3, #32
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fba6 	bl	8006870 <RCCEx_PLLSAI2_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	74fb      	strb	r3, [r7, #19]
      break;
 800612e:	e000      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006132:	7cfb      	ldrb	r3, [r7, #19]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006138:	4b76      	ldr	r3, [pc, #472]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006146:	4973      	ldr	r1, [pc, #460]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800614e:	e001      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d041      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006168:	d02a      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800616a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800616e:	d824      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006174:	d008      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800617a:	d81e      	bhi.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006184:	d010      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006186:	e018      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006188:	4b62      	ldr	r3, [pc, #392]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a61      	ldr	r2, [pc, #388]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800618e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006192:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006194:	e015      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f000 fa73 	bl	8006688 <RCCEx_PLLSAI1_Config>
 80061a2:	4603      	mov	r3, r0
 80061a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a6:	e00c      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3320      	adds	r3, #32
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fb5e 	bl	8006870 <RCCEx_PLLSAI2_Config>
 80061b4:	4603      	mov	r3, r0
 80061b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	74fb      	strb	r3, [r7, #19]
      break;
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c2:	7cfb      	ldrb	r3, [r7, #19]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061c8:	4b52      	ldr	r3, [pc, #328]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061d6:	494f      	ldr	r1, [pc, #316]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061de:	e001      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e0:	7cfb      	ldrb	r3, [r7, #19]
 80061e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 80a0 	beq.w	8006332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f2:	2300      	movs	r3, #0
 80061f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061f6:	4b47      	ldr	r3, [pc, #284]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006206:	2300      	movs	r3, #0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620c:	4b41      	ldr	r3, [pc, #260]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	4a40      	ldr	r2, [pc, #256]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006216:	6593      	str	r3, [r2, #88]	; 0x58
 8006218:	4b3e      	ldr	r3, [pc, #248]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800621a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006224:	2301      	movs	r3, #1
 8006226:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006228:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a3a      	ldr	r2, [pc, #232]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800622e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006232:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006234:	f7fc fd90 	bl	8002d58 <HAL_GetTick>
 8006238:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800623a:	e009      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623c:	f7fc fd8c 	bl	8002d58 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d902      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	74fb      	strb	r3, [r7, #19]
        break;
 800624e:	e005      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0ef      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d15c      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006262:	4b2c      	ldr	r3, [pc, #176]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01f      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	429a      	cmp	r2, r3
 800627e:	d019      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006280:	4b24      	ldr	r3, [pc, #144]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800628c:	4b21      	ldr	r3, [pc, #132]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	4a20      	ldr	r2, [pc, #128]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800629c:	4b1d      	ldr	r3, [pc, #116]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	4a1c      	ldr	r2, [pc, #112]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062ac:	4a19      	ldr	r2, [pc, #100]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d016      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062be:	f7fc fd4b 	bl	8002d58 <HAL_GetTick>
 80062c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062c4:	e00b      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062c6:	f7fc fd47 	bl	8002d58 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d902      	bls.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	74fb      	strb	r3, [r7, #19]
            break;
 80062dc:	e006      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062de:	4b0d      	ldr	r3, [pc, #52]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0ec      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10c      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f2:	4b08      	ldr	r3, [pc, #32]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006302:	4904      	ldr	r1, [pc, #16]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800630a:	e009      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800630c:	7cfb      	ldrb	r3, [r7, #19]
 800630e:	74bb      	strb	r3, [r7, #18]
 8006310:	e006      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006312:	bf00      	nop
 8006314:	40021000 	.word	0x40021000
 8006318:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006320:	7c7b      	ldrb	r3, [r7, #17]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006326:	4b9e      	ldr	r3, [pc, #632]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632a:	4a9d      	ldr	r2, [pc, #628]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006330:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800633e:	4b98      	ldr	r3, [pc, #608]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006344:	f023 0203 	bic.w	r2, r3, #3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	4994      	ldr	r1, [pc, #592]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006360:	4b8f      	ldr	r3, [pc, #572]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 020c 	bic.w	r2, r3, #12
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	498c      	ldr	r1, [pc, #560]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0304 	and.w	r3, r3, #4
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006382:	4b87      	ldr	r3, [pc, #540]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	4983      	ldr	r1, [pc, #524]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006392:	4313      	orrs	r3, r2
 8006394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063a4:	4b7e      	ldr	r3, [pc, #504]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	497b      	ldr	r1, [pc, #492]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063c6:	4b76      	ldr	r3, [pc, #472]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	4972      	ldr	r1, [pc, #456]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063e8:	4b6d      	ldr	r3, [pc, #436]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f6:	496a      	ldr	r1, [pc, #424]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00a      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800640a:	4b65      	ldr	r3, [pc, #404]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	4961      	ldr	r1, [pc, #388]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800642c:	4b5c      	ldr	r3, [pc, #368]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643a:	4959      	ldr	r1, [pc, #356]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800644e:	4b54      	ldr	r3, [pc, #336]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006454:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645c:	4950      	ldr	r1, [pc, #320]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647e:	4948      	ldr	r1, [pc, #288]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006492:	4b43      	ldr	r3, [pc, #268]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a0:	493f      	ldr	r1, [pc, #252]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d028      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064b4:	4b3a      	ldr	r3, [pc, #232]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064c2:	4937      	ldr	r1, [pc, #220]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d2:	d106      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064d4:	4b32      	ldr	r3, [pc, #200]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	4a31      	ldr	r2, [pc, #196]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064de:	60d3      	str	r3, [r2, #12]
 80064e0:	e011      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ea:	d10c      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3304      	adds	r3, #4
 80064f0:	2101      	movs	r1, #1
 80064f2:	4618      	mov	r0, r3
 80064f4:	f000 f8c8 	bl	8006688 <RCCEx_PLLSAI1_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80064fc:	7cfb      	ldrb	r3, [r7, #19]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006502:	7cfb      	ldrb	r3, [r7, #19]
 8006504:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d028      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006512:	4b23      	ldr	r3, [pc, #140]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	491f      	ldr	r1, [pc, #124]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006530:	d106      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006532:	4b1b      	ldr	r3, [pc, #108]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	4a1a      	ldr	r2, [pc, #104]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800653c:	60d3      	str	r3, [r2, #12]
 800653e:	e011      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006548:	d10c      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	2101      	movs	r1, #1
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f899 	bl	8006688 <RCCEx_PLLSAI1_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800655a:	7cfb      	ldrb	r3, [r7, #19]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006560:	7cfb      	ldrb	r3, [r7, #19]
 8006562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02b      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657e:	4908      	ldr	r1, [pc, #32]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006580:	4313      	orrs	r3, r2
 8006582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800658a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658e:	d109      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006590:	4b03      	ldr	r3, [pc, #12]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	4a02      	ldr	r2, [pc, #8]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800659a:	60d3      	str	r3, [r2, #12]
 800659c:	e014      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ac:	d10c      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3304      	adds	r3, #4
 80065b2:	2101      	movs	r1, #1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 f867 	bl	8006688 <RCCEx_PLLSAI1_Config>
 80065ba:	4603      	mov	r3, r0
 80065bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065c4:	7cfb      	ldrb	r3, [r7, #19]
 80065c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02f      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065e2:	4928      	ldr	r1, [pc, #160]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f2:	d10d      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f844 	bl	8006688 <RCCEx_PLLSAI1_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d014      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	74bb      	strb	r3, [r7, #18]
 800660e:	e011      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006618:	d10c      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3320      	adds	r3, #32
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 f925 	bl	8006870 <RCCEx_PLLSAI2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800662a:	7cfb      	ldrb	r3, [r7, #19]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006646:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664e:	490d      	ldr	r1, [pc, #52]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006650:	4313      	orrs	r3, r2
 8006652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00b      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006668:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006672:	4904      	ldr	r1, [pc, #16]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800667a:	7cbb      	ldrb	r3, [r7, #18]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	40021000 	.word	0x40021000

08006688 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006696:	4b75      	ldr	r3, [pc, #468]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066a2:	4b72      	ldr	r3, [pc, #456]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0203 	and.w	r2, r3, #3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d10d      	bne.n	80066ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
       ||
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d009      	beq.n	80066ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066ba:	4b6c      	ldr	r3, [pc, #432]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
       ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d047      	beq.n	800675e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	e044      	b.n	800675e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d018      	beq.n	800670e <RCCEx_PLLSAI1_Config+0x86>
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d825      	bhi.n	800672c <RCCEx_PLLSAI1_Config+0xa4>
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d002      	beq.n	80066ea <RCCEx_PLLSAI1_Config+0x62>
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d009      	beq.n	80066fc <RCCEx_PLLSAI1_Config+0x74>
 80066e8:	e020      	b.n	800672c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066ea:	4b60      	ldr	r3, [pc, #384]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d11d      	bne.n	8006732 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066fa:	e01a      	b.n	8006732 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80066fc:	4b5b      	ldr	r3, [pc, #364]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006704:	2b00      	cmp	r3, #0
 8006706:	d116      	bne.n	8006736 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800670c:	e013      	b.n	8006736 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800670e:	4b57      	ldr	r3, [pc, #348]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10f      	bne.n	800673a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800671a:	4b54      	ldr	r3, [pc, #336]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800672a:	e006      	b.n	800673a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e004      	b.n	800673c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800673a:	bf00      	nop
    }

    if(status == HAL_OK)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006742:	4b4a      	ldr	r3, [pc, #296]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	3b01      	subs	r3, #1
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	430b      	orrs	r3, r1
 8006758:	4944      	ldr	r1, [pc, #272]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800675a:	4313      	orrs	r3, r2
 800675c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d17d      	bne.n	8006860 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006764:	4b41      	ldr	r3, [pc, #260]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a40      	ldr	r2, [pc, #256]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800676a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800676e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006770:	f7fc faf2 	bl	8002d58 <HAL_GetTick>
 8006774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006776:	e009      	b.n	800678c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006778:	f7fc faee 	bl	8002d58 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d902      	bls.n	800678c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	73fb      	strb	r3, [r7, #15]
        break;
 800678a:	e005      	b.n	8006798 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800678c:	4b37      	ldr	r3, [pc, #220]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1ef      	bne.n	8006778 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d160      	bne.n	8006860 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d111      	bne.n	80067c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067a4:	4b31      	ldr	r3, [pc, #196]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6892      	ldr	r2, [r2, #8]
 80067b4:	0211      	lsls	r1, r2, #8
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68d2      	ldr	r2, [r2, #12]
 80067ba:	0912      	lsrs	r2, r2, #4
 80067bc:	0452      	lsls	r2, r2, #17
 80067be:	430a      	orrs	r2, r1
 80067c0:	492a      	ldr	r1, [pc, #168]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	610b      	str	r3, [r1, #16]
 80067c6:	e027      	b.n	8006818 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d112      	bne.n	80067f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067ce:	4b27      	ldr	r3, [pc, #156]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80067d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6892      	ldr	r2, [r2, #8]
 80067de:	0211      	lsls	r1, r2, #8
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6912      	ldr	r2, [r2, #16]
 80067e4:	0852      	lsrs	r2, r2, #1
 80067e6:	3a01      	subs	r2, #1
 80067e8:	0552      	lsls	r2, r2, #21
 80067ea:	430a      	orrs	r2, r1
 80067ec:	491f      	ldr	r1, [pc, #124]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	610b      	str	r3, [r1, #16]
 80067f2:	e011      	b.n	8006818 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067f4:	4b1d      	ldr	r3, [pc, #116]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6892      	ldr	r2, [r2, #8]
 8006804:	0211      	lsls	r1, r2, #8
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6952      	ldr	r2, [r2, #20]
 800680a:	0852      	lsrs	r2, r2, #1
 800680c:	3a01      	subs	r2, #1
 800680e:	0652      	lsls	r2, r2, #25
 8006810:	430a      	orrs	r2, r1
 8006812:	4916      	ldr	r1, [pc, #88]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006814:	4313      	orrs	r3, r2
 8006816:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a13      	ldr	r2, [pc, #76]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800681e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006824:	f7fc fa98 	bl	8002d58 <HAL_GetTick>
 8006828:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800682a:	e009      	b.n	8006840 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800682c:	f7fc fa94 	bl	8002d58 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d902      	bls.n	8006840 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	73fb      	strb	r3, [r7, #15]
          break;
 800683e:	e005      	b.n	800684c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0ef      	beq.n	800682c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800684c:	7bfb      	ldrb	r3, [r7, #15]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d106      	bne.n	8006860 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	4904      	ldr	r1, [pc, #16]	; (800686c <RCCEx_PLLSAI1_Config+0x1e4>)
 800685c:	4313      	orrs	r3, r2
 800685e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40021000 	.word	0x40021000

08006870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800687e:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d018      	beq.n	80068bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800688a:	4b67      	ldr	r3, [pc, #412]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0203 	and.w	r2, r3, #3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d10d      	bne.n	80068b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
       ||
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d009      	beq.n	80068b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068a2:	4b61      	ldr	r3, [pc, #388]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
       ||
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d047      	beq.n	8006946 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	73fb      	strb	r3, [r7, #15]
 80068ba:	e044      	b.n	8006946 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d018      	beq.n	80068f6 <RCCEx_PLLSAI2_Config+0x86>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d825      	bhi.n	8006914 <RCCEx_PLLSAI2_Config+0xa4>
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d002      	beq.n	80068d2 <RCCEx_PLLSAI2_Config+0x62>
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d009      	beq.n	80068e4 <RCCEx_PLLSAI2_Config+0x74>
 80068d0:	e020      	b.n	8006914 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80068d2:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d11d      	bne.n	800691a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068e2:	e01a      	b.n	800691a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80068e4:	4b50      	ldr	r3, [pc, #320]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d116      	bne.n	800691e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068f4:	e013      	b.n	800691e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068f6:	4b4c      	ldr	r3, [pc, #304]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10f      	bne.n	8006922 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006902:	4b49      	ldr	r3, [pc, #292]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006912:	e006      	b.n	8006922 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
      break;
 8006918:	e004      	b.n	8006924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006922:	bf00      	nop
    }

    if(status == HAL_OK)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10d      	bne.n	8006946 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800692a:	4b3f      	ldr	r3, [pc, #252]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	3b01      	subs	r3, #1
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	430b      	orrs	r3, r1
 8006940:	4939      	ldr	r1, [pc, #228]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006942:	4313      	orrs	r3, r2
 8006944:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d167      	bne.n	8006a1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800694c:	4b36      	ldr	r3, [pc, #216]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a35      	ldr	r2, [pc, #212]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006958:	f7fc f9fe 	bl	8002d58 <HAL_GetTick>
 800695c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800695e:	e009      	b.n	8006974 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006960:	f7fc f9fa 	bl	8002d58 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d902      	bls.n	8006974 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	73fb      	strb	r3, [r7, #15]
        break;
 8006972:	e005      	b.n	8006980 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006974:	4b2c      	ldr	r3, [pc, #176]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ef      	bne.n	8006960 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d14a      	bne.n	8006a1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d111      	bne.n	80069b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800698c:	4b26      	ldr	r3, [pc, #152]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6892      	ldr	r2, [r2, #8]
 800699c:	0211      	lsls	r1, r2, #8
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68d2      	ldr	r2, [r2, #12]
 80069a2:	0912      	lsrs	r2, r2, #4
 80069a4:	0452      	lsls	r2, r2, #17
 80069a6:	430a      	orrs	r2, r1
 80069a8:	491f      	ldr	r1, [pc, #124]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	614b      	str	r3, [r1, #20]
 80069ae:	e011      	b.n	80069d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069b0:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6892      	ldr	r2, [r2, #8]
 80069c0:	0211      	lsls	r1, r2, #8
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6912      	ldr	r2, [r2, #16]
 80069c6:	0852      	lsrs	r2, r2, #1
 80069c8:	3a01      	subs	r2, #1
 80069ca:	0652      	lsls	r2, r2, #25
 80069cc:	430a      	orrs	r2, r1
 80069ce:	4916      	ldr	r1, [pc, #88]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fc f9ba 	bl	8002d58 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069e6:	e009      	b.n	80069fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069e8:	f7fc f9b6 	bl	8002d58 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d902      	bls.n	80069fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	73fb      	strb	r3, [r7, #15]
          break;
 80069fa:	e005      	b.n	8006a08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d0ef      	beq.n	80069e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a10:	695a      	ldr	r2, [r3, #20]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	4904      	ldr	r1, [pc, #16]	; (8006a28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40021000 	.word	0x40021000

08006a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e049      	b.n	8006ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7fb fe82 	bl	800275c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f000 fe30 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d001      	beq.n	8006af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e04f      	b.n	8006b94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f042 0201 	orr.w	r2, r2, #1
 8006b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a23      	ldr	r2, [pc, #140]	; (8006ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1e:	d018      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1c      	ldr	r2, [pc, #112]	; (8006bac <HAL_TIM_Base_Start_IT+0xd0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1b      	ldr	r2, [pc, #108]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0x76>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d115      	bne.n	8006b7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d015      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0xb4>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6a:	d011      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	e008      	b.n	8006b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0201 	orr.w	r2, r2, #1
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e000      	b.n	8006b92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40000800 	.word	0x40000800
 8006bac:	40000c00 	.word	0x40000c00
 8006bb0:	40013400 	.word	0x40013400
 8006bb4:	40014000 	.word	0x40014000
 8006bb8:	00010007 	.word	0x00010007

08006bbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e049      	b.n	8006c62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d106      	bne.n	8006be8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f841 	bl	8006c6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	f000 fd68 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0x24>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e03c      	b.n	8006d1e <HAL_TIM_PWM_Start+0x9e>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d109      	bne.n	8006cbe <HAL_TIM_PWM_Start+0x3e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	bf14      	ite	ne
 8006cb6:	2301      	movne	r3, #1
 8006cb8:	2300      	moveq	r3, #0
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	e02f      	b.n	8006d1e <HAL_TIM_PWM_Start+0x9e>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d109      	bne.n	8006cd8 <HAL_TIM_PWM_Start+0x58>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	e022      	b.n	8006d1e <HAL_TIM_PWM_Start+0x9e>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b0c      	cmp	r3, #12
 8006cdc:	d109      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0x72>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	e015      	b.n	8006d1e <HAL_TIM_PWM_Start+0x9e>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d109      	bne.n	8006d0c <HAL_TIM_PWM_Start+0x8c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	bf14      	ite	ne
 8006d04:	2301      	movne	r3, #1
 8006d06:	2300      	moveq	r3, #0
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	e008      	b.n	8006d1e <HAL_TIM_PWM_Start+0x9e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	bf14      	ite	ne
 8006d18:	2301      	movne	r3, #1
 8006d1a:	2300      	moveq	r3, #0
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e09c      	b.n	8006e60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <HAL_TIM_PWM_Start+0xb6>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d34:	e023      	b.n	8006d7e <HAL_TIM_PWM_Start+0xfe>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d104      	bne.n	8006d46 <HAL_TIM_PWM_Start+0xc6>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d44:	e01b      	b.n	8006d7e <HAL_TIM_PWM_Start+0xfe>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Start+0xd6>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d54:	e013      	b.n	8006d7e <HAL_TIM_PWM_Start+0xfe>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b0c      	cmp	r3, #12
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0xe6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d64:	e00b      	b.n	8006d7e <HAL_TIM_PWM_Start+0xfe>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xf6>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d74:	e003      	b.n	8006d7e <HAL_TIM_PWM_Start+0xfe>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 f9d0 	bl	800812c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <HAL_TIM_PWM_Start+0x1e8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x13e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a34      	ldr	r2, [pc, #208]	; (8006e6c <HAL_TIM_PWM_Start+0x1ec>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x13e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a32      	ldr	r2, [pc, #200]	; (8006e70 <HAL_TIM_PWM_Start+0x1f0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x13e>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a31      	ldr	r2, [pc, #196]	; (8006e74 <HAL_TIM_PWM_Start+0x1f4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_PWM_Start+0x13e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2f      	ldr	r2, [pc, #188]	; (8006e78 <HAL_TIM_PWM_Start+0x1f8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d101      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x142>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <HAL_TIM_PWM_Start+0x144>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a22      	ldr	r2, [pc, #136]	; (8006e68 <HAL_TIM_PWM_Start+0x1e8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01d      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d018      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a22      	ldr	r2, [pc, #136]	; (8006e7c <HAL_TIM_PWM_Start+0x1fc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a21      	ldr	r2, [pc, #132]	; (8006e80 <HAL_TIM_PWM_Start+0x200>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00e      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <HAL_TIM_PWM_Start+0x204>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d009      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <HAL_TIM_PWM_Start+0x1ec>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_PWM_Start+0x19e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <HAL_TIM_PWM_Start+0x1f0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d115      	bne.n	8006e4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <HAL_TIM_PWM_Start+0x208>)
 8006e26:	4013      	ands	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d015      	beq.n	8006e5c <HAL_TIM_PWM_Start+0x1dc>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e36:	d011      	beq.n	8006e5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e48:	e008      	b.n	8006e5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e000      	b.n	8006e5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40014400 	.word	0x40014400
 8006e78:	40014800 	.word	0x40014800
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	00010007 	.word	0x00010007

08006e8c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e049      	b.n	8006f32 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f841 	bl	8006f3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4610      	mov	r0, r2
 8006ecc:	f000 fc00 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b082      	sub	sp, #8
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d122      	bne.n	8006faa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d11b      	bne.n	8006faa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f06f 0202 	mvn.w	r2, #2
 8006f7a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f003 0303 	and.w	r3, r3, #3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fb7e 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 8006f96:	e005      	b.n	8006fa4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 fb70 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fb81 	bl	80076a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d122      	bne.n	8006ffe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d11b      	bne.n	8006ffe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f06f 0204 	mvn.w	r2, #4
 8006fce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fb54 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 8006fea:	e005      	b.n	8006ff8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fb46 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fb57 	bl	80076a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b08      	cmp	r3, #8
 800700a:	d122      	bne.n	8007052 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b08      	cmp	r3, #8
 8007018:	d11b      	bne.n	8007052 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f06f 0208 	mvn.w	r2, #8
 8007022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2204      	movs	r2, #4
 8007028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fb2a 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 800703e:	e005      	b.n	800704c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fb1c 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fb2d 	bl	80076a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b10      	cmp	r3, #16
 800705e:	d122      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f003 0310 	and.w	r3, r3, #16
 800706a:	2b10      	cmp	r3, #16
 800706c:	d11b      	bne.n	80070a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f06f 0210 	mvn.w	r2, #16
 8007076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2208      	movs	r2, #8
 800707c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb00 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 8007092:	e005      	b.n	80070a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 faf2 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fb03 	bl	80076a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d10e      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d107      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f06f 0201 	mvn.w	r2, #1
 80070ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7fa fd47 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070dc:	2b80      	cmp	r3, #128	; 0x80
 80070de:	d10e      	bne.n	80070fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	d107      	bne.n	80070fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f94d 	bl	8008398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800710c:	d10e      	bne.n	800712c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d107      	bne.n	800712c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 f940 	bl	80083ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007136:	2b40      	cmp	r3, #64	; 0x40
 8007138:	d10e      	bne.n	8007158 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d107      	bne.n	8007158 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fab1 	bl	80076ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b20      	cmp	r3, #32
 8007164:	d10e      	bne.n	8007184 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b20      	cmp	r3, #32
 8007172:	d107      	bne.n	8007184 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0220 	mvn.w	r2, #32
 800717c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f900 	bl	8008384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_TIM_IC_ConfigChannel+0x1e>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e088      	b.n	80072bc <HAL_TIM_IC_ConfigChannel+0x130>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d11b      	bne.n	80071f0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f000 fdf2 	bl	8007db0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 020c 	bic.w	r2, r2, #12
 80071da:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6999      	ldr	r1, [r3, #24]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	619a      	str	r2, [r3, #24]
 80071ee:	e060      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d11c      	bne.n	8007230 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6819      	ldr	r1, [r3, #0]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f000 fe70 	bl	8007eea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007218:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6999      	ldr	r1, [r3, #24]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	021a      	lsls	r2, r3, #8
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	619a      	str	r2, [r3, #24]
 800722e:	e040      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b08      	cmp	r3, #8
 8007234:	d11b      	bne.n	800726e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	6819      	ldr	r1, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f000 febd 	bl	8007fc4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69da      	ldr	r2, [r3, #28]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 020c 	bic.w	r2, r2, #12
 8007258:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69d9      	ldr	r1, [r3, #28]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	689a      	ldr	r2, [r3, #8]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	61da      	str	r2, [r3, #28]
 800726c:	e021      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	d11c      	bne.n	80072ae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f000 feda 	bl	800803c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69da      	ldr	r2, [r3, #28]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007296:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69d9      	ldr	r1, [r3, #28]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	021a      	lsls	r2, r3, #8
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
 80072ac:	e001      	b.n	80072b2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d101      	bne.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072de:	2302      	movs	r3, #2
 80072e0:	e0ff      	b.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b14      	cmp	r3, #20
 80072ee:	f200 80f0 	bhi.w	80074d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072f2:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	080074d3 	.word	0x080074d3
 8007300:	080074d3 	.word	0x080074d3
 8007304:	080074d3 	.word	0x080074d3
 8007308:	0800738d 	.word	0x0800738d
 800730c:	080074d3 	.word	0x080074d3
 8007310:	080074d3 	.word	0x080074d3
 8007314:	080074d3 	.word	0x080074d3
 8007318:	080073cf 	.word	0x080073cf
 800731c:	080074d3 	.word	0x080074d3
 8007320:	080074d3 	.word	0x080074d3
 8007324:	080074d3 	.word	0x080074d3
 8007328:	0800740f 	.word	0x0800740f
 800732c:	080074d3 	.word	0x080074d3
 8007330:	080074d3 	.word	0x080074d3
 8007334:	080074d3 	.word	0x080074d3
 8007338:	08007451 	.word	0x08007451
 800733c:	080074d3 	.word	0x080074d3
 8007340:	080074d3 	.word	0x080074d3
 8007344:	080074d3 	.word	0x080074d3
 8007348:	08007491 	.word	0x08007491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fa56 	bl	8007804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0208 	orr.w	r2, r2, #8
 8007366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0204 	bic.w	r2, r2, #4
 8007376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6999      	ldr	r1, [r3, #24]
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	619a      	str	r2, [r3, #24]
      break;
 800738a:	e0a5      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fac6 	bl	8007924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6999      	ldr	r1, [r3, #24]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	021a      	lsls	r2, r3, #8
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	430a      	orrs	r2, r1
 80073ca:	619a      	str	r2, [r3, #24]
      break;
 80073cc:	e084      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f000 fb2f 	bl	8007a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0208 	orr.w	r2, r2, #8
 80073e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	69da      	ldr	r2, [r3, #28]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0204 	bic.w	r2, r2, #4
 80073f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	69d9      	ldr	r1, [r3, #28]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	61da      	str	r2, [r3, #28]
      break;
 800740c:	e064      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fb97 	bl	8007b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69d9      	ldr	r1, [r3, #28]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	021a      	lsls	r2, r3, #8
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	61da      	str	r2, [r3, #28]
      break;
 800744e:	e043      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fbe0 	bl	8007c1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0204 	bic.w	r2, r2, #4
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800748e:	e023      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fc24 	bl	8007ce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	021a      	lsls	r2, r3, #8
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074d0:	e002      	b.n	80074d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
      break;
 80074d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop

080074ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_TIM_ConfigClockSource+0x1c>
 8007504:	2302      	movs	r3, #2
 8007506:	e0b6      	b.n	8007676 <HAL_TIM_ConfigClockSource+0x18a>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2202      	movs	r2, #2
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800752a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007544:	d03e      	beq.n	80075c4 <HAL_TIM_ConfigClockSource+0xd8>
 8007546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754a:	f200 8087 	bhi.w	800765c <HAL_TIM_ConfigClockSource+0x170>
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007552:	f000 8086 	beq.w	8007662 <HAL_TIM_ConfigClockSource+0x176>
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755a:	d87f      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 800755c:	2b70      	cmp	r3, #112	; 0x70
 800755e:	d01a      	beq.n	8007596 <HAL_TIM_ConfigClockSource+0xaa>
 8007560:	2b70      	cmp	r3, #112	; 0x70
 8007562:	d87b      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 8007564:	2b60      	cmp	r3, #96	; 0x60
 8007566:	d050      	beq.n	800760a <HAL_TIM_ConfigClockSource+0x11e>
 8007568:	2b60      	cmp	r3, #96	; 0x60
 800756a:	d877      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 800756c:	2b50      	cmp	r3, #80	; 0x50
 800756e:	d03c      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0xfe>
 8007570:	2b50      	cmp	r3, #80	; 0x50
 8007572:	d873      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d058      	beq.n	800762a <HAL_TIM_ConfigClockSource+0x13e>
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d86f      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 800757c:	2b30      	cmp	r3, #48	; 0x30
 800757e:	d064      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x15e>
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d86b      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 8007584:	2b20      	cmp	r3, #32
 8007586:	d060      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x15e>
 8007588:	2b20      	cmp	r3, #32
 800758a:	d867      	bhi.n	800765c <HAL_TIM_ConfigClockSource+0x170>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d05c      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x15e>
 8007590:	2b10      	cmp	r3, #16
 8007592:	d05a      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x15e>
 8007594:	e062      	b.n	800765c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6899      	ldr	r1, [r3, #8]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f000 fda1 	bl	80080ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	609a      	str	r2, [r3, #8]
      break;
 80075c2:	e04f      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	6899      	ldr	r1, [r3, #8]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	f000 fd8a 	bl	80080ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075e6:	609a      	str	r2, [r3, #8]
      break;
 80075e8:	e03c      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6859      	ldr	r1, [r3, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f000 fc48 	bl	8007e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2150      	movs	r1, #80	; 0x50
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fd57 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007608:	e02c      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	6859      	ldr	r1, [r3, #4]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	461a      	mov	r2, r3
 8007618:	f000 fca4 	bl	8007f64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2160      	movs	r1, #96	; 0x60
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fd47 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007628:	e01c      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	461a      	mov	r2, r3
 8007638:	f000 fc28 	bl	8007e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2140      	movs	r1, #64	; 0x40
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fd37 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 8007648:	e00c      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f000 fd2e 	bl	80080b6 <TIM_ITRx_SetConfig>
      break;
 800765a:	e003      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	73fb      	strb	r3, [r7, #15]
      break;
 8007660:	e000      	b.n	8007664 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007674:	7bfb      	ldrb	r3, [r7, #15]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a40      	ldr	r2, [pc, #256]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d00f      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3d      	ldr	r2, [pc, #244]	; (80077e8 <TIM_Base_SetConfig+0x118>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00b      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3c      	ldr	r2, [pc, #240]	; (80077ec <TIM_Base_SetConfig+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <TIM_Base_SetConfig+0x120>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a2f      	ldr	r2, [pc, #188]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01f      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d01b      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2c      	ldr	r2, [pc, #176]	; (80077e8 <TIM_Base_SetConfig+0x118>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d017      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2b      	ldr	r2, [pc, #172]	; (80077ec <TIM_Base_SetConfig+0x11c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d013      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <TIM_Base_SetConfig+0x120>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00f      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d00b      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a28      	ldr	r2, [pc, #160]	; (80077f8 <TIM_Base_SetConfig+0x128>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d007      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a27      	ldr	r2, [pc, #156]	; (80077fc <TIM_Base_SetConfig+0x12c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_Base_SetConfig+0x9a>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a26      	ldr	r2, [pc, #152]	; (8007800 <TIM_Base_SetConfig+0x130>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d108      	bne.n	800777c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a10      	ldr	r2, [pc, #64]	; (80077e4 <TIM_Base_SetConfig+0x114>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00f      	beq.n	80077c8 <TIM_Base_SetConfig+0xf8>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a12      	ldr	r2, [pc, #72]	; (80077f4 <TIM_Base_SetConfig+0x124>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00b      	beq.n	80077c8 <TIM_Base_SetConfig+0xf8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a11      	ldr	r2, [pc, #68]	; (80077f8 <TIM_Base_SetConfig+0x128>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d007      	beq.n	80077c8 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a10      	ldr	r2, [pc, #64]	; (80077fc <TIM_Base_SetConfig+0x12c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d003      	beq.n	80077c8 <TIM_Base_SetConfig+0xf8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <TIM_Base_SetConfig+0x130>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d103      	bne.n	80077d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691a      	ldr	r2, [r3, #16]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	615a      	str	r2, [r3, #20]
}
 80077d6:	bf00      	nop
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40012c00 	.word	0x40012c00
 80077e8:	40000400 	.word	0x40000400
 80077ec:	40000800 	.word	0x40000800
 80077f0:	40000c00 	.word	0x40000c00
 80077f4:	40013400 	.word	0x40013400
 80077f8:	40014000 	.word	0x40014000
 80077fc:	40014400 	.word	0x40014400
 8007800:	40014800 	.word	0x40014800

08007804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f023 0302 	bic.w	r3, r3, #2
 8007850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a2c      	ldr	r2, [pc, #176]	; (8007910 <TIM_OC1_SetConfig+0x10c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00f      	beq.n	8007884 <TIM_OC1_SetConfig+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a2b      	ldr	r2, [pc, #172]	; (8007914 <TIM_OC1_SetConfig+0x110>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00b      	beq.n	8007884 <TIM_OC1_SetConfig+0x80>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a2a      	ldr	r2, [pc, #168]	; (8007918 <TIM_OC1_SetConfig+0x114>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d007      	beq.n	8007884 <TIM_OC1_SetConfig+0x80>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a29      	ldr	r2, [pc, #164]	; (800791c <TIM_OC1_SetConfig+0x118>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d003      	beq.n	8007884 <TIM_OC1_SetConfig+0x80>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a28      	ldr	r2, [pc, #160]	; (8007920 <TIM_OC1_SetConfig+0x11c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d10c      	bne.n	800789e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f023 0308 	bic.w	r3, r3, #8
 800788a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	4313      	orrs	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f023 0304 	bic.w	r3, r3, #4
 800789c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <TIM_OC1_SetConfig+0x10c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_OC1_SetConfig+0xc2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1a      	ldr	r2, [pc, #104]	; (8007914 <TIM_OC1_SetConfig+0x110>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_OC1_SetConfig+0xc2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a19      	ldr	r2, [pc, #100]	; (8007918 <TIM_OC1_SetConfig+0x114>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_OC1_SetConfig+0xc2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a18      	ldr	r2, [pc, #96]	; (800791c <TIM_OC1_SetConfig+0x118>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_OC1_SetConfig+0xc2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a17      	ldr	r2, [pc, #92]	; (8007920 <TIM_OC1_SetConfig+0x11c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d111      	bne.n	80078ea <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4313      	orrs	r3, r2
 80078de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f023 0210 	bic.w	r2, r3, #16
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f023 0320 	bic.w	r3, r3, #32
 8007972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <TIM_OC2_SetConfig+0x100>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC2_SetConfig+0x6c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <TIM_OC2_SetConfig+0x104>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10d      	bne.n	80079ac <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_OC2_SetConfig+0x100>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_OC2_SetConfig+0xb0>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <TIM_OC2_SetConfig+0x104>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_OC2_SetConfig+0xb0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1b      	ldr	r2, [pc, #108]	; (8007a2c <TIM_OC2_SetConfig+0x108>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_OC2_SetConfig+0xb0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <TIM_OC2_SetConfig+0x10c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC2_SetConfig+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <TIM_OC2_SetConfig+0x110>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d113      	bne.n	80079fc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40013400 	.word	0x40013400
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800

08007a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0303 	bic.w	r3, r3, #3
 8007a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	697a      	ldr	r2, [r7, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <TIM_OC3_SetConfig+0xfc>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_OC3_SetConfig+0x6a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <TIM_OC3_SetConfig+0x100>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d10d      	bne.n	8007abe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <TIM_OC3_SetConfig+0xfc>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_OC3_SetConfig+0xae>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <TIM_OC3_SetConfig+0x100>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_OC3_SetConfig+0xae>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1a      	ldr	r2, [pc, #104]	; (8007b3c <TIM_OC3_SetConfig+0x104>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_OC3_SetConfig+0xae>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a19      	ldr	r2, [pc, #100]	; (8007b40 <TIM_OC3_SetConfig+0x108>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_OC3_SetConfig+0xae>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	; (8007b44 <TIM_OC3_SetConfig+0x10c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d113      	bne.n	8007b0e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	40014400 	.word	0x40014400
 8007b44:	40014800 	.word	0x40014800

08007b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	031b      	lsls	r3, r3, #12
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a18      	ldr	r2, [pc, #96]	; (8007c08 <TIM_OC4_SetConfig+0xc0>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00f      	beq.n	8007bcc <TIM_OC4_SetConfig+0x84>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a17      	ldr	r2, [pc, #92]	; (8007c0c <TIM_OC4_SetConfig+0xc4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <TIM_OC4_SetConfig+0x84>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <TIM_OC4_SetConfig+0xc8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_OC4_SetConfig+0x84>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a15      	ldr	r2, [pc, #84]	; (8007c14 <TIM_OC4_SetConfig+0xcc>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_OC4_SetConfig+0x84>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a14      	ldr	r2, [pc, #80]	; (8007c18 <TIM_OC4_SetConfig+0xd0>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d109      	bne.n	8007be0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	019b      	lsls	r3, r3, #6
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	371c      	adds	r7, #28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800

08007c1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	041b      	lsls	r3, r3, #16
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <TIM_OC5_SetConfig+0xb4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d00f      	beq.n	8007c96 <TIM_OC5_SetConfig+0x7a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a16      	ldr	r2, [pc, #88]	; (8007cd4 <TIM_OC5_SetConfig+0xb8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <TIM_OC5_SetConfig+0x7a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <TIM_OC5_SetConfig+0xbc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <TIM_OC5_SetConfig+0x7a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a14      	ldr	r2, [pc, #80]	; (8007cdc <TIM_OC5_SetConfig+0xc0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC5_SetConfig+0x7a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <TIM_OC5_SetConfig+0xc4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d109      	bne.n	8007caa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	621a      	str	r2, [r3, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	371c      	adds	r7, #28
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	40012c00 	.word	0x40012c00
 8007cd4:	40013400 	.word	0x40013400
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	40014400 	.word	0x40014400
 8007ce0:	40014800 	.word	0x40014800

08007ce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	051b      	lsls	r3, r3, #20
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <TIM_OC6_SetConfig+0xb8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_OC6_SetConfig+0x7c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a17      	ldr	r2, [pc, #92]	; (8007da0 <TIM_OC6_SetConfig+0xbc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <TIM_OC6_SetConfig+0x7c>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <TIM_OC6_SetConfig+0xc0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_OC6_SetConfig+0x7c>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <TIM_OC6_SetConfig+0xc4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC6_SetConfig+0x7c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a14      	ldr	r2, [pc, #80]	; (8007dac <TIM_OC6_SetConfig+0xc8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d109      	bne.n	8007d74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	029b      	lsls	r3, r3, #10
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	621a      	str	r2, [r3, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40013400 	.word	0x40013400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800

08007db0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
 8007dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0201 	bic.w	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	4a26      	ldr	r2, [pc, #152]	; (8007e74 <TIM_TI1_SetConfig+0xc4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d017      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d013      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4a23      	ldr	r2, [pc, #140]	; (8007e78 <TIM_TI1_SetConfig+0xc8>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d00f      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	4a22      	ldr	r2, [pc, #136]	; (8007e7c <TIM_TI1_SetConfig+0xcc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00b      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4a21      	ldr	r2, [pc, #132]	; (8007e80 <TIM_TI1_SetConfig+0xd0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d007      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4a20      	ldr	r2, [pc, #128]	; (8007e84 <TIM_TI1_SetConfig+0xd4>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_TI1_SetConfig+0x5e>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4a1f      	ldr	r2, [pc, #124]	; (8007e88 <TIM_TI1_SetConfig+0xd8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d101      	bne.n	8007e12 <TIM_TI1_SetConfig+0x62>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e000      	b.n	8007e14 <TIM_TI1_SetConfig+0x64>
 8007e12:	2300      	movs	r3, #0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0303 	bic.w	r3, r3, #3
 8007e1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e003      	b.n	8007e32 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	f023 030a 	bic.w	r3, r3, #10
 8007e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f003 030a 	and.w	r3, r3, #10
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800
 8007e80:	40000c00 	.word	0x40000c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40014000 	.word	0x40014000

08007e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	f023 0201 	bic.w	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f023 030a 	bic.w	r3, r3, #10
 8007ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	bf00      	nop
 8007ee0:	371c      	adds	r7, #28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b087      	sub	sp, #28
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f023 0210 	bic.w	r2, r3, #16
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	031b      	lsls	r3, r3, #12
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	011b      	lsls	r3, r3, #4
 8007f42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	621a      	str	r2, [r3, #32]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	f023 0210 	bic.w	r2, r3, #16
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	031b      	lsls	r3, r3, #12
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 0303 	bic.w	r3, r3, #3
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	b2db      	uxtb	r3, r3
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008014:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	621a      	str	r2, [r3, #32]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008068:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800807a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	031b      	lsls	r3, r3, #12
 8008080:	b29b      	uxth	r3, r3
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800808e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	031b      	lsls	r3, r3, #12
 8008094:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b085      	sub	sp, #20
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	f043 0307 	orr.w	r3, r3, #7
 80080d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	609a      	str	r2, [r3, #8]
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	021a      	lsls	r2, r3, #8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	431a      	orrs	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	4313      	orrs	r3, r2
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	609a      	str	r2, [r3, #8]
}
 8008120:	bf00      	nop
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800812c:	b480      	push	{r7}
 800812e:	b087      	sub	sp, #28
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	f003 031f 	and.w	r3, r3, #31
 800813e:	2201      	movs	r2, #1
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6a1a      	ldr	r2, [r3, #32]
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	43db      	mvns	r3, r3
 800814e:	401a      	ands	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a1a      	ldr	r2, [r3, #32]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 031f 	and.w	r3, r3, #31
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	fa01 f303 	lsl.w	r3, r1, r3
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e068      	b.n	8008262 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a2e      	ldr	r2, [pc, #184]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d108      	bne.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d01d      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008202:	d018      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d013      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1a      	ldr	r2, [pc, #104]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00e      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a18      	ldr	r2, [pc, #96]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d009      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d004      	beq.n	8008236 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d10c      	bne.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800823c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	4313      	orrs	r3, r2
 8008246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40013400 	.word	0x40013400
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00
 8008284:	40014000 	.word	0x40014000

08008288 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800829c:	2b01      	cmp	r3, #1
 800829e:	d101      	bne.n	80082a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082a0:	2302      	movs	r3, #2
 80082a2:	e065      	b.n	8008370 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830a:	4313      	orrs	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	699b      	ldr	r3, [r3, #24]
 8008318:	041b      	lsls	r3, r3, #16
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a16      	ldr	r2, [pc, #88]	; (800837c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a14      	ldr	r2, [pc, #80]	; (8008380 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d115      	bne.n	800835e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833c:	051b      	lsls	r3, r3, #20
 800833e:	4313      	orrs	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	69db      	ldr	r3, [r3, #28]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	40012c00 	.word	0x40012c00
 8008380:	40013400 	.word	0x40013400

08008384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e048      	b.n	8008464 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fa fa84 	bl	80028f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2224      	movs	r2, #36	; 0x24
 80083ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0201 	bic.w	r2, r2, #1
 80083fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fbca 	bl	8008b98 <UART_SetConfig>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e02a      	b.n	8008464 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fe76 	bl	8009108 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800842a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800843a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0208 	orr.w	r2, r2, #8
 800844a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0201 	orr.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fef5 	bl	800924c <UART_CheckIdleState>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008480:	2b20      	cmp	r3, #32
 8008482:	f040 8082 	bne.w	800858a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <HAL_UART_Transmit+0x26>
 800848c:	88fb      	ldrh	r3, [r7, #6]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e07a      	b.n	800858c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_UART_Transmit+0x38>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e073      	b.n	800858c <HAL_UART_Transmit+0x120>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2221      	movs	r2, #33	; 0x21
 80084b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ba:	f7fa fc4d 	bl	8002d58 <HAL_GetTick>
 80084be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d8:	d108      	bne.n	80084ec <HAL_UART_Transmit+0x80>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d104      	bne.n	80084ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80084e2:	2300      	movs	r3, #0
 80084e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	61bb      	str	r3, [r7, #24]
 80084ea:	e003      	b.n	80084f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80084fc:	e02d      	b.n	800855a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	2180      	movs	r1, #128	; 0x80
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f000 fee8 	bl	80092de <UART_WaitOnFlagUntilTimeout>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008514:	2303      	movs	r3, #3
 8008516:	e039      	b.n	800858c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10b      	bne.n	8008536 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	881a      	ldrh	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800852a:	b292      	uxth	r2, r2
 800852c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	3302      	adds	r3, #2
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e008      	b.n	8008548 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	b292      	uxth	r2, r2
 8008540:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	3301      	adds	r3, #1
 8008546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008560:	b29b      	uxth	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1cb      	bne.n	80084fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2200      	movs	r2, #0
 800856e:	2140      	movs	r1, #64	; 0x40
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 feb4 	bl	80092de <UART_WaitOnFlagUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e005      	b.n	800858c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2220      	movs	r2, #32
 8008584:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	e000      	b.n	800858c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800858a:	2302      	movs	r3, #2
  }
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b0ba      	sub	sp, #232	; 0xe8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085be:	f640 030f 	movw	r3, #2063	; 0x80f
 80085c2:	4013      	ands	r3, r2
 80085c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d115      	bne.n	80085fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d4:	f003 0320 	and.w	r3, r3, #32
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00f      	beq.n	80085fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 82a6 	beq.w	8008b3e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
      }
      return;
 80085fa:	e2a0      	b.n	8008b3e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80085fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8117 	beq.w	8008834 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008612:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008616:	4b85      	ldr	r3, [pc, #532]	; (800882c <HAL_UART_IRQHandler+0x298>)
 8008618:	4013      	ands	r3, r2
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 810a 	beq.w	8008834 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d011      	beq.n	8008650 <HAL_UART_IRQHandler+0xbc>
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2201      	movs	r2, #1
 800863e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008646:	f043 0201 	orr.w	r2, r3, #1
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b00      	cmp	r3, #0
 800865a:	d011      	beq.n	8008680 <HAL_UART_IRQHandler+0xec>
 800865c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00b      	beq.n	8008680 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2202      	movs	r2, #2
 800866e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008676:	f043 0204 	orr.w	r2, r3, #4
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d011      	beq.n	80086b0 <HAL_UART_IRQHandler+0x11c>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2204      	movs	r2, #4
 800869e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a6:	f043 0202 	orr.w	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d105      	bne.n	80086d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2208      	movs	r2, #8
 80086da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e2:	f043 0208 	orr.w	r2, r3, #8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <HAL_UART_IRQHandler+0x18a>
 80086f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00c      	beq.n	800871e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800870c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008714:	f043 0220 	orr.w	r2, r3, #32
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 820c 	beq.w	8008b42 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800872a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872e:	f003 0320 	and.w	r3, r3, #32
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00d      	beq.n	8008752 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800873a:	f003 0320 	and.w	r3, r3, #32
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d005      	beq.n	8008776 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800876a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800876e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008772:	2b00      	cmp	r3, #0
 8008774:	d04f      	beq.n	8008816 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fe75 	bl	8009466 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008786:	2b40      	cmp	r3, #64	; 0x40
 8008788:	d141      	bne.n	800880e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1d9      	bne.n	800878a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d013      	beq.n	8008806 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	4a13      	ldr	r2, [pc, #76]	; (8008830 <HAL_UART_IRQHandler+0x29c>)
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fc fb1c 	bl	8004e28 <HAL_DMA_Abort_IT>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d017      	beq.n	8008826 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008800:	4610      	mov	r0, r2
 8008802:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008804:	e00f      	b.n	8008826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f9b0 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880c:	e00b      	b.n	8008826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f9ac 	bl	8008b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008814:	e007      	b.n	8008826 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f9a8 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008824:	e18d      	b.n	8008b42 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008826:	bf00      	nop
    return;
 8008828:	e18b      	b.n	8008b42 <HAL_UART_IRQHandler+0x5ae>
 800882a:	bf00      	nop
 800882c:	04000120 	.word	0x04000120
 8008830:	0800952d 	.word	0x0800952d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008838:	2b01      	cmp	r3, #1
 800883a:	f040 8146 	bne.w	8008aca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 813f 	beq.w	8008aca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800884c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008850:	f003 0310 	and.w	r3, r3, #16
 8008854:	2b00      	cmp	r3, #0
 8008856:	f000 8138 	beq.w	8008aca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2210      	movs	r2, #16
 8008860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800886c:	2b40      	cmp	r3, #64	; 0x40
 800886e:	f040 80b4 	bne.w	80089da <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800887e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 815f 	beq.w	8008b46 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800888e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008892:	429a      	cmp	r2, r3
 8008894:	f080 8157 	bcs.w	8008b46 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800889e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f040 8085 	bne.w	80089be <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1da      	bne.n	80088b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800890e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800892a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e1      	bne.n	80088fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800894a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800894c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800895e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800896c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e3      	bne.n	800893a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800898c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800898e:	f023 0310 	bic.w	r3, r3, #16
 8008992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80089a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089a8:	e841 2300 	strex	r3, r2, [r1]
 80089ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1e4      	bne.n	800897e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fc f9f7 	bl	8004dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f8d4 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089d8:	e0b5      	b.n	8008b46 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 80a7 	beq.w	8008b4a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80089fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80a2 	beq.w	8008b4a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a28:	647b      	str	r3, [r7, #68]	; 0x44
 8008a2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e4      	bne.n	8008a06 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3308      	adds	r3, #8
 8008a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	e853 3f00 	ldrex	r3, [r3]
 8008a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3308      	adds	r3, #8
 8008a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a60:	633a      	str	r2, [r7, #48]	; 0x30
 8008a62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e3      	bne.n	8008a3c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0310 	bic.w	r3, r3, #16
 8008a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008aa8:	61fb      	str	r3, [r7, #28]
 8008aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	69b9      	ldr	r1, [r7, #24]
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e4      	bne.n	8008a86 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f85c 	bl	8008b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ac8:	e03f      	b.n	8008b4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00e      	beq.n	8008af4 <HAL_UART_IRQHandler+0x560>
 8008ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008aea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fd5d 	bl	80095ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008af2:	e02d      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00e      	beq.n	8008b1e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d008      	beq.n	8008b1e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01c      	beq.n	8008b4e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	4798      	blx	r3
    }
    return;
 8008b1c:	e017      	b.n	8008b4e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d012      	beq.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
 8008b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00c      	beq.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fd0e 	bl	8009558 <UART_EndTransmit_IT>
    return;
 8008b3c:	e008      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b3e:	bf00      	nop
 8008b40:	e006      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b42:	bf00      	nop
 8008b44:	e004      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b46:	bf00      	nop
 8008b48:	e002      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008b4a:	bf00      	nop
 8008b4c:	e000      	b.n	8008b50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008b4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b50:	37e8      	adds	r7, #232	; 0xe8
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b9c:	b08a      	sub	sp, #40	; 0x28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	695b      	ldr	r3, [r3, #20]
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4ba4      	ldr	r3, [pc, #656]	; (8008e58 <UART_SetConfig+0x2c0>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a99      	ldr	r2, [pc, #612]	; (8008e5c <UART_SetConfig+0x2c4>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c00:	4313      	orrs	r3, r2
 8008c02:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c14:	430a      	orrs	r2, r1
 8008c16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a90      	ldr	r2, [pc, #576]	; (8008e60 <UART_SetConfig+0x2c8>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d126      	bne.n	8008c70 <UART_SetConfig+0xd8>
 8008c22:	4b90      	ldr	r3, [pc, #576]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c28:	f003 0303 	and.w	r3, r3, #3
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d81b      	bhi.n	8008c68 <UART_SetConfig+0xd0>
 8008c30:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <UART_SetConfig+0xa0>)
 8008c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c36:	bf00      	nop
 8008c38:	08008c49 	.word	0x08008c49
 8008c3c:	08008c59 	.word	0x08008c59
 8008c40:	08008c51 	.word	0x08008c51
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c4e:	e116      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008c50:	2302      	movs	r3, #2
 8008c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c56:	e112      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008c58:	2304      	movs	r3, #4
 8008c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c5e:	e10e      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008c60:	2308      	movs	r3, #8
 8008c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c66:	e10a      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008c68:	2310      	movs	r3, #16
 8008c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c6e:	e106      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a7c      	ldr	r2, [pc, #496]	; (8008e68 <UART_SetConfig+0x2d0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d138      	bne.n	8008cec <UART_SetConfig+0x154>
 8008c7a:	4b7a      	ldr	r3, [pc, #488]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c80:	f003 030c 	and.w	r3, r3, #12
 8008c84:	2b0c      	cmp	r3, #12
 8008c86:	d82d      	bhi.n	8008ce4 <UART_SetConfig+0x14c>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0xf8>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008cc5 	.word	0x08008cc5
 8008c94:	08008ce5 	.word	0x08008ce5
 8008c98:	08008ce5 	.word	0x08008ce5
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008cd5 	.word	0x08008cd5
 8008ca4:	08008ce5 	.word	0x08008ce5
 8008ca8:	08008ce5 	.word	0x08008ce5
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008ccd 	.word	0x08008ccd
 8008cb4:	08008ce5 	.word	0x08008ce5
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008cdd 	.word	0x08008cdd
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cca:	e0d8      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008ccc:	2302      	movs	r3, #2
 8008cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cd2:	e0d4      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008cd4:	2304      	movs	r3, #4
 8008cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cda:	e0d0      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008cdc:	2308      	movs	r3, #8
 8008cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ce2:	e0cc      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008cea:	e0c8      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a5e      	ldr	r2, [pc, #376]	; (8008e6c <UART_SetConfig+0x2d4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d125      	bne.n	8008d42 <UART_SetConfig+0x1aa>
 8008cf6:	4b5b      	ldr	r3, [pc, #364]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d00:	2b30      	cmp	r3, #48	; 0x30
 8008d02:	d016      	beq.n	8008d32 <UART_SetConfig+0x19a>
 8008d04:	2b30      	cmp	r3, #48	; 0x30
 8008d06:	d818      	bhi.n	8008d3a <UART_SetConfig+0x1a2>
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	d00a      	beq.n	8008d22 <UART_SetConfig+0x18a>
 8008d0c:	2b20      	cmp	r3, #32
 8008d0e:	d814      	bhi.n	8008d3a <UART_SetConfig+0x1a2>
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <UART_SetConfig+0x182>
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d008      	beq.n	8008d2a <UART_SetConfig+0x192>
 8008d18:	e00f      	b.n	8008d3a <UART_SetConfig+0x1a2>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d20:	e0ad      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d22:	2302      	movs	r3, #2
 8008d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d28:	e0a9      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d30:	e0a5      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d32:	2308      	movs	r3, #8
 8008d34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d38:	e0a1      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d40:	e09d      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a4a      	ldr	r2, [pc, #296]	; (8008e70 <UART_SetConfig+0x2d8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d125      	bne.n	8008d98 <UART_SetConfig+0x200>
 8008d4c:	4b45      	ldr	r3, [pc, #276]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d56:	2bc0      	cmp	r3, #192	; 0xc0
 8008d58:	d016      	beq.n	8008d88 <UART_SetConfig+0x1f0>
 8008d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008d5c:	d818      	bhi.n	8008d90 <UART_SetConfig+0x1f8>
 8008d5e:	2b80      	cmp	r3, #128	; 0x80
 8008d60:	d00a      	beq.n	8008d78 <UART_SetConfig+0x1e0>
 8008d62:	2b80      	cmp	r3, #128	; 0x80
 8008d64:	d814      	bhi.n	8008d90 <UART_SetConfig+0x1f8>
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <UART_SetConfig+0x1d8>
 8008d6a:	2b40      	cmp	r3, #64	; 0x40
 8008d6c:	d008      	beq.n	8008d80 <UART_SetConfig+0x1e8>
 8008d6e:	e00f      	b.n	8008d90 <UART_SetConfig+0x1f8>
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d76:	e082      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d7e:	e07e      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d80:	2304      	movs	r3, #4
 8008d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d86:	e07a      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d88:	2308      	movs	r3, #8
 8008d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d8e:	e076      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d90:	2310      	movs	r3, #16
 8008d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d96:	e072      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a35      	ldr	r2, [pc, #212]	; (8008e74 <UART_SetConfig+0x2dc>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d12a      	bne.n	8008df8 <UART_SetConfig+0x260>
 8008da2:	4b30      	ldr	r3, [pc, #192]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db0:	d01a      	beq.n	8008de8 <UART_SetConfig+0x250>
 8008db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db6:	d81b      	bhi.n	8008df0 <UART_SetConfig+0x258>
 8008db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dbc:	d00c      	beq.n	8008dd8 <UART_SetConfig+0x240>
 8008dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc2:	d815      	bhi.n	8008df0 <UART_SetConfig+0x258>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <UART_SetConfig+0x238>
 8008dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dcc:	d008      	beq.n	8008de0 <UART_SetConfig+0x248>
 8008dce:	e00f      	b.n	8008df0 <UART_SetConfig+0x258>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dd6:	e052      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dde:	e04e      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008de0:	2304      	movs	r3, #4
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008de6:	e04a      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008de8:	2308      	movs	r3, #8
 8008dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008dee:	e046      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008df0:	2310      	movs	r3, #16
 8008df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008df6:	e042      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <UART_SetConfig+0x2c4>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d13a      	bne.n	8008e78 <UART_SetConfig+0x2e0>
 8008e02:	4b18      	ldr	r3, [pc, #96]	; (8008e64 <UART_SetConfig+0x2cc>)
 8008e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e10:	d01a      	beq.n	8008e48 <UART_SetConfig+0x2b0>
 8008e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e16:	d81b      	bhi.n	8008e50 <UART_SetConfig+0x2b8>
 8008e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e1c:	d00c      	beq.n	8008e38 <UART_SetConfig+0x2a0>
 8008e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e22:	d815      	bhi.n	8008e50 <UART_SetConfig+0x2b8>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d003      	beq.n	8008e30 <UART_SetConfig+0x298>
 8008e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e2c:	d008      	beq.n	8008e40 <UART_SetConfig+0x2a8>
 8008e2e:	e00f      	b.n	8008e50 <UART_SetConfig+0x2b8>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e36:	e022      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e3e:	e01e      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008e40:	2304      	movs	r3, #4
 8008e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e46:	e01a      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e4e:	e016      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008e56:	e012      	b.n	8008e7e <UART_SetConfig+0x2e6>
 8008e58:	efff69f3 	.word	0xefff69f3
 8008e5c:	40008000 	.word	0x40008000
 8008e60:	40013800 	.word	0x40013800
 8008e64:	40021000 	.word	0x40021000
 8008e68:	40004400 	.word	0x40004400
 8008e6c:	40004800 	.word	0x40004800
 8008e70:	40004c00 	.word	0x40004c00
 8008e74:	40005000 	.word	0x40005000
 8008e78:	2310      	movs	r3, #16
 8008e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a9f      	ldr	r2, [pc, #636]	; (8009100 <UART_SetConfig+0x568>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d17a      	bne.n	8008f7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d824      	bhi.n	8008eda <UART_SetConfig+0x342>
 8008e90:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <UART_SetConfig+0x300>)
 8008e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e96:	bf00      	nop
 8008e98:	08008ebd 	.word	0x08008ebd
 8008e9c:	08008edb 	.word	0x08008edb
 8008ea0:	08008ec5 	.word	0x08008ec5
 8008ea4:	08008edb 	.word	0x08008edb
 8008ea8:	08008ecb 	.word	0x08008ecb
 8008eac:	08008edb 	.word	0x08008edb
 8008eb0:	08008edb 	.word	0x08008edb
 8008eb4:	08008edb 	.word	0x08008edb
 8008eb8:	08008ed3 	.word	0x08008ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ebc:	f7fd f86e 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8008ec0:	61f8      	str	r0, [r7, #28]
        break;
 8008ec2:	e010      	b.n	8008ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec4:	4b8f      	ldr	r3, [pc, #572]	; (8009104 <UART_SetConfig+0x56c>)
 8008ec6:	61fb      	str	r3, [r7, #28]
        break;
 8008ec8:	e00d      	b.n	8008ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eca:	f7fc ffcf 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8008ece:	61f8      	str	r0, [r7, #28]
        break;
 8008ed0:	e009      	b.n	8008ee6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed6:	61fb      	str	r3, [r7, #28]
        break;
 8008ed8:	e005      	b.n	8008ee6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80fb 	beq.w	80090e4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d305      	bcc.n	8008f0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f04:	69fa      	ldr	r2, [r7, #28]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d903      	bls.n	8008f12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f10:	e0e8      	b.n	80090e4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2200      	movs	r2, #0
 8008f16:	461c      	mov	r4, r3
 8008f18:	4615      	mov	r5, r2
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	f04f 0300 	mov.w	r3, #0
 8008f22:	022b      	lsls	r3, r5, #8
 8008f24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f28:	0222      	lsls	r2, r4, #8
 8008f2a:	68f9      	ldr	r1, [r7, #12]
 8008f2c:	6849      	ldr	r1, [r1, #4]
 8008f2e:	0849      	lsrs	r1, r1, #1
 8008f30:	2000      	movs	r0, #0
 8008f32:	4688      	mov	r8, r1
 8008f34:	4681      	mov	r9, r0
 8008f36:	eb12 0a08 	adds.w	sl, r2, r8
 8008f3a:	eb43 0b09 	adc.w	fp, r3, r9
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	4659      	mov	r1, fp
 8008f50:	f7f7 fe9a 	bl	8000c88 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4613      	mov	r3, r2
 8008f5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f62:	d308      	bcc.n	8008f76 <UART_SetConfig+0x3de>
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6a:	d204      	bcs.n	8008f76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	60da      	str	r2, [r3, #12]
 8008f74:	e0b6      	b.n	80090e4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008f7c:	e0b2      	b.n	80090e4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f86:	d15e      	bne.n	8009046 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d828      	bhi.n	8008fe2 <UART_SetConfig+0x44a>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <UART_SetConfig+0x400>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fc5 	.word	0x08008fc5
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	08008fe3 	.word	0x08008fe3
 8008fa8:	08008fd3 	.word	0x08008fd3
 8008fac:	08008fe3 	.word	0x08008fe3
 8008fb0:	08008fe3 	.word	0x08008fe3
 8008fb4:	08008fe3 	.word	0x08008fe3
 8008fb8:	08008fdb 	.word	0x08008fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fc ffee 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8008fc0:	61f8      	str	r0, [r7, #28]
        break;
 8008fc2:	e014      	b.n	8008fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc4:	f7fd f800 	bl	8005fc8 <HAL_RCC_GetPCLK2Freq>
 8008fc8:	61f8      	str	r0, [r7, #28]
        break;
 8008fca:	e010      	b.n	8008fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fcc:	4b4d      	ldr	r3, [pc, #308]	; (8009104 <UART_SetConfig+0x56c>)
 8008fce:	61fb      	str	r3, [r7, #28]
        break;
 8008fd0:	e00d      	b.n	8008fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fd2:	f7fc ff4b 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8008fd6:	61f8      	str	r0, [r7, #28]
        break;
 8008fd8:	e009      	b.n	8008fee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fde:	61fb      	str	r3, [r7, #28]
        break;
 8008fe0:	e005      	b.n	8008fee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d077      	beq.n	80090e4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	005a      	lsls	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	441a      	add	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	fbb2 f3f3 	udiv	r3, r2, r3
 8009008:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b0f      	cmp	r3, #15
 800900e:	d916      	bls.n	800903e <UART_SetConfig+0x4a6>
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009016:	d212      	bcs.n	800903e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f023 030f 	bic.w	r3, r3, #15
 8009020:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	085b      	lsrs	r3, r3, #1
 8009026:	b29b      	uxth	r3, r3
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	b29a      	uxth	r2, r3
 800902e:	8afb      	ldrh	r3, [r7, #22]
 8009030:	4313      	orrs	r3, r2
 8009032:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	8afa      	ldrh	r2, [r7, #22]
 800903a:	60da      	str	r2, [r3, #12]
 800903c:	e052      	b.n	80090e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009044:	e04e      	b.n	80090e4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800904a:	2b08      	cmp	r3, #8
 800904c:	d827      	bhi.n	800909e <UART_SetConfig+0x506>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <UART_SetConfig+0x4bc>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	08009079 	.word	0x08009079
 8009058:	08009081 	.word	0x08009081
 800905c:	08009089 	.word	0x08009089
 8009060:	0800909f 	.word	0x0800909f
 8009064:	0800908f 	.word	0x0800908f
 8009068:	0800909f 	.word	0x0800909f
 800906c:	0800909f 	.word	0x0800909f
 8009070:	0800909f 	.word	0x0800909f
 8009074:	08009097 	.word	0x08009097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009078:	f7fc ff90 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 800907c:	61f8      	str	r0, [r7, #28]
        break;
 800907e:	e014      	b.n	80090aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009080:	f7fc ffa2 	bl	8005fc8 <HAL_RCC_GetPCLK2Freq>
 8009084:	61f8      	str	r0, [r7, #28]
        break;
 8009086:	e010      	b.n	80090aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <UART_SetConfig+0x56c>)
 800908a:	61fb      	str	r3, [r7, #28]
        break;
 800908c:	e00d      	b.n	80090aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800908e:	f7fc feed 	bl	8005e6c <HAL_RCC_GetSysClockFreq>
 8009092:	61f8      	str	r0, [r7, #28]
        break;
 8009094:	e009      	b.n	80090aa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800909a:	61fb      	str	r3, [r7, #28]
        break;
 800909c:	e005      	b.n	80090aa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80090a8:	bf00      	nop
    }

    if (pclk != 0U)
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d019      	beq.n	80090e4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	085a      	lsrs	r2, r3, #1
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	441a      	add	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b0f      	cmp	r3, #15
 80090c8:	d909      	bls.n	80090de <UART_SetConfig+0x546>
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090d0:	d205      	bcs.n	80090de <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60da      	str	r2, [r3, #12]
 80090dc:	e002      	b.n	80090e4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80090f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3728      	adds	r7, #40	; 0x28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090fe:	bf00      	nop
 8009100:	40008000 	.word	0x40008000
 8009104:	00f42400 	.word	0x00f42400

08009108 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00a      	beq.n	8009132 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	430a      	orrs	r2, r1
 8009130:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00a      	beq.n	8009176 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00a      	beq.n	8009198 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	f003 0310 	and.w	r3, r3, #16
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00a      	beq.n	80091ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	f003 0320 	and.w	r3, r3, #32
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00a      	beq.n	80091dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01a      	beq.n	800921e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009206:	d10a      	bne.n	800921e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	605a      	str	r2, [r3, #4]
  }
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af02      	add	r7, sp, #8
 8009252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800925c:	f7f9 fd7c 	bl	8002d58 <HAL_GetTick>
 8009260:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b08      	cmp	r3, #8
 800926e:	d10e      	bne.n	800928e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f82d 	bl	80092de <UART_WaitOnFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e023      	b.n	80092d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b04      	cmp	r3, #4
 800929a:	d10e      	bne.n	80092ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800929c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f817 	bl	80092de <UART_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e00d      	b.n	80092d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2220      	movs	r2, #32
 80092be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3710      	adds	r7, #16
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b09c      	sub	sp, #112	; 0x70
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	603b      	str	r3, [r7, #0]
 80092ea:	4613      	mov	r3, r2
 80092ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ee:	e0a5      	b.n	800943c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	f000 80a1 	beq.w	800943c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092fa:	f7f9 fd2d 	bl	8002d58 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009306:	429a      	cmp	r2, r3
 8009308:	d302      	bcc.n	8009310 <UART_WaitOnFlagUntilTimeout+0x32>
 800930a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800930c:	2b00      	cmp	r3, #0
 800930e:	d13e      	bne.n	800938e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800931e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009324:	667b      	str	r3, [r7, #100]	; 0x64
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800932e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009330:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800933c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e6      	bne.n	8009310 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3308      	adds	r3, #8
 8009348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	f023 0301 	bic.w	r3, r3, #1
 8009358:	663b      	str	r3, [r7, #96]	; 0x60
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	3308      	adds	r3, #8
 8009360:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009362:	64ba      	str	r2, [r7, #72]	; 0x48
 8009364:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e5      	bne.n	8009342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2220      	movs	r2, #32
 800937a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2220      	movs	r2, #32
 8009380:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e067      	b.n	800945e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0304 	and.w	r3, r3, #4
 8009398:	2b00      	cmp	r3, #0
 800939a:	d04f      	beq.n	800943c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093aa:	d147      	bne.n	800943c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
 80093d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e6      	bne.n	80093b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	613b      	str	r3, [r7, #16]
   return(result);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f023 0301 	bic.w	r3, r3, #1
 80093fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3308      	adds	r3, #8
 8009406:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009408:	623a      	str	r2, [r7, #32]
 800940a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	69f9      	ldr	r1, [r7, #28]
 800940e:	6a3a      	ldr	r2, [r7, #32]
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	61bb      	str	r3, [r7, #24]
   return(result);
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e5      	bne.n	80093e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2220      	movs	r2, #32
 8009420:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2220      	movs	r2, #32
 8009426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2220      	movs	r2, #32
 800942c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e010      	b.n	800945e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69da      	ldr	r2, [r3, #28]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4013      	ands	r3, r2
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	429a      	cmp	r2, r3
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	461a      	mov	r2, r3
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	429a      	cmp	r2, r3
 8009458:	f43f af4a 	beq.w	80092f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3770      	adds	r7, #112	; 0x70
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009466:	b480      	push	{r7}
 8009468:	b095      	sub	sp, #84	; 0x54
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948c:	643b      	str	r3, [r7, #64]	; 0x40
 800948e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e6      	bne.n	800946e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	f023 0301 	bic.w	r3, r3, #1
 80094b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3308      	adds	r3, #8
 80094be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e5      	bne.n	80094a0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d118      	bne.n	800950e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f023 0310 	bic.w	r3, r3, #16
 80094f0:	647b      	str	r3, [r7, #68]	; 0x44
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094fa:	61bb      	str	r3, [r7, #24]
 80094fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6979      	ldr	r1, [r7, #20]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e6      	bne.n	80094dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009520:	bf00      	nop
 8009522:	3754      	adds	r7, #84	; 0x54
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fb0e 	bl	8008b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	e853 3f00 	ldrex	r3, [r3]
 800956c:	60bb      	str	r3, [r7, #8]
   return(result);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	61bb      	str	r3, [r7, #24]
 8009580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	6979      	ldr	r1, [r7, #20]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	e841 2300 	strex	r3, r2, [r1]
 800958a:	613b      	str	r3, [r7, #16]
   return(result);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e6      	bne.n	8009560 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2220      	movs	r2, #32
 8009596:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7ff fada 	bl	8008b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095a4:	bf00      	nop
 80095a6:	3720      	adds	r7, #32
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <get_fbin>:
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d012      	beq.n	80095fa <get_fbin+0x3a>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00e      	beq.n	80095fa <get_fbin+0x3a>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00a      	beq.n	80095fa <get_fbin+0x3a>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80095ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	d902      	bls.n	80095fa <get_fbin+0x3a>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <get_fbin+0x3e>
 80095fa:	2300      	movs	r3, #0
 80095fc:	e097      	b.n	800972e <get_fbin+0x16e>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b20      	cmp	r3, #32
 8009602:	d01b      	beq.n	800963c <get_fbin+0x7c>
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b40      	cmp	r3, #64	; 0x40
 8009608:	d018      	beq.n	800963c <get_fbin+0x7c>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b80      	cmp	r3, #128	; 0x80
 800960e:	d015      	beq.n	800963c <get_fbin+0x7c>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009616:	d011      	beq.n	800963c <get_fbin+0x7c>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800961e:	d00d      	beq.n	800963c <get_fbin+0x7c>
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009626:	d009      	beq.n	800963c <get_fbin+0x7c>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800962e:	d005      	beq.n	800963c <get_fbin+0x7c>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009636:	d001      	beq.n	800963c <get_fbin+0x7c>
 8009638:	2300      	movs	r3, #0
 800963a:	e078      	b.n	800972e <get_fbin+0x16e>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	2b0c      	cmp	r3, #12
 8009642:	d102      	bne.n	800964a <get_fbin+0x8a>
 8009644:	4b3d      	ldr	r3, [pc, #244]	; (800973c <get_fbin+0x17c>)
 8009646:	617b      	str	r3, [r7, #20]
 8009648:	e016      	b.n	8009678 <get_fbin+0xb8>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b0a      	cmp	r3, #10
 8009650:	d102      	bne.n	8009658 <get_fbin+0x98>
 8009652:	4b3b      	ldr	r3, [pc, #236]	; (8009740 <get_fbin+0x180>)
 8009654:	617b      	str	r3, [r7, #20]
 8009656:	e00f      	b.n	8009678 <get_fbin+0xb8>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b08      	cmp	r3, #8
 800965e:	d102      	bne.n	8009666 <get_fbin+0xa6>
 8009660:	4b38      	ldr	r3, [pc, #224]	; (8009744 <get_fbin+0x184>)
 8009662:	617b      	str	r3, [r7, #20]
 8009664:	e008      	b.n	8009678 <get_fbin+0xb8>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b06      	cmp	r3, #6
 800966c:	d102      	bne.n	8009674 <get_fbin+0xb4>
 800966e:	4b36      	ldr	r3, [pc, #216]	; (8009748 <get_fbin+0x188>)
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e001      	b.n	8009678 <get_fbin+0xb8>
 8009674:	2300      	movs	r3, #0
 8009676:	e05a      	b.n	800972e <get_fbin+0x16e>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	edd3 7a05 	vldr	s15, [r3, #20]
 800967e:	ed97 7a05 	vldr	s14, [r7, #20]
 8009682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009686:	edc7 7a04 	vstr	s15, [r7, #16]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80096a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80096aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	edc3 7a01 	vstr	s15, [r3, #4]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80096ba:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800974c <get_fbin+0x18c>
 80096be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80096c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c6:	d505      	bpl.n	80096d4 <get_fbin+0x114>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f04f 0200 	mov.w	r2, #0
 80096ce:	605a      	str	r2, [r3, #4]
 80096d0:	2300      	movs	r3, #0
 80096d2:	e02c      	b.n	800972e <get_fbin+0x16e>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80096f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	ee07 3a90 	vmov	s15, r3
 80096fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	edc3 7a02 	vstr	s15, [r3, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009712:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8009750 <get_fbin+0x190>
 8009716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	db05      	blt.n	800972c <get_fbin+0x16c>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f04f 0200 	mov.w	r2, #0
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <get_fbin+0x16e>
 800972c:	2301      	movs	r3, #1
 800972e:	4618      	mov	r0, r3
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	41480000 	.word	0x41480000
 8009740:	41280000 	.word	0x41280000
 8009744:	41080000 	.word	0x41080000
 8009748:	40d00000 	.word	0x40d00000
 800974c:	453b8000 	.word	0x453b8000
 8009750:	42480000 	.word	0x42480000

08009754 <do_FFT>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	b099      	sub	sp, #100	; 0x64
 800975a:	af00      	add	r7, sp, #0
 800975c:	6278      	str	r0, [r7, #36]	; 0x24
 800975e:	6239      	str	r1, [r7, #32]
 8009760:	61fa      	str	r2, [r7, #28]
 8009762:	466b      	mov	r3, sp
 8009764:	461e      	mov	r6, r3
 8009766:	6a39      	ldr	r1, [r7, #32]
 8009768:	460b      	mov	r3, r1
 800976a:	3b01      	subs	r3, #1
 800976c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800976e:	2300      	movs	r3, #0
 8009770:	460c      	mov	r4, r1
 8009772:	461d      	mov	r5, r3
 8009774:	f04f 0200 	mov.w	r2, #0
 8009778:	f04f 0300 	mov.w	r3, #0
 800977c:	016b      	lsls	r3, r5, #5
 800977e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8009782:	0162      	lsls	r2, r4, #5
 8009784:	2300      	movs	r3, #0
 8009786:	6139      	str	r1, [r7, #16]
 8009788:	617b      	str	r3, [r7, #20]
 800978a:	f04f 0200 	mov.w	r2, #0
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8009796:	4628      	mov	r0, r5
 8009798:	0143      	lsls	r3, r0, #5
 800979a:	4620      	mov	r0, r4
 800979c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80097a0:	4620      	mov	r0, r4
 80097a2:	0142      	lsls	r2, r0, #5
 80097a4:	008b      	lsls	r3, r1, #2
 80097a6:	3307      	adds	r3, #7
 80097a8:	08db      	lsrs	r3, r3, #3
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	ebad 0d03 	sub.w	sp, sp, r3
 80097b0:	466b      	mov	r3, sp
 80097b2:	3303      	adds	r3, #3
 80097b4:	089b      	lsrs	r3, r3, #2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	653b      	str	r3, [r7, #80]	; 0x50
 80097ba:	6a39      	ldr	r1, [r7, #32]
 80097bc:	460b      	mov	r3, r1
 80097be:	3b01      	subs	r3, #1
 80097c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c2:	2300      	movs	r3, #0
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	f04f 0200 	mov.w	r2, #0
 80097cc:	f04f 0300 	mov.w	r3, #0
 80097d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80097d4:	4628      	mov	r0, r5
 80097d6:	0143      	lsls	r3, r0, #5
 80097d8:	4620      	mov	r0, r4
 80097da:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80097de:	4620      	mov	r0, r4
 80097e0:	0142      	lsls	r2, r0, #5
 80097e2:	2300      	movs	r3, #0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097f4:	4628      	mov	r0, r5
 80097f6:	0143      	lsls	r3, r0, #5
 80097f8:	4620      	mov	r0, r4
 80097fa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80097fe:	4620      	mov	r0, r4
 8009800:	0142      	lsls	r2, r0, #5
 8009802:	008b      	lsls	r3, r1, #2
 8009804:	3307      	adds	r3, #7
 8009806:	08db      	lsrs	r3, r3, #3
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	ebad 0d03 	sub.w	sp, sp, r3
 800980e:	466b      	mov	r3, sp
 8009810:	3303      	adds	r3, #3
 8009812:	089b      	lsrs	r3, r3, #2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	64bb      	str	r3, [r7, #72]	; 0x48
 8009818:	6a3b      	ldr	r3, [r7, #32]
 800981a:	0859      	lsrs	r1, r3, #1
 800981c:	460b      	mov	r3, r1
 800981e:	3b01      	subs	r3, #1
 8009820:	647b      	str	r3, [r7, #68]	; 0x44
 8009822:	2300      	movs	r3, #0
 8009824:	468a      	mov	sl, r1
 8009826:	469b      	mov	fp, r3
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	f04f 0300 	mov.w	r3, #0
 8009830:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8009834:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8009838:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800983c:	2300      	movs	r3, #0
 800983e:	4688      	mov	r8, r1
 8009840:	4699      	mov	r9, r3
 8009842:	f04f 0200 	mov.w	r2, #0
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800984e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8009852:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8009856:	008b      	lsls	r3, r1, #2
 8009858:	3307      	adds	r3, #7
 800985a:	08db      	lsrs	r3, r3, #3
 800985c:	00db      	lsls	r3, r3, #3
 800985e:	ebad 0d03 	sub.w	sp, sp, r3
 8009862:	466b      	mov	r3, sp
 8009864:	3303      	adds	r3, #3
 8009866:	089b      	lsrs	r3, r3, #2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	643b      	str	r3, [r7, #64]	; 0x40
 800986c:	2300      	movs	r3, #0
 800986e:	657b      	str	r3, [r7, #84]	; 0x54
 8009870:	e016      	b.n	80098a0 <do_FFT+0x14c>
 8009872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	4413      	add	r3, r2
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	edd3 7a00 	vldr	s15, [r3]
 800988a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800988e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	edc3 7a00 	vstr	s15, [r3]
 800989a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800989c:	3301      	adds	r3, #1
 800989e:	657b      	str	r3, [r7, #84]	; 0x54
 80098a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a2:	6a3a      	ldr	r2, [r7, #32]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d8e4      	bhi.n	8009872 <do_FFT+0x11e>
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f99a 	bl	8009bec <arm_rfft_fast_init_f32>
 80098b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80098bc:	2300      	movs	r3, #0
 80098be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80098c2:	f000 fa77 	bl	8009db4 <arm_rfft_fast_f32>
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	085b      	lsrs	r3, r3, #1
 80098ca:	461a      	mov	r2, r3
 80098cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80098d0:	f000 fe4e 	bl	800a570 <arm_cmplx_mag_f32>
 80098d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	0859      	lsrs	r1, r3, #1
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	f103 0210 	add.w	r2, r3, #16
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	3314      	adds	r3, #20
 80098ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80098ec:	f000 f84a 	bl	8009984 <arm_max_f32>
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	edc3 7a03 	vstr	s15, [r3, #12]
 800990c:	2300      	movs	r3, #0
 800990e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009910:	e008      	b.n	8009924 <do_FFT+0x1d0>
 8009912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009918:	4413      	add	r3, r2
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009920:	3301      	adds	r3, #1
 8009922:	65bb      	str	r3, [r7, #88]	; 0x58
 8009924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009926:	6a3a      	ldr	r2, [r7, #32]
 8009928:	429a      	cmp	r2, r3
 800992a:	d8f2      	bhi.n	8009912 <do_FFT+0x1be>
 800992c:	46b5      	mov	sp, r6
 800992e:	bf00      	nop
 8009930:	3764      	adds	r7, #100	; 0x64
 8009932:	46bd      	mov	sp, r7
 8009934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009938 <start_FFT>:
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	4619      	mov	r1, r3
 800994c:	68b8      	ldr	r0, [r7, #8]
 800994e:	f7ff fe37 	bl	80095c0 <get_fbin>
 8009952:	6178      	str	r0, [r7, #20]
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d10c      	bne.n	8009974 <start_FFT+0x3c>
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4619      	mov	r1, r3
 8009966:	f7ff fef5 	bl	8009754 <do_FFT>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	2301      	movs	r3, #1
 8009972:	e003      	b.n	800997c <start_FFT+0x44>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <arm_max_f32>:
 8009984:	f101 3cff 	add.w	ip, r1, #4294967295
 8009988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800998a:	4607      	mov	r7, r0
 800998c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8009990:	ecf7 7a01 	vldmia	r7!, {s15}
 8009994:	d060      	beq.n	8009a58 <arm_max_f32+0xd4>
 8009996:	2400      	movs	r4, #0
 8009998:	3014      	adds	r0, #20
 800999a:	4625      	mov	r5, r4
 800999c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80099a0:	ed10 7a04 	vldr	s14, [r0, #-16]
 80099a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ac:	bf48      	it	mi
 80099ae:	eef0 7a47 	vmovmi.f32	s15, s14
 80099b2:	ed10 7a03 	vldr	s14, [r0, #-12]
 80099b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099ba:	bf48      	it	mi
 80099bc:	1c65      	addmi	r5, r4, #1
 80099be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c2:	bf48      	it	mi
 80099c4:	eef0 7a47 	vmovmi.f32	s15, s14
 80099c8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80099cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099d0:	bf48      	it	mi
 80099d2:	1ca5      	addmi	r5, r4, #2
 80099d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d8:	bf48      	it	mi
 80099da:	eef0 7a47 	vmovmi.f32	s15, s14
 80099de:	ed10 7a01 	vldr	s14, [r0, #-4]
 80099e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099e6:	bf48      	it	mi
 80099e8:	1ce5      	addmi	r5, r4, #3
 80099ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ee:	f104 0404 	add.w	r4, r4, #4
 80099f2:	bf44      	itt	mi
 80099f4:	eef0 7a47 	vmovmi.f32	s15, s14
 80099f8:	4625      	movmi	r5, r4
 80099fa:	42a6      	cmp	r6, r4
 80099fc:	f100 0010 	add.w	r0, r0, #16
 8009a00:	d1ce      	bne.n	80099a0 <arm_max_f32+0x1c>
 8009a02:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 8009a06:	f01c 0003 	ands.w	r0, ip, #3
 8009a0a:	d021      	beq.n	8009a50 <arm_max_f32+0xcc>
 8009a0c:	ed97 7a00 	vldr	s14, [r7]
 8009a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a18:	bfc4      	itt	gt
 8009a1a:	eef0 7a47 	vmovgt.f32	s15, s14
 8009a1e:	1a0d      	subgt	r5, r1, r0
 8009a20:	3801      	subs	r0, #1
 8009a22:	d015      	beq.n	8009a50 <arm_max_f32+0xcc>
 8009a24:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a30:	bf44      	itt	mi
 8009a32:	eef0 7a47 	vmovmi.f32	s15, s14
 8009a36:	1a0d      	submi	r5, r1, r0
 8009a38:	2801      	cmp	r0, #1
 8009a3a:	d009      	beq.n	8009a50 <arm_max_f32+0xcc>
 8009a3c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a48:	bfc4      	itt	gt
 8009a4a:	eef0 7a47 	vmovgt.f32	s15, s14
 8009a4e:	4665      	movgt	r5, ip
 8009a50:	edc2 7a00 	vstr	s15, [r2]
 8009a54:	601d      	str	r5, [r3, #0]
 8009a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a58:	4675      	mov	r5, lr
 8009a5a:	e7d4      	b.n	8009a06 <arm_max_f32+0x82>

08009a5c <arm_rfft_32_fast_init_f32>:
 8009a5c:	b178      	cbz	r0, 8009a7e <arm_rfft_32_fast_init_f32+0x22>
 8009a5e:	b430      	push	{r4, r5}
 8009a60:	4908      	ldr	r1, [pc, #32]	; (8009a84 <arm_rfft_32_fast_init_f32+0x28>)
 8009a62:	4a09      	ldr	r2, [pc, #36]	; (8009a88 <arm_rfft_32_fast_init_f32+0x2c>)
 8009a64:	2310      	movs	r3, #16
 8009a66:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009a6a:	8003      	strh	r3, [r0, #0]
 8009a6c:	2520      	movs	r5, #32
 8009a6e:	2414      	movs	r4, #20
 8009a70:	4b06      	ldr	r3, [pc, #24]	; (8009a8c <arm_rfft_32_fast_init_f32+0x30>)
 8009a72:	8205      	strh	r5, [r0, #16]
 8009a74:	8184      	strh	r4, [r0, #12]
 8009a76:	6143      	str	r3, [r0, #20]
 8009a78:	bc30      	pop	{r4, r5}
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	4770      	bx	lr
 8009a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a82:	4770      	bx	lr
 8009a84:	0800ece8 	.word	0x0800ece8
 8009a88:	08013620 	.word	0x08013620
 8009a8c:	0801c3a0 	.word	0x0801c3a0

08009a90 <arm_rfft_64_fast_init_f32>:
 8009a90:	b178      	cbz	r0, 8009ab2 <arm_rfft_64_fast_init_f32+0x22>
 8009a92:	b430      	push	{r4, r5}
 8009a94:	4908      	ldr	r1, [pc, #32]	; (8009ab8 <arm_rfft_64_fast_init_f32+0x28>)
 8009a96:	4a09      	ldr	r2, [pc, #36]	; (8009abc <arm_rfft_64_fast_init_f32+0x2c>)
 8009a98:	2320      	movs	r3, #32
 8009a9a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009a9e:	8003      	strh	r3, [r0, #0]
 8009aa0:	2540      	movs	r5, #64	; 0x40
 8009aa2:	2430      	movs	r4, #48	; 0x30
 8009aa4:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <arm_rfft_64_fast_init_f32+0x30>)
 8009aa6:	8205      	strh	r5, [r0, #16]
 8009aa8:	8184      	strh	r4, [r0, #12]
 8009aaa:	6143      	str	r3, [r0, #20]
 8009aac:	bc30      	pop	{r4, r5}
 8009aae:	2000      	movs	r0, #0
 8009ab0:	4770      	bx	lr
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	4770      	bx	lr
 8009ab8:	08010e40 	.word	0x08010e40
 8009abc:	08017ea0 	.word	0x08017ea0
 8009ac0:	08020c20 	.word	0x08020c20

08009ac4 <arm_rfft_256_fast_init_f32>:
 8009ac4:	b180      	cbz	r0, 8009ae8 <arm_rfft_256_fast_init_f32+0x24>
 8009ac6:	b430      	push	{r4, r5}
 8009ac8:	4909      	ldr	r1, [pc, #36]	; (8009af0 <arm_rfft_256_fast_init_f32+0x2c>)
 8009aca:	4a0a      	ldr	r2, [pc, #40]	; (8009af4 <arm_rfft_256_fast_init_f32+0x30>)
 8009acc:	2380      	movs	r3, #128	; 0x80
 8009ace:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009ad2:	8003      	strh	r3, [r0, #0]
 8009ad4:	f44f 7580 	mov.w	r5, #256	; 0x100
 8009ad8:	24d0      	movs	r4, #208	; 0xd0
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <arm_rfft_256_fast_init_f32+0x34>)
 8009adc:	8205      	strh	r5, [r0, #16]
 8009ade:	8184      	strh	r4, [r0, #12]
 8009ae0:	6143      	str	r3, [r0, #20]
 8009ae2:	bc30      	pop	{r4, r5}
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	4770      	bx	lr
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	0800eb48 	.word	0x0800eb48
 8009af4:	08013220 	.word	0x08013220
 8009af8:	0801bfa0 	.word	0x0801bfa0

08009afc <arm_rfft_512_fast_init_f32>:
 8009afc:	b190      	cbz	r0, 8009b24 <arm_rfft_512_fast_init_f32+0x28>
 8009afe:	b430      	push	{r4, r5}
 8009b00:	490a      	ldr	r1, [pc, #40]	; (8009b2c <arm_rfft_512_fast_init_f32+0x30>)
 8009b02:	4a0b      	ldr	r2, [pc, #44]	; (8009b30 <arm_rfft_512_fast_init_f32+0x34>)
 8009b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b08:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b0c:	8003      	strh	r3, [r0, #0]
 8009b0e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8009b12:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8009b16:	4b07      	ldr	r3, [pc, #28]	; (8009b34 <arm_rfft_512_fast_init_f32+0x38>)
 8009b18:	8205      	strh	r5, [r0, #16]
 8009b1a:	8184      	strh	r4, [r0, #12]
 8009b1c:	6143      	str	r3, [r0, #20]
 8009b1e:	bc30      	pop	{r4, r5}
 8009b20:	2000      	movs	r0, #0
 8009b22:	4770      	bx	lr
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	08010ad0 	.word	0x08010ad0
 8009b30:	080176a0 	.word	0x080176a0
 8009b34:	08020420 	.word	0x08020420

08009b38 <arm_rfft_1024_fast_init_f32>:
 8009b38:	b190      	cbz	r0, 8009b60 <arm_rfft_1024_fast_init_f32+0x28>
 8009b3a:	b430      	push	{r4, r5}
 8009b3c:	490a      	ldr	r1, [pc, #40]	; (8009b68 <arm_rfft_1024_fast_init_f32+0x30>)
 8009b3e:	4a0b      	ldr	r2, [pc, #44]	; (8009b6c <arm_rfft_1024_fast_init_f32+0x34>)
 8009b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b44:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b48:	8003      	strh	r3, [r0, #0]
 8009b4a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8009b4e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8009b52:	4b07      	ldr	r3, [pc, #28]	; (8009b70 <arm_rfft_1024_fast_init_f32+0x38>)
 8009b54:	8205      	strh	r5, [r0, #16]
 8009b56:	8184      	strh	r4, [r0, #12]
 8009b58:	6143      	str	r3, [r0, #20]
 8009b5a:	bc30      	pop	{r4, r5}
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4770      	bx	lr
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	08010ea0 	.word	0x08010ea0
 8009b6c:	08017fa0 	.word	0x08017fa0
 8009b70:	08018fa0 	.word	0x08018fa0

08009b74 <arm_rfft_2048_fast_init_f32>:
 8009b74:	b190      	cbz	r0, 8009b9c <arm_rfft_2048_fast_init_f32+0x28>
 8009b76:	b430      	push	{r4, r5}
 8009b78:	490a      	ldr	r1, [pc, #40]	; (8009ba4 <arm_rfft_2048_fast_init_f32+0x30>)
 8009b7a:	4a0b      	ldr	r2, [pc, #44]	; (8009ba8 <arm_rfft_2048_fast_init_f32+0x34>)
 8009b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b80:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009b84:	8003      	strh	r3, [r0, #0]
 8009b86:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8009b8a:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8009b8e:	4b07      	ldr	r3, [pc, #28]	; (8009bac <arm_rfft_2048_fast_init_f32+0x38>)
 8009b90:	8205      	strh	r5, [r0, #16]
 8009b92:	8184      	strh	r4, [r0, #12]
 8009b94:	6143      	str	r3, [r0, #20]
 8009b96:	bc30      	pop	{r4, r5}
 8009b98:	2000      	movs	r0, #0
 8009b9a:	4770      	bx	lr
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	0800dd38 	.word	0x0800dd38
 8009ba8:	08011220 	.word	0x08011220
 8009bac:	08019fa0 	.word	0x08019fa0

08009bb0 <arm_rfft_4096_fast_init_f32>:
 8009bb0:	b190      	cbz	r0, 8009bd8 <arm_rfft_4096_fast_init_f32+0x28>
 8009bb2:	b430      	push	{r4, r5}
 8009bb4:	490a      	ldr	r1, [pc, #40]	; (8009be0 <arm_rfft_4096_fast_init_f32+0x30>)
 8009bb6:	4a0b      	ldr	r2, [pc, #44]	; (8009be4 <arm_rfft_4096_fast_init_f32+0x34>)
 8009bb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bbc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8009bc0:	8003      	strh	r3, [r0, #0]
 8009bc2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8009bc6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8009bca:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <arm_rfft_4096_fast_init_f32+0x38>)
 8009bcc:	8205      	strh	r5, [r0, #16]
 8009bce:	8184      	strh	r4, [r0, #12]
 8009bd0:	6143      	str	r3, [r0, #20]
 8009bd2:	bc30      	pop	{r4, r5}
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	4770      	bx	lr
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	0800ed10 	.word	0x0800ed10
 8009be4:	080136a0 	.word	0x080136a0
 8009be8:	0801c420 	.word	0x0801c420

08009bec <arm_rfft_fast_init_f32>:
 8009bec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009bf0:	d01f      	beq.n	8009c32 <arm_rfft_fast_init_f32+0x46>
 8009bf2:	d90b      	bls.n	8009c0c <arm_rfft_fast_init_f32+0x20>
 8009bf4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8009bf8:	d019      	beq.n	8009c2e <arm_rfft_fast_init_f32+0x42>
 8009bfa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8009bfe:	d012      	beq.n	8009c26 <arm_rfft_fast_init_f32+0x3a>
 8009c00:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009c04:	d00d      	beq.n	8009c22 <arm_rfft_fast_init_f32+0x36>
 8009c06:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0a:	4770      	bx	lr
 8009c0c:	2940      	cmp	r1, #64	; 0x40
 8009c0e:	d00c      	beq.n	8009c2a <arm_rfft_fast_init_f32+0x3e>
 8009c10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009c14:	d003      	beq.n	8009c1e <arm_rfft_fast_init_f32+0x32>
 8009c16:	2920      	cmp	r1, #32
 8009c18:	d1f5      	bne.n	8009c06 <arm_rfft_fast_init_f32+0x1a>
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <arm_rfft_fast_init_f32+0x4c>)
 8009c1c:	4718      	bx	r3
 8009c1e:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <arm_rfft_fast_init_f32+0x50>)
 8009c20:	4718      	bx	r3
 8009c22:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <arm_rfft_fast_init_f32+0x54>)
 8009c24:	4718      	bx	r3
 8009c26:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <arm_rfft_fast_init_f32+0x58>)
 8009c28:	4718      	bx	r3
 8009c2a:	4b07      	ldr	r3, [pc, #28]	; (8009c48 <arm_rfft_fast_init_f32+0x5c>)
 8009c2c:	e7f6      	b.n	8009c1c <arm_rfft_fast_init_f32+0x30>
 8009c2e:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <arm_rfft_fast_init_f32+0x60>)
 8009c30:	e7f4      	b.n	8009c1c <arm_rfft_fast_init_f32+0x30>
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <arm_rfft_fast_init_f32+0x64>)
 8009c34:	e7f2      	b.n	8009c1c <arm_rfft_fast_init_f32+0x30>
 8009c36:	bf00      	nop
 8009c38:	08009a5d 	.word	0x08009a5d
 8009c3c:	08009ac5 	.word	0x08009ac5
 8009c40:	08009b39 	.word	0x08009b39
 8009c44:	08009bb1 	.word	0x08009bb1
 8009c48:	08009a91 	.word	0x08009a91
 8009c4c:	08009b75 	.word	0x08009b75
 8009c50:	08009afd 	.word	0x08009afd

08009c54 <stage_rfft_f32>:
 8009c54:	b410      	push	{r4}
 8009c56:	edd1 7a00 	vldr	s15, [r1]
 8009c5a:	ed91 7a01 	vldr	s14, [r1, #4]
 8009c5e:	8804      	ldrh	r4, [r0, #0]
 8009c60:	6940      	ldr	r0, [r0, #20]
 8009c62:	ee37 7a07 	vadd.f32	s14, s14, s14
 8009c66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c6a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009c6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c76:	3c01      	subs	r4, #1
 8009c78:	ee26 7a84 	vmul.f32	s14, s13, s8
 8009c7c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009c80:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8009c84:	ed82 7a00 	vstr	s14, [r2]
 8009c88:	edc2 7a01 	vstr	s15, [r2, #4]
 8009c8c:	3010      	adds	r0, #16
 8009c8e:	3210      	adds	r2, #16
 8009c90:	3b08      	subs	r3, #8
 8009c92:	3110      	adds	r1, #16
 8009c94:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009c98:	ed93 7a02 	vldr	s14, [r3, #8]
 8009c9c:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009ca0:	edd3 4a03 	vldr	s9, [r3, #12]
 8009ca4:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009ca8:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009cac:	ee77 5a45 	vsub.f32	s11, s14, s10
 8009cb0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009cb4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009cb8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009cbc:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009cc0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009cc4:	ee37 7a23 	vadd.f32	s14, s14, s7
 8009cc8:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009ccc:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009cd0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009cd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009cd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009cdc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009ce0:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009ce4:	3c01      	subs	r4, #1
 8009ce6:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009cea:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009cee:	f1a3 0308 	sub.w	r3, r3, #8
 8009cf2:	f101 0108 	add.w	r1, r1, #8
 8009cf6:	f100 0008 	add.w	r0, r0, #8
 8009cfa:	f102 0208 	add.w	r2, r2, #8
 8009cfe:	d1c9      	bne.n	8009c94 <stage_rfft_f32+0x40>
 8009d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop

08009d08 <merge_rfft_f32>:
 8009d08:	b410      	push	{r4}
 8009d0a:	edd1 7a00 	vldr	s15, [r1]
 8009d0e:	edd1 6a01 	vldr	s13, [r1, #4]
 8009d12:	8804      	ldrh	r4, [r0, #0]
 8009d14:	6940      	ldr	r0, [r0, #20]
 8009d16:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d1e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8009d22:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009d26:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009d2a:	3c01      	subs	r4, #1
 8009d2c:	ed82 7a00 	vstr	s14, [r2]
 8009d30:	edc2 7a01 	vstr	s15, [r2, #4]
 8009d34:	b3dc      	cbz	r4, 8009dae <merge_rfft_f32+0xa6>
 8009d36:	00e3      	lsls	r3, r4, #3
 8009d38:	3b08      	subs	r3, #8
 8009d3a:	440b      	add	r3, r1
 8009d3c:	3010      	adds	r0, #16
 8009d3e:	3210      	adds	r2, #16
 8009d40:	3110      	adds	r1, #16
 8009d42:	ed11 5a02 	vldr	s10, [r1, #-8]
 8009d46:	ed93 7a02 	vldr	s14, [r3, #8]
 8009d4a:	ed50 6a02 	vldr	s13, [r0, #-8]
 8009d4e:	edd3 4a03 	vldr	s9, [r3, #12]
 8009d52:	ed51 7a01 	vldr	s15, [r1, #-4]
 8009d56:	ed10 6a01 	vldr	s12, [r0, #-4]
 8009d5a:	ee75 5a47 	vsub.f32	s11, s10, s14
 8009d5e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009d62:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8009d66:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8009d6a:	ee66 5a25 	vmul.f32	s11, s12, s11
 8009d6e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009d72:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009d76:	ee66 6a85 	vmul.f32	s13, s13, s10
 8009d7a:	ee26 6a05 	vmul.f32	s12, s12, s10
 8009d7e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009d82:	ee37 7a46 	vsub.f32	s14, s14, s12
 8009d86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d8a:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009d8e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8009d92:	3c01      	subs	r4, #1
 8009d94:	ed02 7a02 	vstr	s14, [r2, #-8]
 8009d98:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009d9c:	f1a3 0308 	sub.w	r3, r3, #8
 8009da0:	f101 0108 	add.w	r1, r1, #8
 8009da4:	f100 0008 	add.w	r0, r0, #8
 8009da8:	f102 0208 	add.w	r2, r2, #8
 8009dac:	d1c9      	bne.n	8009d42 <merge_rfft_f32+0x3a>
 8009dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <arm_rfft_fast_f32>:
 8009db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db8:	8a05      	ldrh	r5, [r0, #16]
 8009dba:	086d      	lsrs	r5, r5, #1
 8009dbc:	8005      	strh	r5, [r0, #0]
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	461d      	mov	r5, r3
 8009dc4:	b14b      	cbz	r3, 8009dda <arm_rfft_fast_f32+0x26>
 8009dc6:	f7ff ff9f 	bl	8009d08 <merge_rfft_f32>
 8009dca:	462a      	mov	r2, r5
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4620      	mov	r0, r4
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	f000 bb33 	b.w	800a440 <arm_cfft_f32>
 8009dda:	460f      	mov	r7, r1
 8009ddc:	461a      	mov	r2, r3
 8009dde:	2301      	movs	r3, #1
 8009de0:	f000 fb2e 	bl	800a440 <arm_cfft_f32>
 8009de4:	4632      	mov	r2, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	4620      	mov	r0, r4
 8009dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	f7ff bf31 	b.w	8009c54 <stage_rfft_f32>
 8009df2:	bf00      	nop

08009df4 <arm_cfft_radix8by2_f32>:
 8009df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df8:	ed2d 8b08 	vpush	{d8-d11}
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	4608      	mov	r0, r1
 8009e00:	f8b7 c000 	ldrh.w	ip, [r7]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	ea4f 015c 	mov.w	r1, ip, lsr #1
 8009e0a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8009e0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8009e12:	f000 80b0 	beq.w	8009f76 <arm_cfft_radix8by2_f32+0x182>
 8009e16:	008c      	lsls	r4, r1, #2
 8009e18:	3410      	adds	r4, #16
 8009e1a:	f100 0310 	add.w	r3, r0, #16
 8009e1e:	1906      	adds	r6, r0, r4
 8009e20:	3210      	adds	r2, #16
 8009e22:	4444      	add	r4, r8
 8009e24:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8009e28:	f108 0510 	add.w	r5, r8, #16
 8009e2c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8009e30:	ed55 2a03 	vldr	s5, [r5, #-12]
 8009e34:	ed54 4a04 	vldr	s9, [r4, #-16]
 8009e38:	ed14 4a03 	vldr	s8, [r4, #-12]
 8009e3c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009e40:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009e44:	ed53 3a04 	vldr	s7, [r3, #-16]
 8009e48:	ed15 0a02 	vldr	s0, [r5, #-8]
 8009e4c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8009e50:	ed56 6a04 	vldr	s13, [r6, #-16]
 8009e54:	ed16 3a03 	vldr	s6, [r6, #-12]
 8009e58:	ed13 7a03 	vldr	s14, [r3, #-12]
 8009e5c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8009e60:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009e64:	ed16 1a02 	vldr	s2, [r6, #-8]
 8009e68:	ed56 1a01 	vldr	s3, [r6, #-4]
 8009e6c:	ee73 ba82 	vadd.f32	s23, s7, s4
 8009e70:	ee37 ba22 	vadd.f32	s22, s14, s5
 8009e74:	ee76 9aa4 	vadd.f32	s19, s13, s9
 8009e78:	ee33 9a04 	vadd.f32	s18, s6, s8
 8009e7c:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8009e80:	ee75 aa00 	vadd.f32	s21, s10, s0
 8009e84:	ee37 aaa0 	vadd.f32	s20, s15, s1
 8009e88:	ee71 8a06 	vadd.f32	s17, s2, s12
 8009e8c:	ed43 ba04 	vstr	s23, [r3, #-16]
 8009e90:	ed03 ba03 	vstr	s22, [r3, #-12]
 8009e94:	ed43 aa02 	vstr	s21, [r3, #-8]
 8009e98:	ed03 aa01 	vstr	s20, [r3, #-4]
 8009e9c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009ea0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009ea4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009ea8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009eac:	ee37 7a62 	vsub.f32	s14, s14, s5
 8009eb0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009eb4:	ee34 4a43 	vsub.f32	s8, s8, s6
 8009eb8:	ed52 6a03 	vldr	s13, [r2, #-12]
 8009ebc:	ed12 3a04 	vldr	s6, [r2, #-16]
 8009ec0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8009ec4:	ee27 8a26 	vmul.f32	s16, s14, s13
 8009ec8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8009ecc:	ee23 2a83 	vmul.f32	s4, s7, s6
 8009ed0:	ee64 4a83 	vmul.f32	s9, s9, s6
 8009ed4:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8009ed8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8009edc:	ee64 6a26 	vmul.f32	s13, s8, s13
 8009ee0:	ee24 4a03 	vmul.f32	s8, s8, s6
 8009ee4:	ee37 7a63 	vsub.f32	s14, s14, s7
 8009ee8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009eec:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8009ef0:	ee32 3a08 	vadd.f32	s6, s4, s16
 8009ef4:	ed05 7a03 	vstr	s14, [r5, #-12]
 8009ef8:	ed05 3a04 	vstr	s6, [r5, #-16]
 8009efc:	ed04 4a04 	vstr	s8, [r4, #-16]
 8009f00:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009f04:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009f08:	ee76 6a41 	vsub.f32	s13, s12, s2
 8009f0c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8009f10:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8009f14:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009f18:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009f1c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009f20:	ee66 4a87 	vmul.f32	s9, s13, s14
 8009f24:	ee25 4a25 	vmul.f32	s8, s10, s11
 8009f28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009f2c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8009f30:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009f34:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009f38:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009f3c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009f40:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009f44:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8009f48:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009f4c:	3310      	adds	r3, #16
 8009f4e:	4563      	cmp	r3, ip
 8009f50:	ed45 5a02 	vstr	s11, [r5, #-8]
 8009f54:	f106 0610 	add.w	r6, r6, #16
 8009f58:	ed45 7a01 	vstr	s15, [r5, #-4]
 8009f5c:	f102 0210 	add.w	r2, r2, #16
 8009f60:	ed04 6a02 	vstr	s12, [r4, #-8]
 8009f64:	ed04 7a01 	vstr	s14, [r4, #-4]
 8009f68:	f105 0510 	add.w	r5, r5, #16
 8009f6c:	f104 0410 	add.w	r4, r4, #16
 8009f70:	f47f af5c 	bne.w	8009e2c <arm_cfft_radix8by2_f32+0x38>
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	b28c      	uxth	r4, r1
 8009f78:	4621      	mov	r1, r4
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	f000 fc1c 	bl	800a7b8 <arm_radix8_butterfly_f32>
 8009f80:	ecbd 8b08 	vpop	{d8-d11}
 8009f84:	4621      	mov	r1, r4
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4640      	mov	r0, r8
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f90:	f000 bc12 	b.w	800a7b8 <arm_radix8_butterfly_f32>

08009f94 <arm_cfft_radix8by4_f32>:
 8009f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f98:	ed2d 8b0a 	vpush	{d8-d12}
 8009f9c:	b08d      	sub	sp, #52	; 0x34
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	910b      	str	r1, [sp, #44]	; 0x2c
 8009fa2:	8801      	ldrh	r1, [r0, #0]
 8009fa4:	6842      	ldr	r2, [r0, #4]
 8009fa6:	900a      	str	r0, [sp, #40]	; 0x28
 8009fa8:	0849      	lsrs	r1, r1, #1
 8009faa:	008b      	lsls	r3, r1, #2
 8009fac:	18ee      	adds	r6, r5, r3
 8009fae:	18f0      	adds	r0, r6, r3
 8009fb0:	edd0 5a00 	vldr	s11, [r0]
 8009fb4:	edd5 7a00 	vldr	s15, [r5]
 8009fb8:	ed96 7a00 	vldr	s14, [r6]
 8009fbc:	edd0 3a01 	vldr	s7, [r0, #4]
 8009fc0:	ed96 4a01 	vldr	s8, [r6, #4]
 8009fc4:	ed95 5a01 	vldr	s10, [r5, #4]
 8009fc8:	9008      	str	r0, [sp, #32]
 8009fca:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8009fce:	18c7      	adds	r7, r0, r3
 8009fd0:	edd7 4a00 	vldr	s9, [r7]
 8009fd4:	ed97 3a01 	vldr	s6, [r7, #4]
 8009fd8:	9701      	str	r7, [sp, #4]
 8009fda:	ee77 6a06 	vadd.f32	s13, s14, s12
 8009fde:	462c      	mov	r4, r5
 8009fe0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8009fe4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009fe8:	ee16 ca90 	vmov	ip, s13
 8009fec:	f844 cb08 	str.w	ip, [r4], #8
 8009ff0:	ee75 6a23 	vadd.f32	s13, s10, s7
 8009ff4:	edd6 5a01 	vldr	s11, [r6, #4]
 8009ff8:	edd7 2a01 	vldr	s5, [r7, #4]
 8009ffc:	9404      	str	r4, [sp, #16]
 8009ffe:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a002:	ee74 3a27 	vadd.f32	s7, s8, s15
 800a006:	ee36 6a47 	vsub.f32	s12, s12, s14
 800a00a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800a00e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a012:	0849      	lsrs	r1, r1, #1
 800a014:	f102 0e08 	add.w	lr, r2, #8
 800a018:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a01c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800a020:	9109      	str	r1, [sp, #36]	; 0x24
 800a022:	ee35 4a47 	vsub.f32	s8, s10, s14
 800a026:	f1a1 0902 	sub.w	r9, r1, #2
 800a02a:	f8cd e00c 	str.w	lr, [sp, #12]
 800a02e:	4631      	mov	r1, r6
 800a030:	ee13 ea90 	vmov	lr, s7
 800a034:	ee36 6a64 	vsub.f32	s12, s12, s9
 800a038:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800a03c:	4604      	mov	r4, r0
 800a03e:	edc5 5a01 	vstr	s11, [r5, #4]
 800a042:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a046:	f841 eb08 	str.w	lr, [r1], #8
 800a04a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800a04e:	ee16 ea10 	vmov	lr, s12
 800a052:	ed86 5a01 	vstr	s10, [r6, #4]
 800a056:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800a05a:	f844 eb08 	str.w	lr, [r4], #8
 800a05e:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a062:	edc0 6a01 	vstr	s13, [r0, #4]
 800a066:	9405      	str	r4, [sp, #20]
 800a068:	4604      	mov	r4, r0
 800a06a:	ee17 0a90 	vmov	r0, s15
 800a06e:	9106      	str	r1, [sp, #24]
 800a070:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a074:	f102 0110 	add.w	r1, r2, #16
 800a078:	46bc      	mov	ip, r7
 800a07a:	9100      	str	r1, [sp, #0]
 800a07c:	f847 0b08 	str.w	r0, [r7], #8
 800a080:	f102 0118 	add.w	r1, r2, #24
 800a084:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800a088:	9102      	str	r1, [sp, #8]
 800a08a:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a08e:	9007      	str	r0, [sp, #28]
 800a090:	f000 8134 	beq.w	800a2fc <arm_cfft_radix8by4_f32+0x368>
 800a094:	f102 0920 	add.w	r9, r2, #32
 800a098:	f102 0830 	add.w	r8, r2, #48	; 0x30
 800a09c:	9a01      	ldr	r2, [sp, #4]
 800a09e:	f8dd a000 	ldr.w	sl, [sp]
 800a0a2:	3b0c      	subs	r3, #12
 800a0a4:	4683      	mov	fp, r0
 800a0a6:	4463      	add	r3, ip
 800a0a8:	f105 0e10 	add.w	lr, r5, #16
 800a0ac:	f1a4 010c 	sub.w	r1, r4, #12
 800a0b0:	f104 0510 	add.w	r5, r4, #16
 800a0b4:	f1a6 0c0c 	sub.w	ip, r6, #12
 800a0b8:	f1a2 040c 	sub.w	r4, r2, #12
 800a0bc:	f106 0010 	add.w	r0, r6, #16
 800a0c0:	3210      	adds	r2, #16
 800a0c2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800a0c6:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a0ca:	ed50 7a02 	vldr	s15, [r0, #-8]
 800a0ce:	ed52 1a02 	vldr	s3, [r2, #-8]
 800a0d2:	ed55 6a01 	vldr	s13, [r5, #-4]
 800a0d6:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800a0da:	ed12 1a01 	vldr	s2, [r2, #-4]
 800a0de:	ed10 8a01 	vldr	s16, [r0, #-4]
 800a0e2:	ee35 4a25 	vadd.f32	s8, s10, s11
 800a0e6:	ee30 6a26 	vadd.f32	s12, s0, s13
 800a0ea:	ee37 7a84 	vadd.f32	s14, s15, s8
 800a0ee:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a0f2:	ee37 7a21 	vadd.f32	s14, s14, s3
 800a0f6:	ee75 5a65 	vsub.f32	s11, s10, s11
 800a0fa:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800a0fe:	ed10 7a01 	vldr	s14, [r0, #-4]
 800a102:	ed52 6a01 	vldr	s13, [r2, #-4]
 800a106:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a10a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800a10e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a112:	ee70 3a67 	vsub.f32	s7, s0, s15
 800a116:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800a11a:	ed94 7a02 	vldr	s14, [r4, #8]
 800a11e:	ed9c 2a02 	vldr	s4, [ip, #8]
 800a122:	ed91 ba02 	vldr	s22, [r1, #8]
 800a126:	edd3 9a02 	vldr	s19, [r3, #8]
 800a12a:	edd4 2a01 	vldr	s5, [r4, #4]
 800a12e:	ed9c 9a01 	vldr	s18, [ip, #4]
 800a132:	ed93 5a01 	vldr	s10, [r3, #4]
 800a136:	edd1 0a01 	vldr	s1, [r1, #4]
 800a13a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800a13e:	ee32 2a47 	vsub.f32	s4, s4, s14
 800a142:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800a146:	ee79 4a22 	vadd.f32	s9, s18, s5
 800a14a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800a14e:	ee79 2a62 	vsub.f32	s5, s18, s5
 800a152:	ed8c 7a02 	vstr	s14, [ip, #8]
 800a156:	ed91 7a01 	vldr	s14, [r1, #4]
 800a15a:	edd3 8a01 	vldr	s17, [r3, #4]
 800a15e:	ee34 7a87 	vadd.f32	s14, s9, s14
 800a162:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800a166:	ee37 7a28 	vadd.f32	s14, s14, s17
 800a16a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800a16e:	ed8c 7a01 	vstr	s14, [ip, #4]
 800a172:	ed1a 7a01 	vldr	s14, [sl, #-4]
 800a176:	ed1a aa02 	vldr	s20, [sl, #-8]
 800a17a:	ee73 8a22 	vadd.f32	s17, s6, s5
 800a17e:	ee39 9a05 	vadd.f32	s18, s18, s10
 800a182:	ee7a aac1 	vsub.f32	s21, s21, s2
 800a186:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a18a:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800a18e:	ee69 ba07 	vmul.f32	s23, s18, s14
 800a192:	ee6a aa87 	vmul.f32	s21, s21, s14
 800a196:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800a19a:	ee63 ca87 	vmul.f32	s25, s7, s14
 800a19e:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800a1a2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800a1a6:	ee68 8a87 	vmul.f32	s17, s17, s14
 800a1aa:	ee73 3aea 	vsub.f32	s7, s7, s21
 800a1ae:	ee78 8a89 	vadd.f32	s17, s17, s18
 800a1b2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800a1b6:	ee3b aaca 	vsub.f32	s20, s23, s20
 800a1ba:	ee34 4a67 	vsub.f32	s8, s8, s15
 800a1be:	ee76 6acb 	vsub.f32	s13, s13, s22
 800a1c2:	ee36 6a48 	vsub.f32	s12, s12, s16
 800a1c6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800a1ca:	ed00 7a02 	vstr	s14, [r0, #-8]
 800a1ce:	ed40 3a01 	vstr	s7, [r0, #-4]
 800a1d2:	edc1 8a01 	vstr	s17, [r1, #4]
 800a1d6:	ed81 aa02 	vstr	s20, [r1, #8]
 800a1da:	ed59 3a04 	vldr	s7, [r9, #-16]
 800a1de:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800a1e2:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800a1e6:	ed59 6a03 	vldr	s13, [r9, #-12]
 800a1ea:	ee34 4a61 	vsub.f32	s8, s8, s3
 800a1ee:	ee36 6a41 	vsub.f32	s12, s12, s2
 800a1f2:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800a1f6:	ee66 9a26 	vmul.f32	s19, s12, s13
 800a1fa:	ee24 9a23 	vmul.f32	s18, s8, s7
 800a1fe:	ee26 6a23 	vmul.f32	s12, s12, s7
 800a202:	ee24 4a26 	vmul.f32	s8, s8, s13
 800a206:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a20a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a20e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800a212:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a216:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a21a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800a21e:	ee79 3a29 	vadd.f32	s7, s18, s19
 800a222:	ee75 6a60 	vsub.f32	s13, s10, s1
 800a226:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800a22a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a22e:	ed45 3a02 	vstr	s7, [r5, #-8]
 800a232:	ed05 6a01 	vstr	s12, [r5, #-4]
 800a236:	ed84 7a01 	vstr	s14, [r4, #4]
 800a23a:	ed84 4a02 	vstr	s8, [r4, #8]
 800a23e:	ee35 6a81 	vadd.f32	s12, s11, s2
 800a242:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800a246:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 800a24a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 800a24e:	ee33 3a62 	vsub.f32	s6, s6, s5
 800a252:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800a256:	ee67 2a26 	vmul.f32	s5, s14, s13
 800a25a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a25e:	ee26 5a25 	vmul.f32	s10, s12, s11
 800a262:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a266:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a26a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a26e:	ee63 6a26 	vmul.f32	s13, s6, s13
 800a272:	ee23 3a25 	vmul.f32	s6, s6, s11
 800a276:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a27a:	ee75 5a24 	vadd.f32	s11, s10, s9
 800a27e:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800a282:	ee36 7a87 	vadd.f32	s14, s13, s14
 800a286:	f1bb 0b01 	subs.w	fp, fp, #1
 800a28a:	ed42 5a02 	vstr	s11, [r2, #-8]
 800a28e:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a292:	f10e 0e08 	add.w	lr, lr, #8
 800a296:	ed83 3a02 	vstr	s6, [r3, #8]
 800a29a:	ed83 7a01 	vstr	s14, [r3, #4]
 800a29e:	f1ac 0c08 	sub.w	ip, ip, #8
 800a2a2:	f10a 0a08 	add.w	sl, sl, #8
 800a2a6:	f100 0008 	add.w	r0, r0, #8
 800a2aa:	f1a1 0108 	sub.w	r1, r1, #8
 800a2ae:	f109 0910 	add.w	r9, r9, #16
 800a2b2:	f105 0508 	add.w	r5, r5, #8
 800a2b6:	f1a4 0408 	sub.w	r4, r4, #8
 800a2ba:	f108 0818 	add.w	r8, r8, #24
 800a2be:	f102 0208 	add.w	r2, r2, #8
 800a2c2:	f1a3 0308 	sub.w	r3, r3, #8
 800a2c6:	f47f aefc 	bne.w	800a0c2 <arm_cfft_radix8by4_f32+0x12e>
 800a2ca:	9907      	ldr	r1, [sp, #28]
 800a2cc:	9800      	ldr	r0, [sp, #0]
 800a2ce:	00cb      	lsls	r3, r1, #3
 800a2d0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a2d4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a2d8:	9100      	str	r1, [sp, #0]
 800a2da:	9904      	ldr	r1, [sp, #16]
 800a2dc:	4419      	add	r1, r3
 800a2de:	9104      	str	r1, [sp, #16]
 800a2e0:	9903      	ldr	r1, [sp, #12]
 800a2e2:	4419      	add	r1, r3
 800a2e4:	9103      	str	r1, [sp, #12]
 800a2e6:	9906      	ldr	r1, [sp, #24]
 800a2e8:	4419      	add	r1, r3
 800a2ea:	9106      	str	r1, [sp, #24]
 800a2ec:	9905      	ldr	r1, [sp, #20]
 800a2ee:	441f      	add	r7, r3
 800a2f0:	4419      	add	r1, r3
 800a2f2:	9b02      	ldr	r3, [sp, #8]
 800a2f4:	9105      	str	r1, [sp, #20]
 800a2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2fa:	9302      	str	r3, [sp, #8]
 800a2fc:	9904      	ldr	r1, [sp, #16]
 800a2fe:	9805      	ldr	r0, [sp, #20]
 800a300:	ed91 4a00 	vldr	s8, [r1]
 800a304:	edd0 6a00 	vldr	s13, [r0]
 800a308:	9b06      	ldr	r3, [sp, #24]
 800a30a:	ed97 3a00 	vldr	s6, [r7]
 800a30e:	edd3 7a00 	vldr	s15, [r3]
 800a312:	edd0 4a01 	vldr	s9, [r0, #4]
 800a316:	edd1 3a01 	vldr	s7, [r1, #4]
 800a31a:	ed97 2a01 	vldr	s4, [r7, #4]
 800a31e:	ed93 7a01 	vldr	s14, [r3, #4]
 800a322:	9a03      	ldr	r2, [sp, #12]
 800a324:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 800a328:	ee34 6a26 	vadd.f32	s12, s8, s13
 800a32c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800a330:	ee37 5a86 	vadd.f32	s10, s15, s12
 800a334:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800a338:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a33c:	ee74 6a66 	vsub.f32	s13, s8, s13
 800a340:	ed81 5a00 	vstr	s10, [r1]
 800a344:	ed93 5a01 	vldr	s10, [r3, #4]
 800a348:	edd7 4a01 	vldr	s9, [r7, #4]
 800a34c:	ee35 5a85 	vadd.f32	s10, s11, s10
 800a350:	ee37 4a26 	vadd.f32	s8, s14, s13
 800a354:	ee35 5a24 	vadd.f32	s10, s10, s9
 800a358:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800a35c:	ed81 5a01 	vstr	s10, [r1, #4]
 800a360:	edd2 1a00 	vldr	s3, [r2]
 800a364:	edd2 2a01 	vldr	s5, [r2, #4]
 800a368:	ee34 5a83 	vadd.f32	s10, s9, s6
 800a36c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a370:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a374:	ee64 4a21 	vmul.f32	s9, s8, s3
 800a378:	ee24 4a22 	vmul.f32	s8, s8, s5
 800a37c:	ee65 2a22 	vmul.f32	s5, s10, s5
 800a380:	ee25 5a21 	vmul.f32	s10, s10, s3
 800a384:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800a388:	ee35 5a44 	vsub.f32	s10, s10, s8
 800a38c:	edc3 2a00 	vstr	s5, [r3]
 800a390:	ed83 5a01 	vstr	s10, [r3, #4]
 800a394:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800a398:	9b00      	ldr	r3, [sp, #0]
 800a39a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a39e:	ed93 4a01 	vldr	s8, [r3, #4]
 800a3a2:	ed93 5a00 	vldr	s10, [r3]
 800a3a6:	9b02      	ldr	r3, [sp, #8]
 800a3a8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a3ac:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a3b0:	ee25 5a85 	vmul.f32	s10, s11, s10
 800a3b4:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a3b8:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a3bc:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a3c0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800a3c4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800a3c8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a3cc:	ed80 6a01 	vstr	s12, [r0, #4]
 800a3d0:	edc0 5a00 	vstr	s11, [r0]
 800a3d4:	edd3 5a01 	vldr	s11, [r3, #4]
 800a3d8:	edd3 6a00 	vldr	s13, [r3]
 800a3dc:	ee37 7a02 	vadd.f32	s14, s14, s4
 800a3e0:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800a3e4:	ee27 6a26 	vmul.f32	s12, s14, s13
 800a3e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800a3ec:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a3f0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a3f4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a3f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800a3fc:	ed87 7a01 	vstr	s14, [r7, #4]
 800a400:	edc7 7a00 	vstr	s15, [r7]
 800a404:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 800a408:	4621      	mov	r1, r4
 800a40a:	686a      	ldr	r2, [r5, #4]
 800a40c:	2304      	movs	r3, #4
 800a40e:	f000 f9d3 	bl	800a7b8 <arm_radix8_butterfly_f32>
 800a412:	4630      	mov	r0, r6
 800a414:	4621      	mov	r1, r4
 800a416:	686a      	ldr	r2, [r5, #4]
 800a418:	2304      	movs	r3, #4
 800a41a:	f000 f9cd 	bl	800a7b8 <arm_radix8_butterfly_f32>
 800a41e:	9808      	ldr	r0, [sp, #32]
 800a420:	686a      	ldr	r2, [r5, #4]
 800a422:	4621      	mov	r1, r4
 800a424:	2304      	movs	r3, #4
 800a426:	f000 f9c7 	bl	800a7b8 <arm_radix8_butterfly_f32>
 800a42a:	686a      	ldr	r2, [r5, #4]
 800a42c:	9801      	ldr	r0, [sp, #4]
 800a42e:	4621      	mov	r1, r4
 800a430:	2304      	movs	r3, #4
 800a432:	b00d      	add	sp, #52	; 0x34
 800a434:	ecbd 8b0a 	vpop	{d8-d12}
 800a438:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	f000 b9bc 	b.w	800a7b8 <arm_radix8_butterfly_f32>

0800a440 <arm_cfft_f32>:
 800a440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a444:	2a01      	cmp	r2, #1
 800a446:	4606      	mov	r6, r0
 800a448:	4617      	mov	r7, r2
 800a44a:	460c      	mov	r4, r1
 800a44c:	4698      	mov	r8, r3
 800a44e:	8805      	ldrh	r5, [r0, #0]
 800a450:	d056      	beq.n	800a500 <arm_cfft_f32+0xc0>
 800a452:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a456:	d063      	beq.n	800a520 <arm_cfft_f32+0xe0>
 800a458:	d916      	bls.n	800a488 <arm_cfft_f32+0x48>
 800a45a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a45e:	d01a      	beq.n	800a496 <arm_cfft_f32+0x56>
 800a460:	d947      	bls.n	800a4f2 <arm_cfft_f32+0xb2>
 800a462:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a466:	d05b      	beq.n	800a520 <arm_cfft_f32+0xe0>
 800a468:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a46c:	d105      	bne.n	800a47a <arm_cfft_f32+0x3a>
 800a46e:	2301      	movs	r3, #1
 800a470:	6872      	ldr	r2, [r6, #4]
 800a472:	4629      	mov	r1, r5
 800a474:	4620      	mov	r0, r4
 800a476:	f000 f99f 	bl	800a7b8 <arm_radix8_butterfly_f32>
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	d111      	bne.n	800a4a4 <arm_cfft_f32+0x64>
 800a480:	2f01      	cmp	r7, #1
 800a482:	d016      	beq.n	800a4b2 <arm_cfft_f32+0x72>
 800a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a488:	2d20      	cmp	r5, #32
 800a48a:	d049      	beq.n	800a520 <arm_cfft_f32+0xe0>
 800a48c:	d935      	bls.n	800a4fa <arm_cfft_f32+0xba>
 800a48e:	2d40      	cmp	r5, #64	; 0x40
 800a490:	d0ed      	beq.n	800a46e <arm_cfft_f32+0x2e>
 800a492:	2d80      	cmp	r5, #128	; 0x80
 800a494:	d1f1      	bne.n	800a47a <arm_cfft_f32+0x3a>
 800a496:	4621      	mov	r1, r4
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff fcab 	bl	8009df4 <arm_cfft_radix8by2_f32>
 800a49e:	f1b8 0f00 	cmp.w	r8, #0
 800a4a2:	d0ed      	beq.n	800a480 <arm_cfft_f32+0x40>
 800a4a4:	68b2      	ldr	r2, [r6, #8]
 800a4a6:	89b1      	ldrh	r1, [r6, #12]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	f000 f841 	bl	800a530 <arm_bitreversal_32>
 800a4ae:	2f01      	cmp	r7, #1
 800a4b0:	d1e8      	bne.n	800a484 <arm_cfft_f32+0x44>
 800a4b2:	ee07 5a90 	vmov	s15, r5
 800a4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	d0de      	beq.n	800a484 <arm_cfft_f32+0x44>
 800a4c6:	f104 0108 	add.w	r1, r4, #8
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	f101 0108 	add.w	r1, r1, #8
 800a4d4:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a4d8:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a4dc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a4e4:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a4e8:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a4ec:	d1ee      	bne.n	800a4cc <arm_cfft_f32+0x8c>
 800a4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a4f6:	d0ba      	beq.n	800a46e <arm_cfft_f32+0x2e>
 800a4f8:	e7bf      	b.n	800a47a <arm_cfft_f32+0x3a>
 800a4fa:	2d10      	cmp	r5, #16
 800a4fc:	d0cb      	beq.n	800a496 <arm_cfft_f32+0x56>
 800a4fe:	e7bc      	b.n	800a47a <arm_cfft_f32+0x3a>
 800a500:	b19d      	cbz	r5, 800a52a <arm_cfft_f32+0xea>
 800a502:	f101 030c 	add.w	r3, r1, #12
 800a506:	2200      	movs	r2, #0
 800a508:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a50c:	3201      	adds	r2, #1
 800a50e:	eef1 7a67 	vneg.f32	s15, s15
 800a512:	4295      	cmp	r5, r2
 800a514:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a518:	f103 0308 	add.w	r3, r3, #8
 800a51c:	d1f4      	bne.n	800a508 <arm_cfft_f32+0xc8>
 800a51e:	e798      	b.n	800a452 <arm_cfft_f32+0x12>
 800a520:	4621      	mov	r1, r4
 800a522:	4630      	mov	r0, r6
 800a524:	f7ff fd36 	bl	8009f94 <arm_cfft_radix8by4_f32>
 800a528:	e7a7      	b.n	800a47a <arm_cfft_f32+0x3a>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d0aa      	beq.n	800a484 <arm_cfft_f32+0x44>
 800a52e:	e7b9      	b.n	800a4a4 <arm_cfft_f32+0x64>

0800a530 <arm_bitreversal_32>:
 800a530:	b1e9      	cbz	r1, 800a56e <arm_bitreversal_32+0x3e>
 800a532:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a534:	2500      	movs	r5, #0
 800a536:	f102 0e02 	add.w	lr, r2, #2
 800a53a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800a53e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800a542:	08a4      	lsrs	r4, r4, #2
 800a544:	089b      	lsrs	r3, r3, #2
 800a546:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800a54a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800a54e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800a552:	00a6      	lsls	r6, r4, #2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800a55a:	3304      	adds	r3, #4
 800a55c:	1d34      	adds	r4, r6, #4
 800a55e:	3502      	adds	r5, #2
 800a560:	58c6      	ldr	r6, [r0, r3]
 800a562:	5907      	ldr	r7, [r0, r4]
 800a564:	50c7      	str	r7, [r0, r3]
 800a566:	428d      	cmp	r5, r1
 800a568:	5106      	str	r6, [r0, r4]
 800a56a:	d3e6      	bcc.n	800a53a <arm_bitreversal_32+0xa>
 800a56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56e:	4770      	bx	lr

0800a570 <arm_cmplx_mag_f32>:
 800a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a574:	ed2d 8b02 	vpush	{d8}
 800a578:	0897      	lsrs	r7, r2, #2
 800a57a:	b084      	sub	sp, #16
 800a57c:	d077      	beq.n	800a66e <arm_cmplx_mag_f32+0xfe>
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	f100 0420 	add.w	r4, r0, #32
 800a586:	f101 0510 	add.w	r5, r1, #16
 800a58a:	463e      	mov	r6, r7
 800a58c:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800a590:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 800a594:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a59c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a5a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	f2c0 80c5 	blt.w	800a736 <arm_cmplx_mag_f32+0x1c6>
 800a5ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a5b8:	f100 80cb 	bmi.w	800a752 <arm_cmplx_mag_f32+0x1e2>
 800a5bc:	ed05 8a04 	vstr	s16, [r5, #-16]
 800a5c0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 800a5c4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800a5c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a5cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a5d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	f2c0 80a8 	blt.w	800a730 <arm_cmplx_mag_f32+0x1c0>
 800a5e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a5ec:	f100 80a8 	bmi.w	800a740 <arm_cmplx_mag_f32+0x1d0>
 800a5f0:	ed05 8a03 	vstr	s16, [r5, #-12]
 800a5f4:	ed14 0a04 	vldr	s0, [r4, #-16]
 800a5f8:	ed54 7a03 	vldr	s15, [r4, #-12]
 800a5fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a600:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a604:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a608:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	f2c0 808b 	blt.w	800a72a <arm_cmplx_mag_f32+0x1ba>
 800a614:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a620:	f100 80a9 	bmi.w	800a776 <arm_cmplx_mag_f32+0x206>
 800a624:	ed05 8a02 	vstr	s16, [r5, #-8]
 800a628:	ed14 0a02 	vldr	s0, [r4, #-8]
 800a62c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800a630:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a634:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a638:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a63c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a644:	db6e      	blt.n	800a724 <arm_cmplx_mag_f32+0x1b4>
 800a646:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a652:	f100 8087 	bmi.w	800a764 <arm_cmplx_mag_f32+0x1f4>
 800a656:	ed05 8a01 	vstr	s16, [r5, #-4]
 800a65a:	3e01      	subs	r6, #1
 800a65c:	f104 0420 	add.w	r4, r4, #32
 800a660:	f105 0510 	add.w	r5, r5, #16
 800a664:	d192      	bne.n	800a58c <arm_cmplx_mag_f32+0x1c>
 800a666:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800a66a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800a66e:	f012 0203 	ands.w	r2, r2, #3
 800a672:	d052      	beq.n	800a71a <arm_cmplx_mag_f32+0x1aa>
 800a674:	ed90 0a00 	vldr	s0, [r0]
 800a678:	edd0 7a01 	vldr	s15, [r0, #4]
 800a67c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a680:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a684:	2300      	movs	r3, #0
 800a686:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a68a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a692:	bfb8      	it	lt
 800a694:	600b      	strlt	r3, [r1, #0]
 800a696:	db08      	blt.n	800a6aa <arm_cmplx_mag_f32+0x13a>
 800a698:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a6a4:	d479      	bmi.n	800a79a <arm_cmplx_mag_f32+0x22a>
 800a6a6:	ed81 8a00 	vstr	s16, [r1]
 800a6aa:	3a01      	subs	r2, #1
 800a6ac:	d035      	beq.n	800a71a <arm_cmplx_mag_f32+0x1aa>
 800a6ae:	ed90 0a02 	vldr	s0, [r0, #8]
 800a6b2:	edd0 7a03 	vldr	s15, [r0, #12]
 800a6b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6be:	2300      	movs	r3, #0
 800a6c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a6c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6cc:	bfb8      	it	lt
 800a6ce:	604b      	strlt	r3, [r1, #4]
 800a6d0:	db08      	blt.n	800a6e4 <arm_cmplx_mag_f32+0x174>
 800a6d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6da:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a6de:	d453      	bmi.n	800a788 <arm_cmplx_mag_f32+0x218>
 800a6e0:	ed81 8a01 	vstr	s16, [r1, #4]
 800a6e4:	2a01      	cmp	r2, #1
 800a6e6:	d018      	beq.n	800a71a <arm_cmplx_mag_f32+0x1aa>
 800a6e8:	ed90 0a04 	vldr	s0, [r0, #16]
 800a6ec:	edd0 7a05 	vldr	s15, [r0, #20]
 800a6f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a6f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a6fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a706:	db19      	blt.n	800a73c <arm_cmplx_mag_f32+0x1cc>
 800a708:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800a70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a710:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800a714:	d44a      	bmi.n	800a7ac <arm_cmplx_mag_f32+0x23c>
 800a716:	ed81 8a02 	vstr	s16, [r1, #8]
 800a71a:	b004      	add	sp, #16
 800a71c:	ecbd 8b02 	vpop	{d8}
 800a720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a724:	f845 8c04 	str.w	r8, [r5, #-4]
 800a728:	e797      	b.n	800a65a <arm_cmplx_mag_f32+0xea>
 800a72a:	f845 8c08 	str.w	r8, [r5, #-8]
 800a72e:	e77b      	b.n	800a628 <arm_cmplx_mag_f32+0xb8>
 800a730:	f845 8c0c 	str.w	r8, [r5, #-12]
 800a734:	e75e      	b.n	800a5f4 <arm_cmplx_mag_f32+0x84>
 800a736:	f845 8c10 	str.w	r8, [r5, #-16]
 800a73a:	e741      	b.n	800a5c0 <arm_cmplx_mag_f32+0x50>
 800a73c:	608b      	str	r3, [r1, #8]
 800a73e:	e7ec      	b.n	800a71a <arm_cmplx_mag_f32+0x1aa>
 800a740:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a744:	9001      	str	r0, [sp, #4]
 800a746:	f003 fa71 	bl	800dc2c <sqrtf>
 800a74a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a74e:	9801      	ldr	r0, [sp, #4]
 800a750:	e74e      	b.n	800a5f0 <arm_cmplx_mag_f32+0x80>
 800a752:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a756:	9001      	str	r0, [sp, #4]
 800a758:	f003 fa68 	bl	800dc2c <sqrtf>
 800a75c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a760:	9801      	ldr	r0, [sp, #4]
 800a762:	e72b      	b.n	800a5bc <arm_cmplx_mag_f32+0x4c>
 800a764:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a768:	9001      	str	r0, [sp, #4]
 800a76a:	f003 fa5f 	bl	800dc2c <sqrtf>
 800a76e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a772:	9801      	ldr	r0, [sp, #4]
 800a774:	e76f      	b.n	800a656 <arm_cmplx_mag_f32+0xe6>
 800a776:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a77a:	9001      	str	r0, [sp, #4]
 800a77c:	f003 fa56 	bl	800dc2c <sqrtf>
 800a780:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a784:	9801      	ldr	r0, [sp, #4]
 800a786:	e74d      	b.n	800a624 <arm_cmplx_mag_f32+0xb4>
 800a788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a78c:	9201      	str	r2, [sp, #4]
 800a78e:	f003 fa4d 	bl	800dc2c <sqrtf>
 800a792:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a796:	9903      	ldr	r1, [sp, #12]
 800a798:	e7a2      	b.n	800a6e0 <arm_cmplx_mag_f32+0x170>
 800a79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a79e:	9201      	str	r2, [sp, #4]
 800a7a0:	f003 fa44 	bl	800dc2c <sqrtf>
 800a7a4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800a7a8:	9903      	ldr	r1, [sp, #12]
 800a7aa:	e77c      	b.n	800a6a6 <arm_cmplx_mag_f32+0x136>
 800a7ac:	9101      	str	r1, [sp, #4]
 800a7ae:	f003 fa3d 	bl	800dc2c <sqrtf>
 800a7b2:	9901      	ldr	r1, [sp, #4]
 800a7b4:	e7af      	b.n	800a716 <arm_cmplx_mag_f32+0x1a6>
 800a7b6:	bf00      	nop

0800a7b8 <arm_radix8_butterfly_f32>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	ed2d 8b10 	vpush	{d8-d15}
 800a7c0:	b095      	sub	sp, #84	; 0x54
 800a7c2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	ed9f bab9 	vldr	s22, [pc, #740]	; 800aab0 <arm_radix8_butterfly_f32+0x2f8>
 800a7ce:	9012      	str	r0, [sp, #72]	; 0x48
 800a7d0:	468b      	mov	fp, r1
 800a7d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7d4:	4689      	mov	r9, r1
 800a7d6:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800a7da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7dc:	960f      	str	r6, [sp, #60]	; 0x3c
 800a7de:	ea4f 1846 	mov.w	r8, r6, lsl #5
 800a7e2:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 800a7e6:	eb03 0508 	add.w	r5, r3, r8
 800a7ea:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a7ee:	eb05 040e 	add.w	r4, r5, lr
 800a7f2:	0137      	lsls	r7, r6, #4
 800a7f4:	eba6 030a 	sub.w	r3, r6, sl
 800a7f8:	eb04 000e 	add.w	r0, r4, lr
 800a7fc:	44b2      	add	sl, r6
 800a7fe:	1d3a      	adds	r2, r7, #4
 800a800:	9702      	str	r7, [sp, #8]
 800a802:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800a806:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800a80a:	ebae 0c06 	sub.w	ip, lr, r6
 800a80e:	9703      	str	r7, [sp, #12]
 800a810:	eb03 0708 	add.w	r7, r3, r8
 800a814:	9701      	str	r7, [sp, #4]
 800a816:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800a81a:	9706      	str	r7, [sp, #24]
 800a81c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800a81e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a822:	f10e 0104 	add.w	r1, lr, #4
 800a826:	4439      	add	r1, r7
 800a828:	443a      	add	r2, r7
 800a82a:	0137      	lsls	r7, r6, #4
 800a82c:	00f6      	lsls	r6, r6, #3
 800a82e:	9704      	str	r7, [sp, #16]
 800a830:	9605      	str	r6, [sp, #20]
 800a832:	9f01      	ldr	r7, [sp, #4]
 800a834:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800a836:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800a83a:	f04f 0c00 	mov.w	ip, #0
 800a83e:	edd4 6a00 	vldr	s13, [r4]
 800a842:	edd7 1a00 	vldr	s3, [r7]
 800a846:	ed16 aa01 	vldr	s20, [r6, #-4]
 800a84a:	edd5 5a00 	vldr	s11, [r5]
 800a84e:	ed52 9a01 	vldr	s19, [r2, #-4]
 800a852:	ed90 6a00 	vldr	s12, [r0]
 800a856:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a85a:	ed93 3a00 	vldr	s6, [r3]
 800a85e:	ee39 0a86 	vadd.f32	s0, s19, s12
 800a862:	ee33 2a21 	vadd.f32	s4, s6, s3
 800a866:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800a86a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800a86e:	ee35 7a02 	vadd.f32	s14, s10, s4
 800a872:	ee34 4a80 	vadd.f32	s8, s9, s0
 800a876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a87a:	ee74 6a07 	vadd.f32	s13, s8, s14
 800a87e:	ee34 4a47 	vsub.f32	s8, s8, s14
 800a882:	ed46 6a01 	vstr	s13, [r6, #-4]
 800a886:	ed85 4a00 	vstr	s8, [r5]
 800a88a:	edd1 6a00 	vldr	s13, [r1]
 800a88e:	ed94 9a01 	vldr	s18, [r4, #4]
 800a892:	edd3 2a01 	vldr	s5, [r3, #4]
 800a896:	edd7 8a01 	vldr	s17, [r7, #4]
 800a89a:	edd6 0a00 	vldr	s1, [r6]
 800a89e:	edd5 3a01 	vldr	s7, [r5, #4]
 800a8a2:	ed90 8a01 	vldr	s16, [r0, #4]
 800a8a6:	ed92 7a00 	vldr	s14, [r2]
 800a8aa:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a8ae:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800a8b2:	ee72 aae8 	vsub.f32	s21, s5, s17
 800a8b6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800a8ba:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800a8be:	ee77 7a83 	vadd.f32	s15, s15, s6
 800a8c2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800a8c6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800a8ca:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800a8ce:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800a8d2:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800a8d6:	ee77 0a08 	vadd.f32	s1, s14, s16
 800a8da:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800a8de:	ee37 7a48 	vsub.f32	s14, s14, s16
 800a8e2:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800a8e6:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800a8ea:	ee76 6a89 	vadd.f32	s13, s13, s18
 800a8ee:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800a8f2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a8f6:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800a8fa:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a8fe:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800a902:	ee33 2a20 	vadd.f32	s4, s6, s1
 800a906:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800a90a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800a90e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800a912:	ee77 0a01 	vadd.f32	s1, s14, s2
 800a916:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800a91a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800a91e:	ee73 1a84 	vadd.f32	s3, s7, s8
 800a922:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a926:	ee76 3a27 	vadd.f32	s7, s12, s15
 800a92a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a92e:	ee32 8a00 	vadd.f32	s16, s4, s0
 800a932:	ee33 1a45 	vsub.f32	s2, s6, s10
 800a936:	ee32 2a40 	vsub.f32	s4, s4, s0
 800a93a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800a93e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800a942:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800a946:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800a94a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800a94e:	ee75 4a87 	vadd.f32	s9, s11, s14
 800a952:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800a956:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800a95a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800a95e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800a962:	44dc      	add	ip, fp
 800a964:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800a968:	45e1      	cmp	r9, ip
 800a96a:	ed86 8a00 	vstr	s16, [r6]
 800a96e:	ed85 2a01 	vstr	s4, [r5, #4]
 800a972:	4456      	add	r6, sl
 800a974:	ed02 0a01 	vstr	s0, [r2, #-4]
 800a978:	4455      	add	r5, sl
 800a97a:	edc0 6a00 	vstr	s13, [r0]
 800a97e:	ed82 1a00 	vstr	s2, [r2]
 800a982:	ed80 5a01 	vstr	s10, [r0, #4]
 800a986:	4452      	add	r2, sl
 800a988:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a98c:	4450      	add	r0, sl
 800a98e:	edc7 2a00 	vstr	s5, [r7]
 800a992:	edc4 4a00 	vstr	s9, [r4]
 800a996:	ed83 7a00 	vstr	s14, [r3]
 800a99a:	edc1 5a00 	vstr	s11, [r1]
 800a99e:	edc7 3a01 	vstr	s7, [r7, #4]
 800a9a2:	4451      	add	r1, sl
 800a9a4:	ed84 6a01 	vstr	s12, [r4, #4]
 800a9a8:	4457      	add	r7, sl
 800a9aa:	edc3 7a01 	vstr	s15, [r3, #4]
 800a9ae:	4454      	add	r4, sl
 800a9b0:	4453      	add	r3, sl
 800a9b2:	f63f af44 	bhi.w	800a83e <arm_radix8_butterfly_f32+0x86>
 800a9b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9b8:	2b07      	cmp	r3, #7
 800a9ba:	f240 81b7 	bls.w	800ad2c <arm_radix8_butterfly_f32+0x574>
 800a9be:	9b06      	ldr	r3, [sp, #24]
 800a9c0:	9903      	ldr	r1, [sp, #12]
 800a9c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a9c4:	9e05      	ldr	r6, [sp, #20]
 800a9c6:	9a04      	ldr	r2, [sp, #16]
 800a9c8:	f103 0c08 	add.w	ip, r3, #8
 800a9cc:	9b02      	ldr	r3, [sp, #8]
 800a9ce:	3108      	adds	r1, #8
 800a9d0:	f108 0808 	add.w	r8, r8, #8
 800a9d4:	1841      	adds	r1, r0, r1
 800a9d6:	3608      	adds	r6, #8
 800a9d8:	330c      	adds	r3, #12
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4444      	add	r4, r8
 800a9de:	18c3      	adds	r3, r0, r3
 800a9e0:	9109      	str	r1, [sp, #36]	; 0x24
 800a9e2:	1981      	adds	r1, r0, r6
 800a9e4:	f10e 0e08 	add.w	lr, lr, #8
 800a9e8:	3208      	adds	r2, #8
 800a9ea:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9ec:	9107      	str	r1, [sp, #28]
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	4601      	mov	r1, r0
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	f100 030c 	add.w	r3, r0, #12
 800a9f8:	4474      	add	r4, lr
 800a9fa:	f04f 0801 	mov.w	r8, #1
 800a9fe:	1882      	adds	r2, r0, r2
 800aa00:	4461      	add	r1, ip
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	464b      	mov	r3, r9
 800aa06:	940a      	str	r4, [sp, #40]	; 0x28
 800aa08:	46c1      	mov	r9, r8
 800aa0a:	9208      	str	r2, [sp, #32]
 800aa0c:	46d8      	mov	r8, fp
 800aa0e:	9106      	str	r1, [sp, #24]
 800aa10:	f04f 0e00 	mov.w	lr, #0
 800aa14:	469b      	mov	fp, r3
 800aa16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa1a:	449e      	add	lr, r3
 800aa1c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 800aa20:	441a      	add	r2, r3
 800aa22:	920e      	str	r2, [sp, #56]	; 0x38
 800aa24:	441a      	add	r2, r3
 800aa26:	18d4      	adds	r4, r2, r3
 800aa28:	18e5      	adds	r5, r4, r3
 800aa2a:	18ee      	adds	r6, r5, r3
 800aa2c:	18f7      	adds	r7, r6, r3
 800aa2e:	eb07 0c03 	add.w	ip, r7, r3
 800aa32:	920d      	str	r2, [sp, #52]	; 0x34
 800aa34:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800aa38:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800aa3c:	910c      	str	r1, [sp, #48]	; 0x30
 800aa3e:	4419      	add	r1, r3
 800aa40:	9103      	str	r1, [sp, #12]
 800aa42:	4419      	add	r1, r3
 800aa44:	18ca      	adds	r2, r1, r3
 800aa46:	9202      	str	r2, [sp, #8]
 800aa48:	441a      	add	r2, r3
 800aa4a:	18d0      	adds	r0, r2, r3
 800aa4c:	ed92 ea01 	vldr	s28, [r2, #4]
 800aa50:	9a02      	ldr	r2, [sp, #8]
 800aa52:	edd4 7a00 	vldr	s15, [r4]
 800aa56:	edd2 da01 	vldr	s27, [r2, #4]
 800aa5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa5c:	ed91 da01 	vldr	s26, [r1, #4]
 800aa60:	ed92 ca01 	vldr	s24, [r2, #4]
 800aa64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa66:	9903      	ldr	r1, [sp, #12]
 800aa68:	edcd 7a03 	vstr	s15, [sp, #12]
 800aa6c:	edd2 7a00 	vldr	s15, [r2]
 800aa70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa72:	edcd 7a02 	vstr	s15, [sp, #8]
 800aa76:	edd2 7a00 	vldr	s15, [r2]
 800aa7a:	edd0 ea01 	vldr	s29, [r0, #4]
 800aa7e:	edd1 ca01 	vldr	s25, [r1, #4]
 800aa82:	eddc ba00 	vldr	s23, [ip]
 800aa86:	edd7 aa00 	vldr	s21, [r7]
 800aa8a:	ed96 aa00 	vldr	s20, [r6]
 800aa8e:	edd5 9a00 	vldr	s19, [r5]
 800aa92:	edcd 7a01 	vstr	s15, [sp, #4]
 800aa96:	4403      	add	r3, r0
 800aa98:	ed93 fa01 	vldr	s30, [r3, #4]
 800aa9c:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 800aaa0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 800aaa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aaa8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aaac:	46cc      	mov	ip, r9
 800aaae:	e001      	b.n	800aab4 <arm_radix8_butterfly_f32+0x2fc>
 800aab0:	3f3504f3 	.word	0x3f3504f3
 800aab4:	ed91 6a00 	vldr	s12, [r1]
 800aab8:	ed93 5a00 	vldr	s10, [r3]
 800aabc:	edd0 fa00 	vldr	s31, [r0]
 800aac0:	edd4 7a00 	vldr	s15, [r4]
 800aac4:	ed95 7a00 	vldr	s14, [r5]
 800aac8:	ed56 3a01 	vldr	s7, [r6, #-4]
 800aacc:	ed17 3a01 	vldr	s6, [r7, #-4]
 800aad0:	ed92 2a00 	vldr	s4, [r2]
 800aad4:	ed96 0a00 	vldr	s0, [r6]
 800aad8:	ee33 8a85 	vadd.f32	s16, s7, s10
 800aadc:	ee32 1a06 	vadd.f32	s2, s4, s12
 800aae0:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800aae4:	ee77 4a87 	vadd.f32	s9, s15, s14
 800aae8:	ee78 1a04 	vadd.f32	s3, s16, s8
 800aaec:	ee71 6a24 	vadd.f32	s13, s2, s9
 800aaf0:	ee32 2a46 	vsub.f32	s4, s4, s12
 800aaf4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800aaf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800aafc:	ed06 6a01 	vstr	s12, [r6, #-4]
 800ab00:	edd4 8a01 	vldr	s17, [r4, #4]
 800ab04:	ed92 9a01 	vldr	s18, [r2, #4]
 800ab08:	edd7 0a00 	vldr	s1, [r7]
 800ab0c:	edd1 2a01 	vldr	s5, [r1, #4]
 800ab10:	ed95 7a01 	vldr	s14, [r5, #4]
 800ab14:	ed93 6a01 	vldr	s12, [r3, #4]
 800ab18:	edd0 5a01 	vldr	s11, [r0, #4]
 800ab1c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ab20:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800ab24:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ab28:	ee78 fac7 	vsub.f32	s31, s17, s14
 800ab2c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800ab30:	ee38 7a87 	vadd.f32	s14, s17, s14
 800ab34:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800ab38:	ee79 2a22 	vadd.f32	s5, s18, s5
 800ab3c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800ab40:	ee72 7a67 	vsub.f32	s15, s4, s15
 800ab44:	ee30 2a06 	vadd.f32	s4, s0, s12
 800ab48:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800ab4c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ab50:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800ab54:	ee32 1a08 	vadd.f32	s2, s4, s16
 800ab58:	ee72 fa87 	vadd.f32	s31, s5, s14
 800ab5c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800ab60:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800ab64:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800ab68:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800ab6c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ab70:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800ab74:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800ab78:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800ab7c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ab80:	ee30 6a46 	vsub.f32	s12, s0, s12
 800ab84:	ee74 0a22 	vadd.f32	s1, s8, s5
 800ab88:	ee36 0a28 	vadd.f32	s0, s12, s17
 800ab8c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ab90:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ab94:	ee32 4a64 	vsub.f32	s8, s4, s9
 800ab98:	ee73 8a09 	vadd.f32	s17, s6, s18
 800ab9c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800aba0:	ee33 9a49 	vsub.f32	s18, s6, s18
 800aba4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800aba8:	ee35 3a85 	vadd.f32	s6, s11, s10
 800abac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800abb0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800abb4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800abb8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800abbc:	ee30 7a68 	vsub.f32	s14, s0, s17
 800abc0:	ee35 8a03 	vadd.f32	s16, s10, s6
 800abc4:	ee38 0a80 	vadd.f32	s0, s17, s0
 800abc8:	ee73 3a82 	vadd.f32	s7, s7, s4
 800abcc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800abd0:	ed9d 2a01 	vldr	s4, [sp, #4]
 800abd4:	eddd 1a02 	vldr	s3, [sp, #8]
 800abd8:	ee35 5a43 	vsub.f32	s10, s10, s6
 800abdc:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800abe0:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800abe4:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800abe8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800abec:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800abf0:	ee76 5a49 	vsub.f32	s11, s12, s18
 800abf4:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800abf8:	ee39 6a06 	vadd.f32	s12, s18, s12
 800abfc:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800ac00:	ee21 4a84 	vmul.f32	s8, s3, s8
 800ac04:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800ac08:	ee22 7a07 	vmul.f32	s14, s4, s14
 800ac0c:	ee22 2a08 	vmul.f32	s4, s4, s16
 800ac10:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ac14:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800ac18:	ee31 1a09 	vadd.f32	s2, s2, s18
 800ac1c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800ac20:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800ac24:	ee74 0a60 	vsub.f32	s1, s8, s1
 800ac28:	ee37 7a48 	vsub.f32	s14, s14, s16
 800ac2c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800ac30:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800ac34:	ee72 1a21 	vadd.f32	s3, s4, s3
 800ac38:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800ac3c:	ee38 2a89 	vadd.f32	s4, s17, s18
 800ac40:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800ac44:	ee38 8a04 	vadd.f32	s16, s16, s8
 800ac48:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800ac4c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800ac50:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800ac54:	eddd 5a03 	vldr	s11, [sp, #12]
 800ac58:	edc6 fa00 	vstr	s31, [r6]
 800ac5c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800ac60:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800ac64:	ee30 0a45 	vsub.f32	s0, s0, s10
 800ac68:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800ac6c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800ac70:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800ac74:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800ac78:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800ac7c:	ee25 6a86 	vmul.f32	s12, s11, s12
 800ac80:	ee74 4a89 	vadd.f32	s9, s9, s18
 800ac84:	ee34 3a43 	vsub.f32	s6, s8, s6
 800ac88:	ee78 8a85 	vadd.f32	s17, s17, s10
 800ac8c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ac90:	44c4      	add	ip, r8
 800ac92:	45e3      	cmp	fp, ip
 800ac94:	edc3 3a00 	vstr	s7, [r3]
 800ac98:	edc3 6a01 	vstr	s13, [r3, #4]
 800ac9c:	4456      	add	r6, sl
 800ac9e:	ed07 1a01 	vstr	s2, [r7, #-4]
 800aca2:	edc7 0a00 	vstr	s1, [r7]
 800aca6:	4453      	add	r3, sl
 800aca8:	ed80 2a00 	vstr	s4, [r0]
 800acac:	edc0 2a01 	vstr	s5, [r0, #4]
 800acb0:	4457      	add	r7, sl
 800acb2:	edc2 1a00 	vstr	s3, [r2]
 800acb6:	ed82 7a01 	vstr	s14, [r2, #4]
 800acba:	4450      	add	r0, sl
 800acbc:	ed85 8a00 	vstr	s16, [r5]
 800acc0:	ed85 0a01 	vstr	s0, [r5, #4]
 800acc4:	4452      	add	r2, sl
 800acc6:	edc1 4a00 	vstr	s9, [r1]
 800acca:	4455      	add	r5, sl
 800accc:	ed81 3a01 	vstr	s6, [r1, #4]
 800acd0:	edc4 8a00 	vstr	s17, [r4]
 800acd4:	ed84 6a01 	vstr	s12, [r4, #4]
 800acd8:	4451      	add	r1, sl
 800acda:	4454      	add	r4, sl
 800acdc:	f63f aeea 	bhi.w	800aab4 <arm_radix8_butterfly_f32+0x2fc>
 800ace0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace2:	3308      	adds	r3, #8
 800ace4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ace6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace8:	3308      	adds	r3, #8
 800acea:	930a      	str	r3, [sp, #40]	; 0x28
 800acec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acee:	3308      	adds	r3, #8
 800acf0:	9309      	str	r3, [sp, #36]	; 0x24
 800acf2:	9b08      	ldr	r3, [sp, #32]
 800acf4:	3308      	adds	r3, #8
 800acf6:	9308      	str	r3, [sp, #32]
 800acf8:	9b07      	ldr	r3, [sp, #28]
 800acfa:	3308      	adds	r3, #8
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	9b06      	ldr	r3, [sp, #24]
 800ad00:	3308      	adds	r3, #8
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	9b05      	ldr	r3, [sp, #20]
 800ad06:	3308      	adds	r3, #8
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	9b04      	ldr	r3, [sp, #16]
 800ad0c:	3308      	adds	r3, #8
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad12:	f109 0901 	add.w	r9, r9, #1
 800ad16:	454b      	cmp	r3, r9
 800ad18:	f47f ae7d 	bne.w	800aa16 <arm_radix8_butterfly_f32+0x25e>
 800ad1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	46d9      	mov	r9, fp
 800ad24:	9310      	str	r3, [sp, #64]	; 0x40
 800ad26:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800ad2a:	e554      	b.n	800a7d6 <arm_radix8_butterfly_f32+0x1e>
 800ad2c:	b015      	add	sp, #84	; 0x54
 800ad2e:	ecbd 8b10 	vpop	{d8-d15}
 800ad32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad36:	bf00      	nop

0800ad38 <__errno>:
 800ad38:	4b01      	ldr	r3, [pc, #4]	; (800ad40 <__errno+0x8>)
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20000014 	.word	0x20000014

0800ad44 <__libc_init_array>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4d0d      	ldr	r5, [pc, #52]	; (800ad7c <__libc_init_array+0x38>)
 800ad48:	4c0d      	ldr	r4, [pc, #52]	; (800ad80 <__libc_init_array+0x3c>)
 800ad4a:	1b64      	subs	r4, r4, r5
 800ad4c:	10a4      	asrs	r4, r4, #2
 800ad4e:	2600      	movs	r6, #0
 800ad50:	42a6      	cmp	r6, r4
 800ad52:	d109      	bne.n	800ad68 <__libc_init_array+0x24>
 800ad54:	4d0b      	ldr	r5, [pc, #44]	; (800ad84 <__libc_init_array+0x40>)
 800ad56:	4c0c      	ldr	r4, [pc, #48]	; (800ad88 <__libc_init_array+0x44>)
 800ad58:	f002 ff8a 	bl	800dc70 <_init>
 800ad5c:	1b64      	subs	r4, r4, r5
 800ad5e:	10a4      	asrs	r4, r4, #2
 800ad60:	2600      	movs	r6, #0
 800ad62:	42a6      	cmp	r6, r4
 800ad64:	d105      	bne.n	800ad72 <__libc_init_array+0x2e>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6c:	4798      	blx	r3
 800ad6e:	3601      	adds	r6, #1
 800ad70:	e7ee      	b.n	800ad50 <__libc_init_array+0xc>
 800ad72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad76:	4798      	blx	r3
 800ad78:	3601      	adds	r6, #1
 800ad7a:	e7f2      	b.n	800ad62 <__libc_init_array+0x1e>
 800ad7c:	08021104 	.word	0x08021104
 800ad80:	08021104 	.word	0x08021104
 800ad84:	08021104 	.word	0x08021104
 800ad88:	08021108 	.word	0x08021108

0800ad8c <memset>:
 800ad8c:	4402      	add	r2, r0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d100      	bne.n	800ad96 <memset+0xa>
 800ad94:	4770      	bx	lr
 800ad96:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9a:	e7f9      	b.n	800ad90 <memset+0x4>

0800ad9c <__cvt>:
 800ad9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	ec55 4b10 	vmov	r4, r5, d0
 800ada4:	2d00      	cmp	r5, #0
 800ada6:	460e      	mov	r6, r1
 800ada8:	4619      	mov	r1, r3
 800adaa:	462b      	mov	r3, r5
 800adac:	bfbb      	ittet	lt
 800adae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800adb2:	461d      	movlt	r5, r3
 800adb4:	2300      	movge	r3, #0
 800adb6:	232d      	movlt	r3, #45	; 0x2d
 800adb8:	700b      	strb	r3, [r1, #0]
 800adba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adc0:	4691      	mov	r9, r2
 800adc2:	f023 0820 	bic.w	r8, r3, #32
 800adc6:	bfbc      	itt	lt
 800adc8:	4622      	movlt	r2, r4
 800adca:	4614      	movlt	r4, r2
 800adcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800add0:	d005      	beq.n	800adde <__cvt+0x42>
 800add2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800add6:	d100      	bne.n	800adda <__cvt+0x3e>
 800add8:	3601      	adds	r6, #1
 800adda:	2102      	movs	r1, #2
 800addc:	e000      	b.n	800ade0 <__cvt+0x44>
 800adde:	2103      	movs	r1, #3
 800ade0:	ab03      	add	r3, sp, #12
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	ab02      	add	r3, sp, #8
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	ec45 4b10 	vmov	d0, r4, r5
 800adec:	4653      	mov	r3, sl
 800adee:	4632      	mov	r2, r6
 800adf0:	f000 fd0a 	bl	800b808 <_dtoa_r>
 800adf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800adf8:	4607      	mov	r7, r0
 800adfa:	d102      	bne.n	800ae02 <__cvt+0x66>
 800adfc:	f019 0f01 	tst.w	r9, #1
 800ae00:	d022      	beq.n	800ae48 <__cvt+0xac>
 800ae02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae06:	eb07 0906 	add.w	r9, r7, r6
 800ae0a:	d110      	bne.n	800ae2e <__cvt+0x92>
 800ae0c:	783b      	ldrb	r3, [r7, #0]
 800ae0e:	2b30      	cmp	r3, #48	; 0x30
 800ae10:	d10a      	bne.n	800ae28 <__cvt+0x8c>
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	4620      	mov	r0, r4
 800ae18:	4629      	mov	r1, r5
 800ae1a:	f7f5 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae1e:	b918      	cbnz	r0, 800ae28 <__cvt+0x8c>
 800ae20:	f1c6 0601 	rsb	r6, r6, #1
 800ae24:	f8ca 6000 	str.w	r6, [sl]
 800ae28:	f8da 3000 	ldr.w	r3, [sl]
 800ae2c:	4499      	add	r9, r3
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae3a:	b108      	cbz	r0, 800ae40 <__cvt+0xa4>
 800ae3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae40:	2230      	movs	r2, #48	; 0x30
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	454b      	cmp	r3, r9
 800ae46:	d307      	bcc.n	800ae58 <__cvt+0xbc>
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae4c:	1bdb      	subs	r3, r3, r7
 800ae4e:	4638      	mov	r0, r7
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	b004      	add	sp, #16
 800ae54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae58:	1c59      	adds	r1, r3, #1
 800ae5a:	9103      	str	r1, [sp, #12]
 800ae5c:	701a      	strb	r2, [r3, #0]
 800ae5e:	e7f0      	b.n	800ae42 <__cvt+0xa6>

0800ae60 <__exponent>:
 800ae60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae62:	4603      	mov	r3, r0
 800ae64:	2900      	cmp	r1, #0
 800ae66:	bfb8      	it	lt
 800ae68:	4249      	neglt	r1, r1
 800ae6a:	f803 2b02 	strb.w	r2, [r3], #2
 800ae6e:	bfb4      	ite	lt
 800ae70:	222d      	movlt	r2, #45	; 0x2d
 800ae72:	222b      	movge	r2, #43	; 0x2b
 800ae74:	2909      	cmp	r1, #9
 800ae76:	7042      	strb	r2, [r0, #1]
 800ae78:	dd2a      	ble.n	800aed0 <__exponent+0x70>
 800ae7a:	f10d 0407 	add.w	r4, sp, #7
 800ae7e:	46a4      	mov	ip, r4
 800ae80:	270a      	movs	r7, #10
 800ae82:	46a6      	mov	lr, r4
 800ae84:	460a      	mov	r2, r1
 800ae86:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae8a:	fb07 1516 	mls	r5, r7, r6, r1
 800ae8e:	3530      	adds	r5, #48	; 0x30
 800ae90:	2a63      	cmp	r2, #99	; 0x63
 800ae92:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	dcf1      	bgt.n	800ae82 <__exponent+0x22>
 800ae9e:	3130      	adds	r1, #48	; 0x30
 800aea0:	f1ae 0502 	sub.w	r5, lr, #2
 800aea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aea8:	1c44      	adds	r4, r0, #1
 800aeaa:	4629      	mov	r1, r5
 800aeac:	4561      	cmp	r1, ip
 800aeae:	d30a      	bcc.n	800aec6 <__exponent+0x66>
 800aeb0:	f10d 0209 	add.w	r2, sp, #9
 800aeb4:	eba2 020e 	sub.w	r2, r2, lr
 800aeb8:	4565      	cmp	r5, ip
 800aeba:	bf88      	it	hi
 800aebc:	2200      	movhi	r2, #0
 800aebe:	4413      	add	r3, r2
 800aec0:	1a18      	subs	r0, r3, r0
 800aec2:	b003      	add	sp, #12
 800aec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aece:	e7ed      	b.n	800aeac <__exponent+0x4c>
 800aed0:	2330      	movs	r3, #48	; 0x30
 800aed2:	3130      	adds	r1, #48	; 0x30
 800aed4:	7083      	strb	r3, [r0, #2]
 800aed6:	70c1      	strb	r1, [r0, #3]
 800aed8:	1d03      	adds	r3, r0, #4
 800aeda:	e7f1      	b.n	800aec0 <__exponent+0x60>

0800aedc <_printf_float>:
 800aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee0:	ed2d 8b02 	vpush	{d8}
 800aee4:	b08d      	sub	sp, #52	; 0x34
 800aee6:	460c      	mov	r4, r1
 800aee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aeec:	4616      	mov	r6, r2
 800aeee:	461f      	mov	r7, r3
 800aef0:	4605      	mov	r5, r0
 800aef2:	f001 fa77 	bl	800c3e4 <_localeconv_r>
 800aef6:	f8d0 a000 	ldr.w	sl, [r0]
 800aefa:	4650      	mov	r0, sl
 800aefc:	f7f5 f968 	bl	80001d0 <strlen>
 800af00:	2300      	movs	r3, #0
 800af02:	930a      	str	r3, [sp, #40]	; 0x28
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	9305      	str	r3, [sp, #20]
 800af08:	f8d8 3000 	ldr.w	r3, [r8]
 800af0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af10:	3307      	adds	r3, #7
 800af12:	f023 0307 	bic.w	r3, r3, #7
 800af16:	f103 0208 	add.w	r2, r3, #8
 800af1a:	f8c8 2000 	str.w	r2, [r8]
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af2e:	9307      	str	r3, [sp, #28]
 800af30:	f8cd 8018 	str.w	r8, [sp, #24]
 800af34:	ee08 0a10 	vmov	s16, r0
 800af38:	4b9f      	ldr	r3, [pc, #636]	; (800b1b8 <_printf_float+0x2dc>)
 800af3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af3e:	f04f 32ff 	mov.w	r2, #4294967295
 800af42:	f7f5 fdf3 	bl	8000b2c <__aeabi_dcmpun>
 800af46:	bb88      	cbnz	r0, 800afac <_printf_float+0xd0>
 800af48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af4c:	4b9a      	ldr	r3, [pc, #616]	; (800b1b8 <_printf_float+0x2dc>)
 800af4e:	f04f 32ff 	mov.w	r2, #4294967295
 800af52:	f7f5 fdcd 	bl	8000af0 <__aeabi_dcmple>
 800af56:	bb48      	cbnz	r0, 800afac <_printf_float+0xd0>
 800af58:	2200      	movs	r2, #0
 800af5a:	2300      	movs	r3, #0
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f7f5 fdbc 	bl	8000adc <__aeabi_dcmplt>
 800af64:	b110      	cbz	r0, 800af6c <_printf_float+0x90>
 800af66:	232d      	movs	r3, #45	; 0x2d
 800af68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6c:	4b93      	ldr	r3, [pc, #588]	; (800b1bc <_printf_float+0x2e0>)
 800af6e:	4894      	ldr	r0, [pc, #592]	; (800b1c0 <_printf_float+0x2e4>)
 800af70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af74:	bf94      	ite	ls
 800af76:	4698      	movls	r8, r3
 800af78:	4680      	movhi	r8, r0
 800af7a:	2303      	movs	r3, #3
 800af7c:	6123      	str	r3, [r4, #16]
 800af7e:	9b05      	ldr	r3, [sp, #20]
 800af80:	f023 0204 	bic.w	r2, r3, #4
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	f04f 0900 	mov.w	r9, #0
 800af8a:	9700      	str	r7, [sp, #0]
 800af8c:	4633      	mov	r3, r6
 800af8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f9d8 	bl	800b348 <_printf_common>
 800af98:	3001      	adds	r0, #1
 800af9a:	f040 8090 	bne.w	800b0be <_printf_float+0x1e2>
 800af9e:	f04f 30ff 	mov.w	r0, #4294967295
 800afa2:	b00d      	add	sp, #52	; 0x34
 800afa4:	ecbd 8b02 	vpop	{d8}
 800afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	4640      	mov	r0, r8
 800afb2:	4649      	mov	r1, r9
 800afb4:	f7f5 fdba 	bl	8000b2c <__aeabi_dcmpun>
 800afb8:	b140      	cbz	r0, 800afcc <_printf_float+0xf0>
 800afba:	464b      	mov	r3, r9
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	bfbc      	itt	lt
 800afc0:	232d      	movlt	r3, #45	; 0x2d
 800afc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800afc6:	487f      	ldr	r0, [pc, #508]	; (800b1c4 <_printf_float+0x2e8>)
 800afc8:	4b7f      	ldr	r3, [pc, #508]	; (800b1c8 <_printf_float+0x2ec>)
 800afca:	e7d1      	b.n	800af70 <_printf_float+0x94>
 800afcc:	6863      	ldr	r3, [r4, #4]
 800afce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800afd2:	9206      	str	r2, [sp, #24]
 800afd4:	1c5a      	adds	r2, r3, #1
 800afd6:	d13f      	bne.n	800b058 <_printf_float+0x17c>
 800afd8:	2306      	movs	r3, #6
 800afda:	6063      	str	r3, [r4, #4]
 800afdc:	9b05      	ldr	r3, [sp, #20]
 800afde:	6861      	ldr	r1, [r4, #4]
 800afe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afe4:	2300      	movs	r3, #0
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	ab0a      	add	r3, sp, #40	; 0x28
 800afea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afee:	ab09      	add	r3, sp, #36	; 0x24
 800aff0:	ec49 8b10 	vmov	d0, r8, r9
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	6022      	str	r2, [r4, #0]
 800aff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800affc:	4628      	mov	r0, r5
 800affe:	f7ff fecd 	bl	800ad9c <__cvt>
 800b002:	9b06      	ldr	r3, [sp, #24]
 800b004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b006:	2b47      	cmp	r3, #71	; 0x47
 800b008:	4680      	mov	r8, r0
 800b00a:	d108      	bne.n	800b01e <_printf_float+0x142>
 800b00c:	1cc8      	adds	r0, r1, #3
 800b00e:	db02      	blt.n	800b016 <_printf_float+0x13a>
 800b010:	6863      	ldr	r3, [r4, #4]
 800b012:	4299      	cmp	r1, r3
 800b014:	dd41      	ble.n	800b09a <_printf_float+0x1be>
 800b016:	f1ab 0b02 	sub.w	fp, fp, #2
 800b01a:	fa5f fb8b 	uxtb.w	fp, fp
 800b01e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b022:	d820      	bhi.n	800b066 <_printf_float+0x18a>
 800b024:	3901      	subs	r1, #1
 800b026:	465a      	mov	r2, fp
 800b028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b02c:	9109      	str	r1, [sp, #36]	; 0x24
 800b02e:	f7ff ff17 	bl	800ae60 <__exponent>
 800b032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b034:	1813      	adds	r3, r2, r0
 800b036:	2a01      	cmp	r2, #1
 800b038:	4681      	mov	r9, r0
 800b03a:	6123      	str	r3, [r4, #16]
 800b03c:	dc02      	bgt.n	800b044 <_printf_float+0x168>
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	07d2      	lsls	r2, r2, #31
 800b042:	d501      	bpl.n	800b048 <_printf_float+0x16c>
 800b044:	3301      	adds	r3, #1
 800b046:	6123      	str	r3, [r4, #16]
 800b048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d09c      	beq.n	800af8a <_printf_float+0xae>
 800b050:	232d      	movs	r3, #45	; 0x2d
 800b052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b056:	e798      	b.n	800af8a <_printf_float+0xae>
 800b058:	9a06      	ldr	r2, [sp, #24]
 800b05a:	2a47      	cmp	r2, #71	; 0x47
 800b05c:	d1be      	bne.n	800afdc <_printf_float+0x100>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1bc      	bne.n	800afdc <_printf_float+0x100>
 800b062:	2301      	movs	r3, #1
 800b064:	e7b9      	b.n	800afda <_printf_float+0xfe>
 800b066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b06a:	d118      	bne.n	800b09e <_printf_float+0x1c2>
 800b06c:	2900      	cmp	r1, #0
 800b06e:	6863      	ldr	r3, [r4, #4]
 800b070:	dd0b      	ble.n	800b08a <_printf_float+0x1ae>
 800b072:	6121      	str	r1, [r4, #16]
 800b074:	b913      	cbnz	r3, 800b07c <_printf_float+0x1a0>
 800b076:	6822      	ldr	r2, [r4, #0]
 800b078:	07d0      	lsls	r0, r2, #31
 800b07a:	d502      	bpl.n	800b082 <_printf_float+0x1a6>
 800b07c:	3301      	adds	r3, #1
 800b07e:	440b      	add	r3, r1
 800b080:	6123      	str	r3, [r4, #16]
 800b082:	65a1      	str	r1, [r4, #88]	; 0x58
 800b084:	f04f 0900 	mov.w	r9, #0
 800b088:	e7de      	b.n	800b048 <_printf_float+0x16c>
 800b08a:	b913      	cbnz	r3, 800b092 <_printf_float+0x1b6>
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	07d2      	lsls	r2, r2, #31
 800b090:	d501      	bpl.n	800b096 <_printf_float+0x1ba>
 800b092:	3302      	adds	r3, #2
 800b094:	e7f4      	b.n	800b080 <_printf_float+0x1a4>
 800b096:	2301      	movs	r3, #1
 800b098:	e7f2      	b.n	800b080 <_printf_float+0x1a4>
 800b09a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0a0:	4299      	cmp	r1, r3
 800b0a2:	db05      	blt.n	800b0b0 <_printf_float+0x1d4>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	6121      	str	r1, [r4, #16]
 800b0a8:	07d8      	lsls	r0, r3, #31
 800b0aa:	d5ea      	bpl.n	800b082 <_printf_float+0x1a6>
 800b0ac:	1c4b      	adds	r3, r1, #1
 800b0ae:	e7e7      	b.n	800b080 <_printf_float+0x1a4>
 800b0b0:	2900      	cmp	r1, #0
 800b0b2:	bfd4      	ite	le
 800b0b4:	f1c1 0202 	rsble	r2, r1, #2
 800b0b8:	2201      	movgt	r2, #1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	e7e0      	b.n	800b080 <_printf_float+0x1a4>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	055a      	lsls	r2, r3, #21
 800b0c2:	d407      	bmi.n	800b0d4 <_printf_float+0x1f8>
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	4642      	mov	r2, r8
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b8      	blx	r7
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	d12c      	bne.n	800b12c <_printf_float+0x250>
 800b0d2:	e764      	b.n	800af9e <_printf_float+0xc2>
 800b0d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0d8:	f240 80e0 	bls.w	800b29c <_printf_float+0x3c0>
 800b0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f7f5 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d034      	beq.n	800b156 <_printf_float+0x27a>
 800b0ec:	4a37      	ldr	r2, [pc, #220]	; (800b1cc <_printf_float+0x2f0>)
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b8      	blx	r7
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f43f af51 	beq.w	800af9e <_printf_float+0xc2>
 800b0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b100:	429a      	cmp	r2, r3
 800b102:	db02      	blt.n	800b10a <_printf_float+0x22e>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	07d8      	lsls	r0, r3, #31
 800b108:	d510      	bpl.n	800b12c <_printf_float+0x250>
 800b10a:	ee18 3a10 	vmov	r3, s16
 800b10e:	4652      	mov	r2, sl
 800b110:	4631      	mov	r1, r6
 800b112:	4628      	mov	r0, r5
 800b114:	47b8      	blx	r7
 800b116:	3001      	adds	r0, #1
 800b118:	f43f af41 	beq.w	800af9e <_printf_float+0xc2>
 800b11c:	f04f 0800 	mov.w	r8, #0
 800b120:	f104 091a 	add.w	r9, r4, #26
 800b124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b126:	3b01      	subs	r3, #1
 800b128:	4543      	cmp	r3, r8
 800b12a:	dc09      	bgt.n	800b140 <_printf_float+0x264>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	079b      	lsls	r3, r3, #30
 800b130:	f100 8105 	bmi.w	800b33e <_printf_float+0x462>
 800b134:	68e0      	ldr	r0, [r4, #12]
 800b136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b138:	4298      	cmp	r0, r3
 800b13a:	bfb8      	it	lt
 800b13c:	4618      	movlt	r0, r3
 800b13e:	e730      	b.n	800afa2 <_printf_float+0xc6>
 800b140:	2301      	movs	r3, #1
 800b142:	464a      	mov	r2, r9
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	f43f af27 	beq.w	800af9e <_printf_float+0xc2>
 800b150:	f108 0801 	add.w	r8, r8, #1
 800b154:	e7e6      	b.n	800b124 <_printf_float+0x248>
 800b156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dc39      	bgt.n	800b1d0 <_printf_float+0x2f4>
 800b15c:	4a1b      	ldr	r2, [pc, #108]	; (800b1cc <_printf_float+0x2f0>)
 800b15e:	2301      	movs	r3, #1
 800b160:	4631      	mov	r1, r6
 800b162:	4628      	mov	r0, r5
 800b164:	47b8      	blx	r7
 800b166:	3001      	adds	r0, #1
 800b168:	f43f af19 	beq.w	800af9e <_printf_float+0xc2>
 800b16c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b170:	4313      	orrs	r3, r2
 800b172:	d102      	bne.n	800b17a <_printf_float+0x29e>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	07d9      	lsls	r1, r3, #31
 800b178:	d5d8      	bpl.n	800b12c <_printf_float+0x250>
 800b17a:	ee18 3a10 	vmov	r3, s16
 800b17e:	4652      	mov	r2, sl
 800b180:	4631      	mov	r1, r6
 800b182:	4628      	mov	r0, r5
 800b184:	47b8      	blx	r7
 800b186:	3001      	adds	r0, #1
 800b188:	f43f af09 	beq.w	800af9e <_printf_float+0xc2>
 800b18c:	f04f 0900 	mov.w	r9, #0
 800b190:	f104 0a1a 	add.w	sl, r4, #26
 800b194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b196:	425b      	negs	r3, r3
 800b198:	454b      	cmp	r3, r9
 800b19a:	dc01      	bgt.n	800b1a0 <_printf_float+0x2c4>
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	e792      	b.n	800b0c6 <_printf_float+0x1ea>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4652      	mov	r2, sl
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	47b8      	blx	r7
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	f43f aef7 	beq.w	800af9e <_printf_float+0xc2>
 800b1b0:	f109 0901 	add.w	r9, r9, #1
 800b1b4:	e7ee      	b.n	800b194 <_printf_float+0x2b8>
 800b1b6:	bf00      	nop
 800b1b8:	7fefffff 	.word	0x7fefffff
 800b1bc:	08020d24 	.word	0x08020d24
 800b1c0:	08020d28 	.word	0x08020d28
 800b1c4:	08020d30 	.word	0x08020d30
 800b1c8:	08020d2c 	.word	0x08020d2c
 800b1cc:	08020d34 	.word	0x08020d34
 800b1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	bfa8      	it	ge
 800b1d8:	461a      	movge	r2, r3
 800b1da:	2a00      	cmp	r2, #0
 800b1dc:	4691      	mov	r9, r2
 800b1de:	dc37      	bgt.n	800b250 <_printf_float+0x374>
 800b1e0:	f04f 0b00 	mov.w	fp, #0
 800b1e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1e8:	f104 021a 	add.w	r2, r4, #26
 800b1ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1ee:	9305      	str	r3, [sp, #20]
 800b1f0:	eba3 0309 	sub.w	r3, r3, r9
 800b1f4:	455b      	cmp	r3, fp
 800b1f6:	dc33      	bgt.n	800b260 <_printf_float+0x384>
 800b1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	db3b      	blt.n	800b278 <_printf_float+0x39c>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	07da      	lsls	r2, r3, #31
 800b204:	d438      	bmi.n	800b278 <_printf_float+0x39c>
 800b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b208:	9a05      	ldr	r2, [sp, #20]
 800b20a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b20c:	1a9a      	subs	r2, r3, r2
 800b20e:	eba3 0901 	sub.w	r9, r3, r1
 800b212:	4591      	cmp	r9, r2
 800b214:	bfa8      	it	ge
 800b216:	4691      	movge	r9, r2
 800b218:	f1b9 0f00 	cmp.w	r9, #0
 800b21c:	dc35      	bgt.n	800b28a <_printf_float+0x3ae>
 800b21e:	f04f 0800 	mov.w	r8, #0
 800b222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b226:	f104 0a1a 	add.w	sl, r4, #26
 800b22a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b22e:	1a9b      	subs	r3, r3, r2
 800b230:	eba3 0309 	sub.w	r3, r3, r9
 800b234:	4543      	cmp	r3, r8
 800b236:	f77f af79 	ble.w	800b12c <_printf_float+0x250>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4652      	mov	r2, sl
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f aeaa 	beq.w	800af9e <_printf_float+0xc2>
 800b24a:	f108 0801 	add.w	r8, r8, #1
 800b24e:	e7ec      	b.n	800b22a <_printf_float+0x34e>
 800b250:	4613      	mov	r3, r2
 800b252:	4631      	mov	r1, r6
 800b254:	4642      	mov	r2, r8
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	d1c0      	bne.n	800b1e0 <_printf_float+0x304>
 800b25e:	e69e      	b.n	800af9e <_printf_float+0xc2>
 800b260:	2301      	movs	r3, #1
 800b262:	4631      	mov	r1, r6
 800b264:	4628      	mov	r0, r5
 800b266:	9205      	str	r2, [sp, #20]
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	f43f ae97 	beq.w	800af9e <_printf_float+0xc2>
 800b270:	9a05      	ldr	r2, [sp, #20]
 800b272:	f10b 0b01 	add.w	fp, fp, #1
 800b276:	e7b9      	b.n	800b1ec <_printf_float+0x310>
 800b278:	ee18 3a10 	vmov	r3, s16
 800b27c:	4652      	mov	r2, sl
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	d1be      	bne.n	800b206 <_printf_float+0x32a>
 800b288:	e689      	b.n	800af9e <_printf_float+0xc2>
 800b28a:	9a05      	ldr	r2, [sp, #20]
 800b28c:	464b      	mov	r3, r9
 800b28e:	4442      	add	r2, r8
 800b290:	4631      	mov	r1, r6
 800b292:	4628      	mov	r0, r5
 800b294:	47b8      	blx	r7
 800b296:	3001      	adds	r0, #1
 800b298:	d1c1      	bne.n	800b21e <_printf_float+0x342>
 800b29a:	e680      	b.n	800af9e <_printf_float+0xc2>
 800b29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b29e:	2a01      	cmp	r2, #1
 800b2a0:	dc01      	bgt.n	800b2a6 <_printf_float+0x3ca>
 800b2a2:	07db      	lsls	r3, r3, #31
 800b2a4:	d538      	bpl.n	800b318 <_printf_float+0x43c>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	47b8      	blx	r7
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	f43f ae74 	beq.w	800af9e <_printf_float+0xc2>
 800b2b6:	ee18 3a10 	vmov	r3, s16
 800b2ba:	4652      	mov	r2, sl
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4628      	mov	r0, r5
 800b2c0:	47b8      	blx	r7
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f43f ae6b 	beq.w	800af9e <_printf_float+0xc2>
 800b2c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f7f5 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2d4:	b9d8      	cbnz	r0, 800b30e <_printf_float+0x432>
 800b2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d8:	f108 0201 	add.w	r2, r8, #1
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	47b8      	blx	r7
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d10e      	bne.n	800b306 <_printf_float+0x42a>
 800b2e8:	e659      	b.n	800af9e <_printf_float+0xc2>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4652      	mov	r2, sl
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f ae52 	beq.w	800af9e <_printf_float+0xc2>
 800b2fa:	f108 0801 	add.w	r8, r8, #1
 800b2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b300:	3b01      	subs	r3, #1
 800b302:	4543      	cmp	r3, r8
 800b304:	dcf1      	bgt.n	800b2ea <_printf_float+0x40e>
 800b306:	464b      	mov	r3, r9
 800b308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b30c:	e6dc      	b.n	800b0c8 <_printf_float+0x1ec>
 800b30e:	f04f 0800 	mov.w	r8, #0
 800b312:	f104 0a1a 	add.w	sl, r4, #26
 800b316:	e7f2      	b.n	800b2fe <_printf_float+0x422>
 800b318:	2301      	movs	r3, #1
 800b31a:	4642      	mov	r2, r8
 800b31c:	e7df      	b.n	800b2de <_printf_float+0x402>
 800b31e:	2301      	movs	r3, #1
 800b320:	464a      	mov	r2, r9
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f ae38 	beq.w	800af9e <_printf_float+0xc2>
 800b32e:	f108 0801 	add.w	r8, r8, #1
 800b332:	68e3      	ldr	r3, [r4, #12]
 800b334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b336:	1a5b      	subs	r3, r3, r1
 800b338:	4543      	cmp	r3, r8
 800b33a:	dcf0      	bgt.n	800b31e <_printf_float+0x442>
 800b33c:	e6fa      	b.n	800b134 <_printf_float+0x258>
 800b33e:	f04f 0800 	mov.w	r8, #0
 800b342:	f104 0919 	add.w	r9, r4, #25
 800b346:	e7f4      	b.n	800b332 <_printf_float+0x456>

0800b348 <_printf_common>:
 800b348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b34c:	4616      	mov	r6, r2
 800b34e:	4699      	mov	r9, r3
 800b350:	688a      	ldr	r2, [r1, #8]
 800b352:	690b      	ldr	r3, [r1, #16]
 800b354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b358:	4293      	cmp	r3, r2
 800b35a:	bfb8      	it	lt
 800b35c:	4613      	movlt	r3, r2
 800b35e:	6033      	str	r3, [r6, #0]
 800b360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b364:	4607      	mov	r7, r0
 800b366:	460c      	mov	r4, r1
 800b368:	b10a      	cbz	r2, 800b36e <_printf_common+0x26>
 800b36a:	3301      	adds	r3, #1
 800b36c:	6033      	str	r3, [r6, #0]
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	0699      	lsls	r1, r3, #26
 800b372:	bf42      	ittt	mi
 800b374:	6833      	ldrmi	r3, [r6, #0]
 800b376:	3302      	addmi	r3, #2
 800b378:	6033      	strmi	r3, [r6, #0]
 800b37a:	6825      	ldr	r5, [r4, #0]
 800b37c:	f015 0506 	ands.w	r5, r5, #6
 800b380:	d106      	bne.n	800b390 <_printf_common+0x48>
 800b382:	f104 0a19 	add.w	sl, r4, #25
 800b386:	68e3      	ldr	r3, [r4, #12]
 800b388:	6832      	ldr	r2, [r6, #0]
 800b38a:	1a9b      	subs	r3, r3, r2
 800b38c:	42ab      	cmp	r3, r5
 800b38e:	dc26      	bgt.n	800b3de <_printf_common+0x96>
 800b390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b394:	1e13      	subs	r3, r2, #0
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	bf18      	it	ne
 800b39a:	2301      	movne	r3, #1
 800b39c:	0692      	lsls	r2, r2, #26
 800b39e:	d42b      	bmi.n	800b3f8 <_printf_common+0xb0>
 800b3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	47c0      	blx	r8
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d01e      	beq.n	800b3ec <_printf_common+0xa4>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	68e5      	ldr	r5, [r4, #12]
 800b3b2:	6832      	ldr	r2, [r6, #0]
 800b3b4:	f003 0306 	and.w	r3, r3, #6
 800b3b8:	2b04      	cmp	r3, #4
 800b3ba:	bf08      	it	eq
 800b3bc:	1aad      	subeq	r5, r5, r2
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	6922      	ldr	r2, [r4, #16]
 800b3c2:	bf0c      	ite	eq
 800b3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3c8:	2500      	movne	r5, #0
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	bfc4      	itt	gt
 800b3ce:	1a9b      	subgt	r3, r3, r2
 800b3d0:	18ed      	addgt	r5, r5, r3
 800b3d2:	2600      	movs	r6, #0
 800b3d4:	341a      	adds	r4, #26
 800b3d6:	42b5      	cmp	r5, r6
 800b3d8:	d11a      	bne.n	800b410 <_printf_common+0xc8>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	e008      	b.n	800b3f0 <_printf_common+0xa8>
 800b3de:	2301      	movs	r3, #1
 800b3e0:	4652      	mov	r2, sl
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	4638      	mov	r0, r7
 800b3e6:	47c0      	blx	r8
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	d103      	bne.n	800b3f4 <_printf_common+0xac>
 800b3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f4:	3501      	adds	r5, #1
 800b3f6:	e7c6      	b.n	800b386 <_printf_common+0x3e>
 800b3f8:	18e1      	adds	r1, r4, r3
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	2030      	movs	r0, #48	; 0x30
 800b3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b402:	4422      	add	r2, r4
 800b404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b40c:	3302      	adds	r3, #2
 800b40e:	e7c7      	b.n	800b3a0 <_printf_common+0x58>
 800b410:	2301      	movs	r3, #1
 800b412:	4622      	mov	r2, r4
 800b414:	4649      	mov	r1, r9
 800b416:	4638      	mov	r0, r7
 800b418:	47c0      	blx	r8
 800b41a:	3001      	adds	r0, #1
 800b41c:	d0e6      	beq.n	800b3ec <_printf_common+0xa4>
 800b41e:	3601      	adds	r6, #1
 800b420:	e7d9      	b.n	800b3d6 <_printf_common+0x8e>
	...

0800b424 <_printf_i>:
 800b424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b428:	7e0f      	ldrb	r7, [r1, #24]
 800b42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b42c:	2f78      	cmp	r7, #120	; 0x78
 800b42e:	4691      	mov	r9, r2
 800b430:	4680      	mov	r8, r0
 800b432:	460c      	mov	r4, r1
 800b434:	469a      	mov	sl, r3
 800b436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b43a:	d807      	bhi.n	800b44c <_printf_i+0x28>
 800b43c:	2f62      	cmp	r7, #98	; 0x62
 800b43e:	d80a      	bhi.n	800b456 <_printf_i+0x32>
 800b440:	2f00      	cmp	r7, #0
 800b442:	f000 80d8 	beq.w	800b5f6 <_printf_i+0x1d2>
 800b446:	2f58      	cmp	r7, #88	; 0x58
 800b448:	f000 80a3 	beq.w	800b592 <_printf_i+0x16e>
 800b44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b454:	e03a      	b.n	800b4cc <_printf_i+0xa8>
 800b456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b45a:	2b15      	cmp	r3, #21
 800b45c:	d8f6      	bhi.n	800b44c <_printf_i+0x28>
 800b45e:	a101      	add	r1, pc, #4	; (adr r1, 800b464 <_printf_i+0x40>)
 800b460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b464:	0800b4bd 	.word	0x0800b4bd
 800b468:	0800b4d1 	.word	0x0800b4d1
 800b46c:	0800b44d 	.word	0x0800b44d
 800b470:	0800b44d 	.word	0x0800b44d
 800b474:	0800b44d 	.word	0x0800b44d
 800b478:	0800b44d 	.word	0x0800b44d
 800b47c:	0800b4d1 	.word	0x0800b4d1
 800b480:	0800b44d 	.word	0x0800b44d
 800b484:	0800b44d 	.word	0x0800b44d
 800b488:	0800b44d 	.word	0x0800b44d
 800b48c:	0800b44d 	.word	0x0800b44d
 800b490:	0800b5dd 	.word	0x0800b5dd
 800b494:	0800b501 	.word	0x0800b501
 800b498:	0800b5bf 	.word	0x0800b5bf
 800b49c:	0800b44d 	.word	0x0800b44d
 800b4a0:	0800b44d 	.word	0x0800b44d
 800b4a4:	0800b5ff 	.word	0x0800b5ff
 800b4a8:	0800b44d 	.word	0x0800b44d
 800b4ac:	0800b501 	.word	0x0800b501
 800b4b0:	0800b44d 	.word	0x0800b44d
 800b4b4:	0800b44d 	.word	0x0800b44d
 800b4b8:	0800b5c7 	.word	0x0800b5c7
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	1d1a      	adds	r2, r3, #4
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	602a      	str	r2, [r5, #0]
 800b4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e0a3      	b.n	800b618 <_printf_i+0x1f4>
 800b4d0:	6820      	ldr	r0, [r4, #0]
 800b4d2:	6829      	ldr	r1, [r5, #0]
 800b4d4:	0606      	lsls	r6, r0, #24
 800b4d6:	f101 0304 	add.w	r3, r1, #4
 800b4da:	d50a      	bpl.n	800b4f2 <_printf_i+0xce>
 800b4dc:	680e      	ldr	r6, [r1, #0]
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	2e00      	cmp	r6, #0
 800b4e2:	da03      	bge.n	800b4ec <_printf_i+0xc8>
 800b4e4:	232d      	movs	r3, #45	; 0x2d
 800b4e6:	4276      	negs	r6, r6
 800b4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ec:	485e      	ldr	r0, [pc, #376]	; (800b668 <_printf_i+0x244>)
 800b4ee:	230a      	movs	r3, #10
 800b4f0:	e019      	b.n	800b526 <_printf_i+0x102>
 800b4f2:	680e      	ldr	r6, [r1, #0]
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4fa:	bf18      	it	ne
 800b4fc:	b236      	sxthne	r6, r6
 800b4fe:	e7ef      	b.n	800b4e0 <_printf_i+0xbc>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	6820      	ldr	r0, [r4, #0]
 800b504:	1d19      	adds	r1, r3, #4
 800b506:	6029      	str	r1, [r5, #0]
 800b508:	0601      	lsls	r1, r0, #24
 800b50a:	d501      	bpl.n	800b510 <_printf_i+0xec>
 800b50c:	681e      	ldr	r6, [r3, #0]
 800b50e:	e002      	b.n	800b516 <_printf_i+0xf2>
 800b510:	0646      	lsls	r6, r0, #25
 800b512:	d5fb      	bpl.n	800b50c <_printf_i+0xe8>
 800b514:	881e      	ldrh	r6, [r3, #0]
 800b516:	4854      	ldr	r0, [pc, #336]	; (800b668 <_printf_i+0x244>)
 800b518:	2f6f      	cmp	r7, #111	; 0x6f
 800b51a:	bf0c      	ite	eq
 800b51c:	2308      	moveq	r3, #8
 800b51e:	230a      	movne	r3, #10
 800b520:	2100      	movs	r1, #0
 800b522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b526:	6865      	ldr	r5, [r4, #4]
 800b528:	60a5      	str	r5, [r4, #8]
 800b52a:	2d00      	cmp	r5, #0
 800b52c:	bfa2      	ittt	ge
 800b52e:	6821      	ldrge	r1, [r4, #0]
 800b530:	f021 0104 	bicge.w	r1, r1, #4
 800b534:	6021      	strge	r1, [r4, #0]
 800b536:	b90e      	cbnz	r6, 800b53c <_printf_i+0x118>
 800b538:	2d00      	cmp	r5, #0
 800b53a:	d04d      	beq.n	800b5d8 <_printf_i+0x1b4>
 800b53c:	4615      	mov	r5, r2
 800b53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b542:	fb03 6711 	mls	r7, r3, r1, r6
 800b546:	5dc7      	ldrb	r7, [r0, r7]
 800b548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b54c:	4637      	mov	r7, r6
 800b54e:	42bb      	cmp	r3, r7
 800b550:	460e      	mov	r6, r1
 800b552:	d9f4      	bls.n	800b53e <_printf_i+0x11a>
 800b554:	2b08      	cmp	r3, #8
 800b556:	d10b      	bne.n	800b570 <_printf_i+0x14c>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	07de      	lsls	r6, r3, #31
 800b55c:	d508      	bpl.n	800b570 <_printf_i+0x14c>
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	4299      	cmp	r1, r3
 800b564:	bfde      	ittt	le
 800b566:	2330      	movle	r3, #48	; 0x30
 800b568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b570:	1b52      	subs	r2, r2, r5
 800b572:	6122      	str	r2, [r4, #16]
 800b574:	f8cd a000 	str.w	sl, [sp]
 800b578:	464b      	mov	r3, r9
 800b57a:	aa03      	add	r2, sp, #12
 800b57c:	4621      	mov	r1, r4
 800b57e:	4640      	mov	r0, r8
 800b580:	f7ff fee2 	bl	800b348 <_printf_common>
 800b584:	3001      	adds	r0, #1
 800b586:	d14c      	bne.n	800b622 <_printf_i+0x1fe>
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
 800b58c:	b004      	add	sp, #16
 800b58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b592:	4835      	ldr	r0, [pc, #212]	; (800b668 <_printf_i+0x244>)
 800b594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b598:	6829      	ldr	r1, [r5, #0]
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5a0:	6029      	str	r1, [r5, #0]
 800b5a2:	061d      	lsls	r5, r3, #24
 800b5a4:	d514      	bpl.n	800b5d0 <_printf_i+0x1ac>
 800b5a6:	07df      	lsls	r7, r3, #31
 800b5a8:	bf44      	itt	mi
 800b5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ae:	6023      	strmi	r3, [r4, #0]
 800b5b0:	b91e      	cbnz	r6, 800b5ba <_printf_i+0x196>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	f023 0320 	bic.w	r3, r3, #32
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	2310      	movs	r3, #16
 800b5bc:	e7b0      	b.n	800b520 <_printf_i+0xfc>
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	f043 0320 	orr.w	r3, r3, #32
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	2378      	movs	r3, #120	; 0x78
 800b5c8:	4828      	ldr	r0, [pc, #160]	; (800b66c <_printf_i+0x248>)
 800b5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5ce:	e7e3      	b.n	800b598 <_printf_i+0x174>
 800b5d0:	0659      	lsls	r1, r3, #25
 800b5d2:	bf48      	it	mi
 800b5d4:	b2b6      	uxthmi	r6, r6
 800b5d6:	e7e6      	b.n	800b5a6 <_printf_i+0x182>
 800b5d8:	4615      	mov	r5, r2
 800b5da:	e7bb      	b.n	800b554 <_printf_i+0x130>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	6826      	ldr	r6, [r4, #0]
 800b5e0:	6961      	ldr	r1, [r4, #20]
 800b5e2:	1d18      	adds	r0, r3, #4
 800b5e4:	6028      	str	r0, [r5, #0]
 800b5e6:	0635      	lsls	r5, r6, #24
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	d501      	bpl.n	800b5f0 <_printf_i+0x1cc>
 800b5ec:	6019      	str	r1, [r3, #0]
 800b5ee:	e002      	b.n	800b5f6 <_printf_i+0x1d2>
 800b5f0:	0670      	lsls	r0, r6, #25
 800b5f2:	d5fb      	bpl.n	800b5ec <_printf_i+0x1c8>
 800b5f4:	8019      	strh	r1, [r3, #0]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6123      	str	r3, [r4, #16]
 800b5fa:	4615      	mov	r5, r2
 800b5fc:	e7ba      	b.n	800b574 <_printf_i+0x150>
 800b5fe:	682b      	ldr	r3, [r5, #0]
 800b600:	1d1a      	adds	r2, r3, #4
 800b602:	602a      	str	r2, [r5, #0]
 800b604:	681d      	ldr	r5, [r3, #0]
 800b606:	6862      	ldr	r2, [r4, #4]
 800b608:	2100      	movs	r1, #0
 800b60a:	4628      	mov	r0, r5
 800b60c:	f7f4 fde8 	bl	80001e0 <memchr>
 800b610:	b108      	cbz	r0, 800b616 <_printf_i+0x1f2>
 800b612:	1b40      	subs	r0, r0, r5
 800b614:	6060      	str	r0, [r4, #4]
 800b616:	6863      	ldr	r3, [r4, #4]
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	2300      	movs	r3, #0
 800b61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b620:	e7a8      	b.n	800b574 <_printf_i+0x150>
 800b622:	6923      	ldr	r3, [r4, #16]
 800b624:	462a      	mov	r2, r5
 800b626:	4649      	mov	r1, r9
 800b628:	4640      	mov	r0, r8
 800b62a:	47d0      	blx	sl
 800b62c:	3001      	adds	r0, #1
 800b62e:	d0ab      	beq.n	800b588 <_printf_i+0x164>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	079b      	lsls	r3, r3, #30
 800b634:	d413      	bmi.n	800b65e <_printf_i+0x23a>
 800b636:	68e0      	ldr	r0, [r4, #12]
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	4298      	cmp	r0, r3
 800b63c:	bfb8      	it	lt
 800b63e:	4618      	movlt	r0, r3
 800b640:	e7a4      	b.n	800b58c <_printf_i+0x168>
 800b642:	2301      	movs	r3, #1
 800b644:	4632      	mov	r2, r6
 800b646:	4649      	mov	r1, r9
 800b648:	4640      	mov	r0, r8
 800b64a:	47d0      	blx	sl
 800b64c:	3001      	adds	r0, #1
 800b64e:	d09b      	beq.n	800b588 <_printf_i+0x164>
 800b650:	3501      	adds	r5, #1
 800b652:	68e3      	ldr	r3, [r4, #12]
 800b654:	9903      	ldr	r1, [sp, #12]
 800b656:	1a5b      	subs	r3, r3, r1
 800b658:	42ab      	cmp	r3, r5
 800b65a:	dcf2      	bgt.n	800b642 <_printf_i+0x21e>
 800b65c:	e7eb      	b.n	800b636 <_printf_i+0x212>
 800b65e:	2500      	movs	r5, #0
 800b660:	f104 0619 	add.w	r6, r4, #25
 800b664:	e7f5      	b.n	800b652 <_printf_i+0x22e>
 800b666:	bf00      	nop
 800b668:	08020d36 	.word	0x08020d36
 800b66c:	08020d47 	.word	0x08020d47

0800b670 <siprintf>:
 800b670:	b40e      	push	{r1, r2, r3}
 800b672:	b500      	push	{lr}
 800b674:	b09c      	sub	sp, #112	; 0x70
 800b676:	ab1d      	add	r3, sp, #116	; 0x74
 800b678:	9002      	str	r0, [sp, #8]
 800b67a:	9006      	str	r0, [sp, #24]
 800b67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b680:	4809      	ldr	r0, [pc, #36]	; (800b6a8 <siprintf+0x38>)
 800b682:	9107      	str	r1, [sp, #28]
 800b684:	9104      	str	r1, [sp, #16]
 800b686:	4909      	ldr	r1, [pc, #36]	; (800b6ac <siprintf+0x3c>)
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	9105      	str	r1, [sp, #20]
 800b68e:	6800      	ldr	r0, [r0, #0]
 800b690:	9301      	str	r3, [sp, #4]
 800b692:	a902      	add	r1, sp, #8
 800b694:	f001 fb96 	bl	800cdc4 <_svfiprintf_r>
 800b698:	9b02      	ldr	r3, [sp, #8]
 800b69a:	2200      	movs	r2, #0
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	b01c      	add	sp, #112	; 0x70
 800b6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a4:	b003      	add	sp, #12
 800b6a6:	4770      	bx	lr
 800b6a8:	20000014 	.word	0x20000014
 800b6ac:	ffff0208 	.word	0xffff0208

0800b6b0 <_vsiprintf_r>:
 800b6b0:	b500      	push	{lr}
 800b6b2:	b09b      	sub	sp, #108	; 0x6c
 800b6b4:	9100      	str	r1, [sp, #0]
 800b6b6:	9104      	str	r1, [sp, #16]
 800b6b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6bc:	9105      	str	r1, [sp, #20]
 800b6be:	9102      	str	r1, [sp, #8]
 800b6c0:	4905      	ldr	r1, [pc, #20]	; (800b6d8 <_vsiprintf_r+0x28>)
 800b6c2:	9103      	str	r1, [sp, #12]
 800b6c4:	4669      	mov	r1, sp
 800b6c6:	f001 fb7d 	bl	800cdc4 <_svfiprintf_r>
 800b6ca:	9b00      	ldr	r3, [sp, #0]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	b01b      	add	sp, #108	; 0x6c
 800b6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d6:	bf00      	nop
 800b6d8:	ffff0208 	.word	0xffff0208

0800b6dc <vsiprintf>:
 800b6dc:	4613      	mov	r3, r2
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4601      	mov	r1, r0
 800b6e2:	4802      	ldr	r0, [pc, #8]	; (800b6ec <vsiprintf+0x10>)
 800b6e4:	6800      	ldr	r0, [r0, #0]
 800b6e6:	f7ff bfe3 	b.w	800b6b0 <_vsiprintf_r>
 800b6ea:	bf00      	nop
 800b6ec:	20000014 	.word	0x20000014

0800b6f0 <quorem>:
 800b6f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	6903      	ldr	r3, [r0, #16]
 800b6f6:	690c      	ldr	r4, [r1, #16]
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	f2c0 8081 	blt.w	800b802 <quorem+0x112>
 800b700:	3c01      	subs	r4, #1
 800b702:	f101 0814 	add.w	r8, r1, #20
 800b706:	f100 0514 	add.w	r5, r0, #20
 800b70a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b718:	3301      	adds	r3, #1
 800b71a:	429a      	cmp	r2, r3
 800b71c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b720:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b724:	fbb2 f6f3 	udiv	r6, r2, r3
 800b728:	d331      	bcc.n	800b78e <quorem+0x9e>
 800b72a:	f04f 0e00 	mov.w	lr, #0
 800b72e:	4640      	mov	r0, r8
 800b730:	46ac      	mov	ip, r5
 800b732:	46f2      	mov	sl, lr
 800b734:	f850 2b04 	ldr.w	r2, [r0], #4
 800b738:	b293      	uxth	r3, r2
 800b73a:	fb06 e303 	mla	r3, r6, r3, lr
 800b73e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b742:	b29b      	uxth	r3, r3
 800b744:	ebaa 0303 	sub.w	r3, sl, r3
 800b748:	f8dc a000 	ldr.w	sl, [ip]
 800b74c:	0c12      	lsrs	r2, r2, #16
 800b74e:	fa13 f38a 	uxtah	r3, r3, sl
 800b752:	fb06 e202 	mla	r2, r6, r2, lr
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	9b00      	ldr	r3, [sp, #0]
 800b75a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b75e:	b292      	uxth	r2, r2
 800b760:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b768:	f8bd 3000 	ldrh.w	r3, [sp]
 800b76c:	4581      	cmp	r9, r0
 800b76e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b772:	f84c 3b04 	str.w	r3, [ip], #4
 800b776:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b77a:	d2db      	bcs.n	800b734 <quorem+0x44>
 800b77c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b780:	b92b      	cbnz	r3, 800b78e <quorem+0x9e>
 800b782:	9b01      	ldr	r3, [sp, #4]
 800b784:	3b04      	subs	r3, #4
 800b786:	429d      	cmp	r5, r3
 800b788:	461a      	mov	r2, r3
 800b78a:	d32e      	bcc.n	800b7ea <quorem+0xfa>
 800b78c:	613c      	str	r4, [r7, #16]
 800b78e:	4638      	mov	r0, r7
 800b790:	f001 f8c4 	bl	800c91c <__mcmp>
 800b794:	2800      	cmp	r0, #0
 800b796:	db24      	blt.n	800b7e2 <quorem+0xf2>
 800b798:	3601      	adds	r6, #1
 800b79a:	4628      	mov	r0, r5
 800b79c:	f04f 0c00 	mov.w	ip, #0
 800b7a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7a4:	f8d0 e000 	ldr.w	lr, [r0]
 800b7a8:	b293      	uxth	r3, r2
 800b7aa:	ebac 0303 	sub.w	r3, ip, r3
 800b7ae:	0c12      	lsrs	r2, r2, #16
 800b7b0:	fa13 f38e 	uxtah	r3, r3, lr
 800b7b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c2:	45c1      	cmp	r9, r8
 800b7c4:	f840 3b04 	str.w	r3, [r0], #4
 800b7c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7cc:	d2e8      	bcs.n	800b7a0 <quorem+0xb0>
 800b7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7d6:	b922      	cbnz	r2, 800b7e2 <quorem+0xf2>
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	429d      	cmp	r5, r3
 800b7dc:	461a      	mov	r2, r3
 800b7de:	d30a      	bcc.n	800b7f6 <quorem+0x106>
 800b7e0:	613c      	str	r4, [r7, #16]
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	b003      	add	sp, #12
 800b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ea:	6812      	ldr	r2, [r2, #0]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	2a00      	cmp	r2, #0
 800b7f0:	d1cc      	bne.n	800b78c <quorem+0x9c>
 800b7f2:	3c01      	subs	r4, #1
 800b7f4:	e7c7      	b.n	800b786 <quorem+0x96>
 800b7f6:	6812      	ldr	r2, [r2, #0]
 800b7f8:	3b04      	subs	r3, #4
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	d1f0      	bne.n	800b7e0 <quorem+0xf0>
 800b7fe:	3c01      	subs	r4, #1
 800b800:	e7eb      	b.n	800b7da <quorem+0xea>
 800b802:	2000      	movs	r0, #0
 800b804:	e7ee      	b.n	800b7e4 <quorem+0xf4>
	...

0800b808 <_dtoa_r>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	ed2d 8b04 	vpush	{d8-d9}
 800b810:	ec57 6b10 	vmov	r6, r7, d0
 800b814:	b093      	sub	sp, #76	; 0x4c
 800b816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b81c:	9106      	str	r1, [sp, #24]
 800b81e:	ee10 aa10 	vmov	sl, s0
 800b822:	4604      	mov	r4, r0
 800b824:	9209      	str	r2, [sp, #36]	; 0x24
 800b826:	930c      	str	r3, [sp, #48]	; 0x30
 800b828:	46bb      	mov	fp, r7
 800b82a:	b975      	cbnz	r5, 800b84a <_dtoa_r+0x42>
 800b82c:	2010      	movs	r0, #16
 800b82e:	f000 fddd 	bl	800c3ec <malloc>
 800b832:	4602      	mov	r2, r0
 800b834:	6260      	str	r0, [r4, #36]	; 0x24
 800b836:	b920      	cbnz	r0, 800b842 <_dtoa_r+0x3a>
 800b838:	4ba7      	ldr	r3, [pc, #668]	; (800bad8 <_dtoa_r+0x2d0>)
 800b83a:	21ea      	movs	r1, #234	; 0xea
 800b83c:	48a7      	ldr	r0, [pc, #668]	; (800badc <_dtoa_r+0x2d4>)
 800b83e:	f001 fbd1 	bl	800cfe4 <__assert_func>
 800b842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b846:	6005      	str	r5, [r0, #0]
 800b848:	60c5      	str	r5, [r0, #12]
 800b84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84c:	6819      	ldr	r1, [r3, #0]
 800b84e:	b151      	cbz	r1, 800b866 <_dtoa_r+0x5e>
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	604a      	str	r2, [r1, #4]
 800b854:	2301      	movs	r3, #1
 800b856:	4093      	lsls	r3, r2
 800b858:	608b      	str	r3, [r1, #8]
 800b85a:	4620      	mov	r0, r4
 800b85c:	f000 fe1c 	bl	800c498 <_Bfree>
 800b860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	1e3b      	subs	r3, r7, #0
 800b868:	bfaa      	itet	ge
 800b86a:	2300      	movge	r3, #0
 800b86c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b870:	f8c8 3000 	strge.w	r3, [r8]
 800b874:	4b9a      	ldr	r3, [pc, #616]	; (800bae0 <_dtoa_r+0x2d8>)
 800b876:	bfbc      	itt	lt
 800b878:	2201      	movlt	r2, #1
 800b87a:	f8c8 2000 	strlt.w	r2, [r8]
 800b87e:	ea33 030b 	bics.w	r3, r3, fp
 800b882:	d11b      	bne.n	800b8bc <_dtoa_r+0xb4>
 800b884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b886:	f242 730f 	movw	r3, #9999	; 0x270f
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b890:	4333      	orrs	r3, r6
 800b892:	f000 8592 	beq.w	800c3ba <_dtoa_r+0xbb2>
 800b896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b898:	b963      	cbnz	r3, 800b8b4 <_dtoa_r+0xac>
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <_dtoa_r+0x2dc>)
 800b89c:	e022      	b.n	800b8e4 <_dtoa_r+0xdc>
 800b89e:	4b92      	ldr	r3, [pc, #584]	; (800bae8 <_dtoa_r+0x2e0>)
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	9801      	ldr	r0, [sp, #4]
 800b8aa:	b013      	add	sp, #76	; 0x4c
 800b8ac:	ecbd 8b04 	vpop	{d8-d9}
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	4b8b      	ldr	r3, [pc, #556]	; (800bae4 <_dtoa_r+0x2dc>)
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	3303      	adds	r3, #3
 800b8ba:	e7f3      	b.n	800b8a4 <_dtoa_r+0x9c>
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4650      	mov	r0, sl
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	f7f5 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c8:	ec4b ab19 	vmov	d9, sl, fp
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	b158      	cbz	r0, 800b8e8 <_dtoa_r+0xe0>
 800b8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 856b 	beq.w	800c3b4 <_dtoa_r+0xbac>
 800b8de:	4883      	ldr	r0, [pc, #524]	; (800baec <_dtoa_r+0x2e4>)
 800b8e0:	6018      	str	r0, [r3, #0]
 800b8e2:	1e43      	subs	r3, r0, #1
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	e7df      	b.n	800b8a8 <_dtoa_r+0xa0>
 800b8e8:	ec4b ab10 	vmov	d0, sl, fp
 800b8ec:	aa10      	add	r2, sp, #64	; 0x40
 800b8ee:	a911      	add	r1, sp, #68	; 0x44
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f001 f8b9 	bl	800ca68 <__d2b>
 800b8f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8fa:	ee08 0a10 	vmov	s16, r0
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	f000 8084 	beq.w	800ba0c <_dtoa_r+0x204>
 800b904:	ee19 3a90 	vmov	r3, s19
 800b908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b90c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b910:	4656      	mov	r6, sl
 800b912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b91a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b91e:	4b74      	ldr	r3, [pc, #464]	; (800baf0 <_dtoa_r+0x2e8>)
 800b920:	2200      	movs	r2, #0
 800b922:	4630      	mov	r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	f7f4 fcaf 	bl	8000288 <__aeabi_dsub>
 800b92a:	a365      	add	r3, pc, #404	; (adr r3, 800bac0 <_dtoa_r+0x2b8>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe62 	bl	80005f8 <__aeabi_dmul>
 800b934:	a364      	add	r3, pc, #400	; (adr r3, 800bac8 <_dtoa_r+0x2c0>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fca7 	bl	800028c <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	4628      	mov	r0, r5
 800b942:	460f      	mov	r7, r1
 800b944:	f7f4 fdee 	bl	8000524 <__aeabi_i2d>
 800b948:	a361      	add	r3, pc, #388	; (adr r3, 800bad0 <_dtoa_r+0x2c8>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe53 	bl	80005f8 <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f4 fc97 	bl	800028c <__adddf3>
 800b95e:	4606      	mov	r6, r0
 800b960:	460f      	mov	r7, r1
 800b962:	f7f5 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800b966:	2200      	movs	r2, #0
 800b968:	9000      	str	r0, [sp, #0]
 800b96a:	2300      	movs	r3, #0
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	f7f5 f8b4 	bl	8000adc <__aeabi_dcmplt>
 800b974:	b150      	cbz	r0, 800b98c <_dtoa_r+0x184>
 800b976:	9800      	ldr	r0, [sp, #0]
 800b978:	f7f4 fdd4 	bl	8000524 <__aeabi_i2d>
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	f7f5 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b984:	b910      	cbnz	r0, 800b98c <_dtoa_r+0x184>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	3b01      	subs	r3, #1
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	9b00      	ldr	r3, [sp, #0]
 800b98e:	2b16      	cmp	r3, #22
 800b990:	d85a      	bhi.n	800ba48 <_dtoa_r+0x240>
 800b992:	9a00      	ldr	r2, [sp, #0]
 800b994:	4b57      	ldr	r3, [pc, #348]	; (800baf4 <_dtoa_r+0x2ec>)
 800b996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	ec51 0b19 	vmov	r0, r1, d9
 800b9a2:	f7f5 f89b 	bl	8000adc <__aeabi_dcmplt>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d050      	beq.n	800ba4c <_dtoa_r+0x244>
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9b6:	1b5d      	subs	r5, r3, r5
 800b9b8:	1e6b      	subs	r3, r5, #1
 800b9ba:	9305      	str	r3, [sp, #20]
 800b9bc:	bf45      	ittet	mi
 800b9be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9c2:	9304      	strmi	r3, [sp, #16]
 800b9c4:	2300      	movpl	r3, #0
 800b9c6:	2300      	movmi	r3, #0
 800b9c8:	bf4c      	ite	mi
 800b9ca:	9305      	strmi	r3, [sp, #20]
 800b9cc:	9304      	strpl	r3, [sp, #16]
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	db3d      	blt.n	800ba50 <_dtoa_r+0x248>
 800b9d4:	9b05      	ldr	r3, [sp, #20]
 800b9d6:	9a00      	ldr	r2, [sp, #0]
 800b9d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9da:	4413      	add	r3, r2
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9307      	str	r3, [sp, #28]
 800b9e2:	9b06      	ldr	r3, [sp, #24]
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	f200 8089 	bhi.w	800bafc <_dtoa_r+0x2f4>
 800b9ea:	2b05      	cmp	r3, #5
 800b9ec:	bfc4      	itt	gt
 800b9ee:	3b04      	subgt	r3, #4
 800b9f0:	9306      	strgt	r3, [sp, #24]
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9f8:	bfcc      	ite	gt
 800b9fa:	2500      	movgt	r5, #0
 800b9fc:	2501      	movle	r5, #1
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	f200 8087 	bhi.w	800bb12 <_dtoa_r+0x30a>
 800ba04:	e8df f003 	tbb	[pc, r3]
 800ba08:	59383a2d 	.word	0x59383a2d
 800ba0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba10:	441d      	add	r5, r3
 800ba12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	bfc1      	itttt	gt
 800ba1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba22:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba2a:	bfda      	itte	le
 800ba2c:	f1c3 0320 	rsble	r3, r3, #32
 800ba30:	fa06 f003 	lslle.w	r0, r6, r3
 800ba34:	4318      	orrgt	r0, r3
 800ba36:	f7f4 fd65 	bl	8000504 <__aeabi_ui2d>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba42:	3d01      	subs	r5, #1
 800ba44:	930e      	str	r3, [sp, #56]	; 0x38
 800ba46:	e76a      	b.n	800b91e <_dtoa_r+0x116>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e7b2      	b.n	800b9b2 <_dtoa_r+0x1aa>
 800ba4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba4e:	e7b1      	b.n	800b9b4 <_dtoa_r+0x1ac>
 800ba50:	9b04      	ldr	r3, [sp, #16]
 800ba52:	9a00      	ldr	r2, [sp, #0]
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	4253      	negs	r3, r2
 800ba5a:	9307      	str	r3, [sp, #28]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba60:	e7bf      	b.n	800b9e2 <_dtoa_r+0x1da>
 800ba62:	2300      	movs	r3, #0
 800ba64:	9308      	str	r3, [sp, #32]
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dc55      	bgt.n	800bb18 <_dtoa_r+0x310>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba72:	461a      	mov	r2, r3
 800ba74:	9209      	str	r2, [sp, #36]	; 0x24
 800ba76:	e00c      	b.n	800ba92 <_dtoa_r+0x28a>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e7f3      	b.n	800ba64 <_dtoa_r+0x25c>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba80:	9308      	str	r3, [sp, #32]
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	bfb8      	it	lt
 800ba90:	2301      	movlt	r3, #1
 800ba92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba94:	2200      	movs	r2, #0
 800ba96:	6042      	str	r2, [r0, #4]
 800ba98:	2204      	movs	r2, #4
 800ba9a:	f102 0614 	add.w	r6, r2, #20
 800ba9e:	429e      	cmp	r6, r3
 800baa0:	6841      	ldr	r1, [r0, #4]
 800baa2:	d93d      	bls.n	800bb20 <_dtoa_r+0x318>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f000 fcb7 	bl	800c418 <_Balloc>
 800baaa:	9001      	str	r0, [sp, #4]
 800baac:	2800      	cmp	r0, #0
 800baae:	d13b      	bne.n	800bb28 <_dtoa_r+0x320>
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <_dtoa_r+0x2f0>)
 800bab2:	4602      	mov	r2, r0
 800bab4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bab8:	e6c0      	b.n	800b83c <_dtoa_r+0x34>
 800baba:	2301      	movs	r3, #1
 800babc:	e7df      	b.n	800ba7e <_dtoa_r+0x276>
 800babe:	bf00      	nop
 800bac0:	636f4361 	.word	0x636f4361
 800bac4:	3fd287a7 	.word	0x3fd287a7
 800bac8:	8b60c8b3 	.word	0x8b60c8b3
 800bacc:	3fc68a28 	.word	0x3fc68a28
 800bad0:	509f79fb 	.word	0x509f79fb
 800bad4:	3fd34413 	.word	0x3fd34413
 800bad8:	08020d65 	.word	0x08020d65
 800badc:	08020d7c 	.word	0x08020d7c
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	08020d61 	.word	0x08020d61
 800bae8:	08020d58 	.word	0x08020d58
 800baec:	08020d35 	.word	0x08020d35
 800baf0:	3ff80000 	.word	0x3ff80000
 800baf4:	08020e70 	.word	0x08020e70
 800baf8:	08020dd7 	.word	0x08020dd7
 800bafc:	2501      	movs	r5, #1
 800bafe:	2300      	movs	r3, #0
 800bb00:	9306      	str	r3, [sp, #24]
 800bb02:	9508      	str	r5, [sp, #32]
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2312      	movs	r3, #18
 800bb10:	e7b0      	b.n	800ba74 <_dtoa_r+0x26c>
 800bb12:	2301      	movs	r3, #1
 800bb14:	9308      	str	r3, [sp, #32]
 800bb16:	e7f5      	b.n	800bb04 <_dtoa_r+0x2fc>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb1e:	e7b8      	b.n	800ba92 <_dtoa_r+0x28a>
 800bb20:	3101      	adds	r1, #1
 800bb22:	6041      	str	r1, [r0, #4]
 800bb24:	0052      	lsls	r2, r2, #1
 800bb26:	e7b8      	b.n	800ba9a <_dtoa_r+0x292>
 800bb28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb2a:	9a01      	ldr	r2, [sp, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	2b0e      	cmp	r3, #14
 800bb32:	f200 809d 	bhi.w	800bc70 <_dtoa_r+0x468>
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	f000 809a 	beq.w	800bc70 <_dtoa_r+0x468>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dd32      	ble.n	800bba8 <_dtoa_r+0x3a0>
 800bb42:	4ab7      	ldr	r2, [pc, #732]	; (800be20 <_dtoa_r+0x618>)
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb50:	9b00      	ldr	r3, [sp, #0]
 800bb52:	05d8      	lsls	r0, r3, #23
 800bb54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb58:	d516      	bpl.n	800bb88 <_dtoa_r+0x380>
 800bb5a:	4bb2      	ldr	r3, [pc, #712]	; (800be24 <_dtoa_r+0x61c>)
 800bb5c:	ec51 0b19 	vmov	r0, r1, d9
 800bb60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb64:	f7f4 fe72 	bl	800084c <__aeabi_ddiv>
 800bb68:	f007 070f 	and.w	r7, r7, #15
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	468b      	mov	fp, r1
 800bb70:	2503      	movs	r5, #3
 800bb72:	4eac      	ldr	r6, [pc, #688]	; (800be24 <_dtoa_r+0x61c>)
 800bb74:	b957      	cbnz	r7, 800bb8c <_dtoa_r+0x384>
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	f7f4 fe65 	bl	800084c <__aeabi_ddiv>
 800bb82:	4682      	mov	sl, r0
 800bb84:	468b      	mov	fp, r1
 800bb86:	e028      	b.n	800bbda <_dtoa_r+0x3d2>
 800bb88:	2502      	movs	r5, #2
 800bb8a:	e7f2      	b.n	800bb72 <_dtoa_r+0x36a>
 800bb8c:	07f9      	lsls	r1, r7, #31
 800bb8e:	d508      	bpl.n	800bba2 <_dtoa_r+0x39a>
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb98:	f7f4 fd2e 	bl	80005f8 <__aeabi_dmul>
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	4680      	mov	r8, r0
 800bba0:	4689      	mov	r9, r1
 800bba2:	107f      	asrs	r7, r7, #1
 800bba4:	3608      	adds	r6, #8
 800bba6:	e7e5      	b.n	800bb74 <_dtoa_r+0x36c>
 800bba8:	f000 809b 	beq.w	800bce2 <_dtoa_r+0x4da>
 800bbac:	9b00      	ldr	r3, [sp, #0]
 800bbae:	4f9d      	ldr	r7, [pc, #628]	; (800be24 <_dtoa_r+0x61c>)
 800bbb0:	425e      	negs	r6, r3
 800bbb2:	4b9b      	ldr	r3, [pc, #620]	; (800be20 <_dtoa_r+0x618>)
 800bbb4:	f006 020f 	and.w	r2, r6, #15
 800bbb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	ec51 0b19 	vmov	r0, r1, d9
 800bbc4:	f7f4 fd18 	bl	80005f8 <__aeabi_dmul>
 800bbc8:	1136      	asrs	r6, r6, #4
 800bbca:	4682      	mov	sl, r0
 800bbcc:	468b      	mov	fp, r1
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2502      	movs	r5, #2
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d17a      	bne.n	800bccc <_dtoa_r+0x4c4>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1d3      	bne.n	800bb82 <_dtoa_r+0x37a>
 800bbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 8082 	beq.w	800bce6 <_dtoa_r+0x4de>
 800bbe2:	4b91      	ldr	r3, [pc, #580]	; (800be28 <_dtoa_r+0x620>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	4659      	mov	r1, fp
 800bbea:	f7f4 ff77 	bl	8000adc <__aeabi_dcmplt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d079      	beq.n	800bce6 <_dtoa_r+0x4de>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d076      	beq.n	800bce6 <_dtoa_r+0x4de>
 800bbf8:	9b02      	ldr	r3, [sp, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	dd36      	ble.n	800bc6c <_dtoa_r+0x464>
 800bbfe:	9b00      	ldr	r3, [sp, #0]
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	1e5f      	subs	r7, r3, #1
 800bc06:	2200      	movs	r2, #0
 800bc08:	4b88      	ldr	r3, [pc, #544]	; (800be2c <_dtoa_r+0x624>)
 800bc0a:	f7f4 fcf5 	bl	80005f8 <__aeabi_dmul>
 800bc0e:	9e02      	ldr	r6, [sp, #8]
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	3501      	adds	r5, #1
 800bc16:	4628      	mov	r0, r5
 800bc18:	f7f4 fc84 	bl	8000524 <__aeabi_i2d>
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	465b      	mov	r3, fp
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	4b82      	ldr	r3, [pc, #520]	; (800be30 <_dtoa_r+0x628>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fb30 	bl	800028c <__adddf3>
 800bc2c:	46d0      	mov	r8, sl
 800bc2e:	46d9      	mov	r9, fp
 800bc30:	4682      	mov	sl, r0
 800bc32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	d158      	bne.n	800bcec <_dtoa_r+0x4e4>
 800bc3a:	4b7e      	ldr	r3, [pc, #504]	; (800be34 <_dtoa_r+0x62c>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fb21 	bl	8000288 <__aeabi_dsub>
 800bc46:	4652      	mov	r2, sl
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4680      	mov	r8, r0
 800bc4c:	4689      	mov	r9, r1
 800bc4e:	f7f4 ff63 	bl	8000b18 <__aeabi_dcmpgt>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f040 8295 	bne.w	800c182 <_dtoa_r+0x97a>
 800bc58:	4652      	mov	r2, sl
 800bc5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	f7f4 ff3b 	bl	8000adc <__aeabi_dcmplt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f040 8289 	bne.w	800c17e <_dtoa_r+0x976>
 800bc6c:	ec5b ab19 	vmov	sl, fp, d9
 800bc70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f2c0 8148 	blt.w	800bf08 <_dtoa_r+0x700>
 800bc78:	9a00      	ldr	r2, [sp, #0]
 800bc7a:	2a0e      	cmp	r2, #14
 800bc7c:	f300 8144 	bgt.w	800bf08 <_dtoa_r+0x700>
 800bc80:	4b67      	ldr	r3, [pc, #412]	; (800be20 <_dtoa_r+0x618>)
 800bc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f280 80d5 	bge.w	800be3c <_dtoa_r+0x634>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f300 80d1 	bgt.w	800be3c <_dtoa_r+0x634>
 800bc9a:	f040 826f 	bne.w	800c17c <_dtoa_r+0x974>
 800bc9e:	4b65      	ldr	r3, [pc, #404]	; (800be34 <_dtoa_r+0x62c>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fca7 	bl	80005f8 <__aeabi_dmul>
 800bcaa:	4652      	mov	r2, sl
 800bcac:	465b      	mov	r3, fp
 800bcae:	f7f4 ff29 	bl	8000b04 <__aeabi_dcmpge>
 800bcb2:	9e03      	ldr	r6, [sp, #12]
 800bcb4:	4637      	mov	r7, r6
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f040 8245 	bne.w	800c146 <_dtoa_r+0x93e>
 800bcbc:	9d01      	ldr	r5, [sp, #4]
 800bcbe:	2331      	movs	r3, #49	; 0x31
 800bcc0:	f805 3b01 	strb.w	r3, [r5], #1
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	e240      	b.n	800c14e <_dtoa_r+0x946>
 800bccc:	07f2      	lsls	r2, r6, #31
 800bcce:	d505      	bpl.n	800bcdc <_dtoa_r+0x4d4>
 800bcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	3501      	adds	r5, #1
 800bcda:	2301      	movs	r3, #1
 800bcdc:	1076      	asrs	r6, r6, #1
 800bcde:	3708      	adds	r7, #8
 800bce0:	e777      	b.n	800bbd2 <_dtoa_r+0x3ca>
 800bce2:	2502      	movs	r5, #2
 800bce4:	e779      	b.n	800bbda <_dtoa_r+0x3d2>
 800bce6:	9f00      	ldr	r7, [sp, #0]
 800bce8:	9e03      	ldr	r6, [sp, #12]
 800bcea:	e794      	b.n	800bc16 <_dtoa_r+0x40e>
 800bcec:	9901      	ldr	r1, [sp, #4]
 800bcee:	4b4c      	ldr	r3, [pc, #304]	; (800be20 <_dtoa_r+0x618>)
 800bcf0:	4431      	add	r1, r6
 800bcf2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcf4:	9908      	ldr	r1, [sp, #32]
 800bcf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d043      	beq.n	800bd8a <_dtoa_r+0x582>
 800bd02:	494d      	ldr	r1, [pc, #308]	; (800be38 <_dtoa_r+0x630>)
 800bd04:	2000      	movs	r0, #0
 800bd06:	f7f4 fda1 	bl	800084c <__aeabi_ddiv>
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	f7f4 fabb 	bl	8000288 <__aeabi_dsub>
 800bd12:	9d01      	ldr	r5, [sp, #4]
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	f7f4 ff1c 	bl	8000b58 <__aeabi_d2iz>
 800bd20:	4606      	mov	r6, r0
 800bd22:	f7f4 fbff 	bl	8000524 <__aeabi_i2d>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	f7f4 faab 	bl	8000288 <__aeabi_dsub>
 800bd32:	3630      	adds	r6, #48	; 0x30
 800bd34:	f805 6b01 	strb.w	r6, [r5], #1
 800bd38:	4652      	mov	r2, sl
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4689      	mov	r9, r1
 800bd40:	f7f4 fecc 	bl	8000adc <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d163      	bne.n	800be10 <_dtoa_r+0x608>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	4936      	ldr	r1, [pc, #216]	; (800be28 <_dtoa_r+0x620>)
 800bd4e:	2000      	movs	r0, #0
 800bd50:	f7f4 fa9a 	bl	8000288 <__aeabi_dsub>
 800bd54:	4652      	mov	r2, sl
 800bd56:	465b      	mov	r3, fp
 800bd58:	f7f4 fec0 	bl	8000adc <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f040 80b5 	bne.w	800becc <_dtoa_r+0x6c4>
 800bd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd64:	429d      	cmp	r5, r3
 800bd66:	d081      	beq.n	800bc6c <_dtoa_r+0x464>
 800bd68:	4b30      	ldr	r3, [pc, #192]	; (800be2c <_dtoa_r+0x624>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4659      	mov	r1, fp
 800bd70:	f7f4 fc42 	bl	80005f8 <__aeabi_dmul>
 800bd74:	4b2d      	ldr	r3, [pc, #180]	; (800be2c <_dtoa_r+0x624>)
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f7f4 fc3a 	bl	80005f8 <__aeabi_dmul>
 800bd84:	4680      	mov	r8, r0
 800bd86:	4689      	mov	r9, r1
 800bd88:	e7c6      	b.n	800bd18 <_dtoa_r+0x510>
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	f7f4 fc33 	bl	80005f8 <__aeabi_dmul>
 800bd92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd98:	4682      	mov	sl, r0
 800bd9a:	468b      	mov	fp, r1
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7f4 feda 	bl	8000b58 <__aeabi_d2iz>
 800bda4:	4606      	mov	r6, r0
 800bda6:	f7f4 fbbd 	bl	8000524 <__aeabi_i2d>
 800bdaa:	3630      	adds	r6, #48	; 0x30
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	f7f4 fa68 	bl	8000288 <__aeabi_dsub>
 800bdb8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	4689      	mov	r9, r1
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	d124      	bne.n	800be14 <_dtoa_r+0x60c>
 800bdca:	4b1b      	ldr	r3, [pc, #108]	; (800be38 <_dtoa_r+0x630>)
 800bdcc:	4650      	mov	r0, sl
 800bdce:	4659      	mov	r1, fp
 800bdd0:	f7f4 fa5c 	bl	800028c <__adddf3>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fe9c 	bl	8000b18 <__aeabi_dcmpgt>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d173      	bne.n	800becc <_dtoa_r+0x6c4>
 800bde4:	4652      	mov	r2, sl
 800bde6:	465b      	mov	r3, fp
 800bde8:	4913      	ldr	r1, [pc, #76]	; (800be38 <_dtoa_r+0x630>)
 800bdea:	2000      	movs	r0, #0
 800bdec:	f7f4 fa4c 	bl	8000288 <__aeabi_dsub>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	f7f4 fe70 	bl	8000adc <__aeabi_dcmplt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f43f af35 	beq.w	800bc6c <_dtoa_r+0x464>
 800be02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be04:	1e6b      	subs	r3, r5, #1
 800be06:	930f      	str	r3, [sp, #60]	; 0x3c
 800be08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be0c:	2b30      	cmp	r3, #48	; 0x30
 800be0e:	d0f8      	beq.n	800be02 <_dtoa_r+0x5fa>
 800be10:	9700      	str	r7, [sp, #0]
 800be12:	e049      	b.n	800bea8 <_dtoa_r+0x6a0>
 800be14:	4b05      	ldr	r3, [pc, #20]	; (800be2c <_dtoa_r+0x624>)
 800be16:	f7f4 fbef 	bl	80005f8 <__aeabi_dmul>
 800be1a:	4680      	mov	r8, r0
 800be1c:	4689      	mov	r9, r1
 800be1e:	e7bd      	b.n	800bd9c <_dtoa_r+0x594>
 800be20:	08020e70 	.word	0x08020e70
 800be24:	08020e48 	.word	0x08020e48
 800be28:	3ff00000 	.word	0x3ff00000
 800be2c:	40240000 	.word	0x40240000
 800be30:	401c0000 	.word	0x401c0000
 800be34:	40140000 	.word	0x40140000
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	9d01      	ldr	r5, [sp, #4]
 800be3e:	4656      	mov	r6, sl
 800be40:	465f      	mov	r7, fp
 800be42:	4642      	mov	r2, r8
 800be44:	464b      	mov	r3, r9
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fcff 	bl	800084c <__aeabi_ddiv>
 800be4e:	f7f4 fe83 	bl	8000b58 <__aeabi_d2iz>
 800be52:	4682      	mov	sl, r0
 800be54:	f7f4 fb66 	bl	8000524 <__aeabi_i2d>
 800be58:	4642      	mov	r2, r8
 800be5a:	464b      	mov	r3, r9
 800be5c:	f7f4 fbcc 	bl	80005f8 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be6c:	f7f4 fa0c 	bl	8000288 <__aeabi_dsub>
 800be70:	f805 6b01 	strb.w	r6, [r5], #1
 800be74:	9e01      	ldr	r6, [sp, #4]
 800be76:	9f03      	ldr	r7, [sp, #12]
 800be78:	1bae      	subs	r6, r5, r6
 800be7a:	42b7      	cmp	r7, r6
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	d135      	bne.n	800beee <_dtoa_r+0x6e6>
 800be82:	f7f4 fa03 	bl	800028c <__adddf3>
 800be86:	4642      	mov	r2, r8
 800be88:	464b      	mov	r3, r9
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	f7f4 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 800be92:	b9d0      	cbnz	r0, 800beca <_dtoa_r+0x6c2>
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea0:	b110      	cbz	r0, 800bea8 <_dtoa_r+0x6a0>
 800bea2:	f01a 0f01 	tst.w	sl, #1
 800bea6:	d110      	bne.n	800beca <_dtoa_r+0x6c2>
 800bea8:	4620      	mov	r0, r4
 800beaa:	ee18 1a10 	vmov	r1, s16
 800beae:	f000 faf3 	bl	800c498 <_Bfree>
 800beb2:	2300      	movs	r3, #0
 800beb4:	9800      	ldr	r0, [sp, #0]
 800beb6:	702b      	strb	r3, [r5, #0]
 800beb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beba:	3001      	adds	r0, #1
 800bebc:	6018      	str	r0, [r3, #0]
 800bebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f43f acf1 	beq.w	800b8a8 <_dtoa_r+0xa0>
 800bec6:	601d      	str	r5, [r3, #0]
 800bec8:	e4ee      	b.n	800b8a8 <_dtoa_r+0xa0>
 800beca:	9f00      	ldr	r7, [sp, #0]
 800becc:	462b      	mov	r3, r5
 800bece:	461d      	mov	r5, r3
 800bed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed4:	2a39      	cmp	r2, #57	; 0x39
 800bed6:	d106      	bne.n	800bee6 <_dtoa_r+0x6de>
 800bed8:	9a01      	ldr	r2, [sp, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d1f7      	bne.n	800bece <_dtoa_r+0x6c6>
 800bede:	9901      	ldr	r1, [sp, #4]
 800bee0:	2230      	movs	r2, #48	; 0x30
 800bee2:	3701      	adds	r7, #1
 800bee4:	700a      	strb	r2, [r1, #0]
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	3201      	adds	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e790      	b.n	800be10 <_dtoa_r+0x608>
 800beee:	4ba6      	ldr	r3, [pc, #664]	; (800c188 <_dtoa_r+0x980>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	f7f4 fb81 	bl	80005f8 <__aeabi_dmul>
 800bef6:	2200      	movs	r2, #0
 800bef8:	2300      	movs	r3, #0
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	f7f4 fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d09d      	beq.n	800be42 <_dtoa_r+0x63a>
 800bf06:	e7cf      	b.n	800bea8 <_dtoa_r+0x6a0>
 800bf08:	9a08      	ldr	r2, [sp, #32]
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	f000 80d7 	beq.w	800c0be <_dtoa_r+0x8b6>
 800bf10:	9a06      	ldr	r2, [sp, #24]
 800bf12:	2a01      	cmp	r2, #1
 800bf14:	f300 80ba 	bgt.w	800c08c <_dtoa_r+0x884>
 800bf18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	f000 80b2 	beq.w	800c084 <_dtoa_r+0x87c>
 800bf20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf24:	9e07      	ldr	r6, [sp, #28]
 800bf26:	9d04      	ldr	r5, [sp, #16]
 800bf28:	9a04      	ldr	r2, [sp, #16]
 800bf2a:	441a      	add	r2, r3
 800bf2c:	9204      	str	r2, [sp, #16]
 800bf2e:	9a05      	ldr	r2, [sp, #20]
 800bf30:	2101      	movs	r1, #1
 800bf32:	441a      	add	r2, r3
 800bf34:	4620      	mov	r0, r4
 800bf36:	9205      	str	r2, [sp, #20]
 800bf38:	f000 fb66 	bl	800c608 <__i2b>
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	2d00      	cmp	r5, #0
 800bf40:	dd0c      	ble.n	800bf5c <_dtoa_r+0x754>
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd09      	ble.n	800bf5c <_dtoa_r+0x754>
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	9a04      	ldr	r2, [sp, #16]
 800bf4c:	bfa8      	it	ge
 800bf4e:	462b      	movge	r3, r5
 800bf50:	1ad2      	subs	r2, r2, r3
 800bf52:	9204      	str	r2, [sp, #16]
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	1aed      	subs	r5, r5, r3
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	9305      	str	r3, [sp, #20]
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	b31b      	cbz	r3, 800bfa8 <_dtoa_r+0x7a0>
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80af 	beq.w	800c0c6 <_dtoa_r+0x8be>
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	dd13      	ble.n	800bf94 <_dtoa_r+0x78c>
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 fc09 	bl	800c788 <__pow5mult>
 800bf76:	ee18 2a10 	vmov	r2, s16
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 fb58 	bl	800c634 <__multiply>
 800bf84:	ee18 1a10 	vmov	r1, s16
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fa84 	bl	800c498 <_Bfree>
 800bf90:	ee08 8a10 	vmov	s16, r8
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	1b9a      	subs	r2, r3, r6
 800bf98:	d006      	beq.n	800bfa8 <_dtoa_r+0x7a0>
 800bf9a:	ee18 1a10 	vmov	r1, s16
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 fbf2 	bl	800c788 <__pow5mult>
 800bfa4:	ee08 0a10 	vmov	s16, r0
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fb2c 	bl	800c608 <__i2b>
 800bfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	f340 8088 	ble.w	800c0ca <_dtoa_r+0x8c2>
 800bfba:	461a      	mov	r2, r3
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 fbe2 	bl	800c788 <__pow5mult>
 800bfc4:	9b06      	ldr	r3, [sp, #24]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	4606      	mov	r6, r0
 800bfca:	f340 8081 	ble.w	800c0d0 <_dtoa_r+0x8c8>
 800bfce:	f04f 0800 	mov.w	r8, #0
 800bfd2:	6933      	ldr	r3, [r6, #16]
 800bfd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfd8:	6918      	ldr	r0, [r3, #16]
 800bfda:	f000 fac5 	bl	800c568 <__hi0bits>
 800bfde:	f1c0 0020 	rsb	r0, r0, #32
 800bfe2:	9b05      	ldr	r3, [sp, #20]
 800bfe4:	4418      	add	r0, r3
 800bfe6:	f010 001f 	ands.w	r0, r0, #31
 800bfea:	f000 8092 	beq.w	800c112 <_dtoa_r+0x90a>
 800bfee:	f1c0 0320 	rsb	r3, r0, #32
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	f340 808a 	ble.w	800c10c <_dtoa_r+0x904>
 800bff8:	f1c0 001c 	rsb	r0, r0, #28
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	4403      	add	r3, r0
 800c000:	9304      	str	r3, [sp, #16]
 800c002:	9b05      	ldr	r3, [sp, #20]
 800c004:	4403      	add	r3, r0
 800c006:	4405      	add	r5, r0
 800c008:	9305      	str	r3, [sp, #20]
 800c00a:	9b04      	ldr	r3, [sp, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dd07      	ble.n	800c020 <_dtoa_r+0x818>
 800c010:	ee18 1a10 	vmov	r1, s16
 800c014:	461a      	mov	r2, r3
 800c016:	4620      	mov	r0, r4
 800c018:	f000 fc10 	bl	800c83c <__lshift>
 800c01c:	ee08 0a10 	vmov	s16, r0
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	dd05      	ble.n	800c032 <_dtoa_r+0x82a>
 800c026:	4631      	mov	r1, r6
 800c028:	461a      	mov	r2, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	f000 fc06 	bl	800c83c <__lshift>
 800c030:	4606      	mov	r6, r0
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d06e      	beq.n	800c116 <_dtoa_r+0x90e>
 800c038:	ee18 0a10 	vmov	r0, s16
 800c03c:	4631      	mov	r1, r6
 800c03e:	f000 fc6d 	bl	800c91c <__mcmp>
 800c042:	2800      	cmp	r0, #0
 800c044:	da67      	bge.n	800c116 <_dtoa_r+0x90e>
 800c046:	9b00      	ldr	r3, [sp, #0]
 800c048:	3b01      	subs	r3, #1
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	220a      	movs	r2, #10
 800c052:	2300      	movs	r3, #0
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fa41 	bl	800c4dc <__multadd>
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	ee08 0a10 	vmov	s16, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 81b1 	beq.w	800c3c8 <_dtoa_r+0xbc0>
 800c066:	2300      	movs	r3, #0
 800c068:	4639      	mov	r1, r7
 800c06a:	220a      	movs	r2, #10
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fa35 	bl	800c4dc <__multadd>
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	4607      	mov	r7, r0
 800c078:	f300 808e 	bgt.w	800c198 <_dtoa_r+0x990>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dc51      	bgt.n	800c126 <_dtoa_r+0x91e>
 800c082:	e089      	b.n	800c198 <_dtoa_r+0x990>
 800c084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c08a:	e74b      	b.n	800bf24 <_dtoa_r+0x71c>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	1e5e      	subs	r6, r3, #1
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	42b3      	cmp	r3, r6
 800c094:	bfbf      	itttt	lt
 800c096:	9b07      	ldrlt	r3, [sp, #28]
 800c098:	9607      	strlt	r6, [sp, #28]
 800c09a:	1af2      	sublt	r2, r6, r3
 800c09c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c09e:	bfb6      	itet	lt
 800c0a0:	189b      	addlt	r3, r3, r2
 800c0a2:	1b9e      	subge	r6, r3, r6
 800c0a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	bfb8      	it	lt
 800c0aa:	2600      	movlt	r6, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bfb7      	itett	lt
 800c0b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0b8:	1a9d      	sublt	r5, r3, r2
 800c0ba:	2300      	movlt	r3, #0
 800c0bc:	e734      	b.n	800bf28 <_dtoa_r+0x720>
 800c0be:	9e07      	ldr	r6, [sp, #28]
 800c0c0:	9d04      	ldr	r5, [sp, #16]
 800c0c2:	9f08      	ldr	r7, [sp, #32]
 800c0c4:	e73b      	b.n	800bf3e <_dtoa_r+0x736>
 800c0c6:	9a07      	ldr	r2, [sp, #28]
 800c0c8:	e767      	b.n	800bf9a <_dtoa_r+0x792>
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	dc18      	bgt.n	800c102 <_dtoa_r+0x8fa>
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d115      	bne.n	800c102 <_dtoa_r+0x8fa>
 800c0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0da:	b993      	cbnz	r3, 800c102 <_dtoa_r+0x8fa>
 800c0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0e0:	0d1b      	lsrs	r3, r3, #20
 800c0e2:	051b      	lsls	r3, r3, #20
 800c0e4:	b183      	cbz	r3, 800c108 <_dtoa_r+0x900>
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	9b05      	ldr	r3, [sp, #20]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9305      	str	r3, [sp, #20]
 800c0f2:	f04f 0801 	mov.w	r8, #1
 800c0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f47f af6a 	bne.w	800bfd2 <_dtoa_r+0x7ca>
 800c0fe:	2001      	movs	r0, #1
 800c100:	e76f      	b.n	800bfe2 <_dtoa_r+0x7da>
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	e7f6      	b.n	800c0f6 <_dtoa_r+0x8ee>
 800c108:	4698      	mov	r8, r3
 800c10a:	e7f4      	b.n	800c0f6 <_dtoa_r+0x8ee>
 800c10c:	f43f af7d 	beq.w	800c00a <_dtoa_r+0x802>
 800c110:	4618      	mov	r0, r3
 800c112:	301c      	adds	r0, #28
 800c114:	e772      	b.n	800bffc <_dtoa_r+0x7f4>
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc37      	bgt.n	800c18c <_dtoa_r+0x984>
 800c11c:	9b06      	ldr	r3, [sp, #24]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	dd34      	ble.n	800c18c <_dtoa_r+0x984>
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	9302      	str	r3, [sp, #8]
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	b96b      	cbnz	r3, 800c146 <_dtoa_r+0x93e>
 800c12a:	4631      	mov	r1, r6
 800c12c:	2205      	movs	r2, #5
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 f9d4 	bl	800c4dc <__multadd>
 800c134:	4601      	mov	r1, r0
 800c136:	4606      	mov	r6, r0
 800c138:	ee18 0a10 	vmov	r0, s16
 800c13c:	f000 fbee 	bl	800c91c <__mcmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	f73f adbb 	bgt.w	800bcbc <_dtoa_r+0x4b4>
 800c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c148:	9d01      	ldr	r5, [sp, #4]
 800c14a:	43db      	mvns	r3, r3
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	4631      	mov	r1, r6
 800c154:	4620      	mov	r0, r4
 800c156:	f000 f99f 	bl	800c498 <_Bfree>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	f43f aea4 	beq.w	800bea8 <_dtoa_r+0x6a0>
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	d005      	beq.n	800c172 <_dtoa_r+0x96a>
 800c166:	45b8      	cmp	r8, r7
 800c168:	d003      	beq.n	800c172 <_dtoa_r+0x96a>
 800c16a:	4641      	mov	r1, r8
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 f993 	bl	800c498 <_Bfree>
 800c172:	4639      	mov	r1, r7
 800c174:	4620      	mov	r0, r4
 800c176:	f000 f98f 	bl	800c498 <_Bfree>
 800c17a:	e695      	b.n	800bea8 <_dtoa_r+0x6a0>
 800c17c:	2600      	movs	r6, #0
 800c17e:	4637      	mov	r7, r6
 800c180:	e7e1      	b.n	800c146 <_dtoa_r+0x93e>
 800c182:	9700      	str	r7, [sp, #0]
 800c184:	4637      	mov	r7, r6
 800c186:	e599      	b.n	800bcbc <_dtoa_r+0x4b4>
 800c188:	40240000 	.word	0x40240000
 800c18c:	9b08      	ldr	r3, [sp, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 80ca 	beq.w	800c328 <_dtoa_r+0xb20>
 800c194:	9b03      	ldr	r3, [sp, #12]
 800c196:	9302      	str	r3, [sp, #8]
 800c198:	2d00      	cmp	r5, #0
 800c19a:	dd05      	ble.n	800c1a8 <_dtoa_r+0x9a0>
 800c19c:	4639      	mov	r1, r7
 800c19e:	462a      	mov	r2, r5
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 fb4b 	bl	800c83c <__lshift>
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	d05b      	beq.n	800c266 <_dtoa_r+0xa5e>
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 f931 	bl	800c418 <_Balloc>
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	b928      	cbnz	r0, 800c1c6 <_dtoa_r+0x9be>
 800c1ba:	4b87      	ldr	r3, [pc, #540]	; (800c3d8 <_dtoa_r+0xbd0>)
 800c1bc:	4602      	mov	r2, r0
 800c1be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1c2:	f7ff bb3b 	b.w	800b83c <_dtoa_r+0x34>
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	3202      	adds	r2, #2
 800c1ca:	0092      	lsls	r2, r2, #2
 800c1cc:	f107 010c 	add.w	r1, r7, #12
 800c1d0:	300c      	adds	r0, #12
 800c1d2:	f000 f913 	bl	800c3fc <memcpy>
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f000 fb2e 	bl	800c83c <__lshift>
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	f103 0901 	add.w	r9, r3, #1
 800c1e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	f00a 0301 	and.w	r3, sl, #1
 800c1f2:	46b8      	mov	r8, r7
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	ee18 0a10 	vmov	r0, s16
 800c1fe:	f7ff fa77 	bl	800b6f0 <quorem>
 800c202:	4641      	mov	r1, r8
 800c204:	9002      	str	r0, [sp, #8]
 800c206:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c20a:	ee18 0a10 	vmov	r0, s16
 800c20e:	f000 fb85 	bl	800c91c <__mcmp>
 800c212:	463a      	mov	r2, r7
 800c214:	9003      	str	r0, [sp, #12]
 800c216:	4631      	mov	r1, r6
 800c218:	4620      	mov	r0, r4
 800c21a:	f000 fb9b 	bl	800c954 <__mdiff>
 800c21e:	68c2      	ldr	r2, [r0, #12]
 800c220:	f109 3bff 	add.w	fp, r9, #4294967295
 800c224:	4605      	mov	r5, r0
 800c226:	bb02      	cbnz	r2, 800c26a <_dtoa_r+0xa62>
 800c228:	4601      	mov	r1, r0
 800c22a:	ee18 0a10 	vmov	r0, s16
 800c22e:	f000 fb75 	bl	800c91c <__mcmp>
 800c232:	4602      	mov	r2, r0
 800c234:	4629      	mov	r1, r5
 800c236:	4620      	mov	r0, r4
 800c238:	9207      	str	r2, [sp, #28]
 800c23a:	f000 f92d 	bl	800c498 <_Bfree>
 800c23e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c242:	ea43 0102 	orr.w	r1, r3, r2
 800c246:	9b04      	ldr	r3, [sp, #16]
 800c248:	430b      	orrs	r3, r1
 800c24a:	464d      	mov	r5, r9
 800c24c:	d10f      	bne.n	800c26e <_dtoa_r+0xa66>
 800c24e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c252:	d02a      	beq.n	800c2aa <_dtoa_r+0xaa2>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd02      	ble.n	800c260 <_dtoa_r+0xa58>
 800c25a:	9b02      	ldr	r3, [sp, #8]
 800c25c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c260:	f88b a000 	strb.w	sl, [fp]
 800c264:	e775      	b.n	800c152 <_dtoa_r+0x94a>
 800c266:	4638      	mov	r0, r7
 800c268:	e7ba      	b.n	800c1e0 <_dtoa_r+0x9d8>
 800c26a:	2201      	movs	r2, #1
 800c26c:	e7e2      	b.n	800c234 <_dtoa_r+0xa2c>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	db04      	blt.n	800c27e <_dtoa_r+0xa76>
 800c274:	9906      	ldr	r1, [sp, #24]
 800c276:	430b      	orrs	r3, r1
 800c278:	9904      	ldr	r1, [sp, #16]
 800c27a:	430b      	orrs	r3, r1
 800c27c:	d122      	bne.n	800c2c4 <_dtoa_r+0xabc>
 800c27e:	2a00      	cmp	r2, #0
 800c280:	ddee      	ble.n	800c260 <_dtoa_r+0xa58>
 800c282:	ee18 1a10 	vmov	r1, s16
 800c286:	2201      	movs	r2, #1
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 fad7 	bl	800c83c <__lshift>
 800c28e:	4631      	mov	r1, r6
 800c290:	ee08 0a10 	vmov	s16, r0
 800c294:	f000 fb42 	bl	800c91c <__mcmp>
 800c298:	2800      	cmp	r0, #0
 800c29a:	dc03      	bgt.n	800c2a4 <_dtoa_r+0xa9c>
 800c29c:	d1e0      	bne.n	800c260 <_dtoa_r+0xa58>
 800c29e:	f01a 0f01 	tst.w	sl, #1
 800c2a2:	d0dd      	beq.n	800c260 <_dtoa_r+0xa58>
 800c2a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2a8:	d1d7      	bne.n	800c25a <_dtoa_r+0xa52>
 800c2aa:	2339      	movs	r3, #57	; 0x39
 800c2ac:	f88b 3000 	strb.w	r3, [fp]
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	461d      	mov	r5, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2ba:	2a39      	cmp	r2, #57	; 0x39
 800c2bc:	d071      	beq.n	800c3a2 <_dtoa_r+0xb9a>
 800c2be:	3201      	adds	r2, #1
 800c2c0:	701a      	strb	r2, [r3, #0]
 800c2c2:	e746      	b.n	800c152 <_dtoa_r+0x94a>
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	dd07      	ble.n	800c2d8 <_dtoa_r+0xad0>
 800c2c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2cc:	d0ed      	beq.n	800c2aa <_dtoa_r+0xaa2>
 800c2ce:	f10a 0301 	add.w	r3, sl, #1
 800c2d2:	f88b 3000 	strb.w	r3, [fp]
 800c2d6:	e73c      	b.n	800c152 <_dtoa_r+0x94a>
 800c2d8:	9b05      	ldr	r3, [sp, #20]
 800c2da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2de:	4599      	cmp	r9, r3
 800c2e0:	d047      	beq.n	800c372 <_dtoa_r+0xb6a>
 800c2e2:	ee18 1a10 	vmov	r1, s16
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 f8f6 	bl	800c4dc <__multadd>
 800c2f0:	45b8      	cmp	r8, r7
 800c2f2:	ee08 0a10 	vmov	s16, r0
 800c2f6:	f04f 0300 	mov.w	r3, #0
 800c2fa:	f04f 020a 	mov.w	r2, #10
 800c2fe:	4641      	mov	r1, r8
 800c300:	4620      	mov	r0, r4
 800c302:	d106      	bne.n	800c312 <_dtoa_r+0xb0a>
 800c304:	f000 f8ea 	bl	800c4dc <__multadd>
 800c308:	4680      	mov	r8, r0
 800c30a:	4607      	mov	r7, r0
 800c30c:	f109 0901 	add.w	r9, r9, #1
 800c310:	e772      	b.n	800c1f8 <_dtoa_r+0x9f0>
 800c312:	f000 f8e3 	bl	800c4dc <__multadd>
 800c316:	4639      	mov	r1, r7
 800c318:	4680      	mov	r8, r0
 800c31a:	2300      	movs	r3, #0
 800c31c:	220a      	movs	r2, #10
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 f8dc 	bl	800c4dc <__multadd>
 800c324:	4607      	mov	r7, r0
 800c326:	e7f1      	b.n	800c30c <_dtoa_r+0xb04>
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	9302      	str	r3, [sp, #8]
 800c32c:	9d01      	ldr	r5, [sp, #4]
 800c32e:	ee18 0a10 	vmov	r0, s16
 800c332:	4631      	mov	r1, r6
 800c334:	f7ff f9dc 	bl	800b6f0 <quorem>
 800c338:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c33c:	9b01      	ldr	r3, [sp, #4]
 800c33e:	f805 ab01 	strb.w	sl, [r5], #1
 800c342:	1aea      	subs	r2, r5, r3
 800c344:	9b02      	ldr	r3, [sp, #8]
 800c346:	4293      	cmp	r3, r2
 800c348:	dd09      	ble.n	800c35e <_dtoa_r+0xb56>
 800c34a:	ee18 1a10 	vmov	r1, s16
 800c34e:	2300      	movs	r3, #0
 800c350:	220a      	movs	r2, #10
 800c352:	4620      	mov	r0, r4
 800c354:	f000 f8c2 	bl	800c4dc <__multadd>
 800c358:	ee08 0a10 	vmov	s16, r0
 800c35c:	e7e7      	b.n	800c32e <_dtoa_r+0xb26>
 800c35e:	9b02      	ldr	r3, [sp, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	bfc8      	it	gt
 800c364:	461d      	movgt	r5, r3
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	bfd8      	it	le
 800c36a:	2501      	movle	r5, #1
 800c36c:	441d      	add	r5, r3
 800c36e:	f04f 0800 	mov.w	r8, #0
 800c372:	ee18 1a10 	vmov	r1, s16
 800c376:	2201      	movs	r2, #1
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fa5f 	bl	800c83c <__lshift>
 800c37e:	4631      	mov	r1, r6
 800c380:	ee08 0a10 	vmov	s16, r0
 800c384:	f000 faca 	bl	800c91c <__mcmp>
 800c388:	2800      	cmp	r0, #0
 800c38a:	dc91      	bgt.n	800c2b0 <_dtoa_r+0xaa8>
 800c38c:	d102      	bne.n	800c394 <_dtoa_r+0xb8c>
 800c38e:	f01a 0f01 	tst.w	sl, #1
 800c392:	d18d      	bne.n	800c2b0 <_dtoa_r+0xaa8>
 800c394:	462b      	mov	r3, r5
 800c396:	461d      	mov	r5, r3
 800c398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39c:	2a30      	cmp	r2, #48	; 0x30
 800c39e:	d0fa      	beq.n	800c396 <_dtoa_r+0xb8e>
 800c3a0:	e6d7      	b.n	800c152 <_dtoa_r+0x94a>
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d184      	bne.n	800c2b2 <_dtoa_r+0xaaa>
 800c3a8:	9b00      	ldr	r3, [sp, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	2331      	movs	r3, #49	; 0x31
 800c3b0:	7013      	strb	r3, [r2, #0]
 800c3b2:	e6ce      	b.n	800c152 <_dtoa_r+0x94a>
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <_dtoa_r+0xbd4>)
 800c3b6:	f7ff ba95 	b.w	800b8e4 <_dtoa_r+0xdc>
 800c3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f aa6e 	bne.w	800b89e <_dtoa_r+0x96>
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <_dtoa_r+0xbd8>)
 800c3c4:	f7ff ba8e 	b.w	800b8e4 <_dtoa_r+0xdc>
 800c3c8:	9b02      	ldr	r3, [sp, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dcae      	bgt.n	800c32c <_dtoa_r+0xb24>
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	f73f aea8 	bgt.w	800c126 <_dtoa_r+0x91e>
 800c3d6:	e7a9      	b.n	800c32c <_dtoa_r+0xb24>
 800c3d8:	08020dd7 	.word	0x08020dd7
 800c3dc:	08020d34 	.word	0x08020d34
 800c3e0:	08020d58 	.word	0x08020d58

0800c3e4 <_localeconv_r>:
 800c3e4:	4800      	ldr	r0, [pc, #0]	; (800c3e8 <_localeconv_r+0x4>)
 800c3e6:	4770      	bx	lr
 800c3e8:	20000168 	.word	0x20000168

0800c3ec <malloc>:
 800c3ec:	4b02      	ldr	r3, [pc, #8]	; (800c3f8 <malloc+0xc>)
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	f000 bc17 	b.w	800cc24 <_malloc_r>
 800c3f6:	bf00      	nop
 800c3f8:	20000014 	.word	0x20000014

0800c3fc <memcpy>:
 800c3fc:	440a      	add	r2, r1
 800c3fe:	4291      	cmp	r1, r2
 800c400:	f100 33ff 	add.w	r3, r0, #4294967295
 800c404:	d100      	bne.n	800c408 <memcpy+0xc>
 800c406:	4770      	bx	lr
 800c408:	b510      	push	{r4, lr}
 800c40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c40e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c412:	4291      	cmp	r1, r2
 800c414:	d1f9      	bne.n	800c40a <memcpy+0xe>
 800c416:	bd10      	pop	{r4, pc}

0800c418 <_Balloc>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c41c:	4604      	mov	r4, r0
 800c41e:	460d      	mov	r5, r1
 800c420:	b976      	cbnz	r6, 800c440 <_Balloc+0x28>
 800c422:	2010      	movs	r0, #16
 800c424:	f7ff ffe2 	bl	800c3ec <malloc>
 800c428:	4602      	mov	r2, r0
 800c42a:	6260      	str	r0, [r4, #36]	; 0x24
 800c42c:	b920      	cbnz	r0, 800c438 <_Balloc+0x20>
 800c42e:	4b18      	ldr	r3, [pc, #96]	; (800c490 <_Balloc+0x78>)
 800c430:	4818      	ldr	r0, [pc, #96]	; (800c494 <_Balloc+0x7c>)
 800c432:	2166      	movs	r1, #102	; 0x66
 800c434:	f000 fdd6 	bl	800cfe4 <__assert_func>
 800c438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c43c:	6006      	str	r6, [r0, #0]
 800c43e:	60c6      	str	r6, [r0, #12]
 800c440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c442:	68f3      	ldr	r3, [r6, #12]
 800c444:	b183      	cbz	r3, 800c468 <_Balloc+0x50>
 800c446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c44e:	b9b8      	cbnz	r0, 800c480 <_Balloc+0x68>
 800c450:	2101      	movs	r1, #1
 800c452:	fa01 f605 	lsl.w	r6, r1, r5
 800c456:	1d72      	adds	r2, r6, #5
 800c458:	0092      	lsls	r2, r2, #2
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 fb60 	bl	800cb20 <_calloc_r>
 800c460:	b160      	cbz	r0, 800c47c <_Balloc+0x64>
 800c462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c466:	e00e      	b.n	800c486 <_Balloc+0x6e>
 800c468:	2221      	movs	r2, #33	; 0x21
 800c46a:	2104      	movs	r1, #4
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fb57 	bl	800cb20 <_calloc_r>
 800c472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c474:	60f0      	str	r0, [r6, #12]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1e4      	bne.n	800c446 <_Balloc+0x2e>
 800c47c:	2000      	movs	r0, #0
 800c47e:	bd70      	pop	{r4, r5, r6, pc}
 800c480:	6802      	ldr	r2, [r0, #0]
 800c482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c486:	2300      	movs	r3, #0
 800c488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c48c:	e7f7      	b.n	800c47e <_Balloc+0x66>
 800c48e:	bf00      	nop
 800c490:	08020d65 	.word	0x08020d65
 800c494:	08020de8 	.word	0x08020de8

0800c498 <_Bfree>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c49c:	4605      	mov	r5, r0
 800c49e:	460c      	mov	r4, r1
 800c4a0:	b976      	cbnz	r6, 800c4c0 <_Bfree+0x28>
 800c4a2:	2010      	movs	r0, #16
 800c4a4:	f7ff ffa2 	bl	800c3ec <malloc>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	6268      	str	r0, [r5, #36]	; 0x24
 800c4ac:	b920      	cbnz	r0, 800c4b8 <_Bfree+0x20>
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <_Bfree+0x3c>)
 800c4b0:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <_Bfree+0x40>)
 800c4b2:	218a      	movs	r1, #138	; 0x8a
 800c4b4:	f000 fd96 	bl	800cfe4 <__assert_func>
 800c4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4bc:	6006      	str	r6, [r0, #0]
 800c4be:	60c6      	str	r6, [r0, #12]
 800c4c0:	b13c      	cbz	r4, 800c4d2 <_Bfree+0x3a>
 800c4c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4c4:	6862      	ldr	r2, [r4, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4cc:	6021      	str	r1, [r4, #0]
 800c4ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4d2:	bd70      	pop	{r4, r5, r6, pc}
 800c4d4:	08020d65 	.word	0x08020d65
 800c4d8:	08020de8 	.word	0x08020de8

0800c4dc <__multadd>:
 800c4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e0:	690d      	ldr	r5, [r1, #16]
 800c4e2:	4607      	mov	r7, r0
 800c4e4:	460c      	mov	r4, r1
 800c4e6:	461e      	mov	r6, r3
 800c4e8:	f101 0c14 	add.w	ip, r1, #20
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c4f2:	b299      	uxth	r1, r3
 800c4f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c4f8:	0c1e      	lsrs	r6, r3, #16
 800c4fa:	0c0b      	lsrs	r3, r1, #16
 800c4fc:	fb02 3306 	mla	r3, r2, r6, r3
 800c500:	b289      	uxth	r1, r1
 800c502:	3001      	adds	r0, #1
 800c504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c508:	4285      	cmp	r5, r0
 800c50a:	f84c 1b04 	str.w	r1, [ip], #4
 800c50e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c512:	dcec      	bgt.n	800c4ee <__multadd+0x12>
 800c514:	b30e      	cbz	r6, 800c55a <__multadd+0x7e>
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	42ab      	cmp	r3, r5
 800c51a:	dc19      	bgt.n	800c550 <__multadd+0x74>
 800c51c:	6861      	ldr	r1, [r4, #4]
 800c51e:	4638      	mov	r0, r7
 800c520:	3101      	adds	r1, #1
 800c522:	f7ff ff79 	bl	800c418 <_Balloc>
 800c526:	4680      	mov	r8, r0
 800c528:	b928      	cbnz	r0, 800c536 <__multadd+0x5a>
 800c52a:	4602      	mov	r2, r0
 800c52c:	4b0c      	ldr	r3, [pc, #48]	; (800c560 <__multadd+0x84>)
 800c52e:	480d      	ldr	r0, [pc, #52]	; (800c564 <__multadd+0x88>)
 800c530:	21b5      	movs	r1, #181	; 0xb5
 800c532:	f000 fd57 	bl	800cfe4 <__assert_func>
 800c536:	6922      	ldr	r2, [r4, #16]
 800c538:	3202      	adds	r2, #2
 800c53a:	f104 010c 	add.w	r1, r4, #12
 800c53e:	0092      	lsls	r2, r2, #2
 800c540:	300c      	adds	r0, #12
 800c542:	f7ff ff5b 	bl	800c3fc <memcpy>
 800c546:	4621      	mov	r1, r4
 800c548:	4638      	mov	r0, r7
 800c54a:	f7ff ffa5 	bl	800c498 <_Bfree>
 800c54e:	4644      	mov	r4, r8
 800c550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c554:	3501      	adds	r5, #1
 800c556:	615e      	str	r6, [r3, #20]
 800c558:	6125      	str	r5, [r4, #16]
 800c55a:	4620      	mov	r0, r4
 800c55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c560:	08020dd7 	.word	0x08020dd7
 800c564:	08020de8 	.word	0x08020de8

0800c568 <__hi0bits>:
 800c568:	0c03      	lsrs	r3, r0, #16
 800c56a:	041b      	lsls	r3, r3, #16
 800c56c:	b9d3      	cbnz	r3, 800c5a4 <__hi0bits+0x3c>
 800c56e:	0400      	lsls	r0, r0, #16
 800c570:	2310      	movs	r3, #16
 800c572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c576:	bf04      	itt	eq
 800c578:	0200      	lsleq	r0, r0, #8
 800c57a:	3308      	addeq	r3, #8
 800c57c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c580:	bf04      	itt	eq
 800c582:	0100      	lsleq	r0, r0, #4
 800c584:	3304      	addeq	r3, #4
 800c586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c58a:	bf04      	itt	eq
 800c58c:	0080      	lsleq	r0, r0, #2
 800c58e:	3302      	addeq	r3, #2
 800c590:	2800      	cmp	r0, #0
 800c592:	db05      	blt.n	800c5a0 <__hi0bits+0x38>
 800c594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c598:	f103 0301 	add.w	r3, r3, #1
 800c59c:	bf08      	it	eq
 800c59e:	2320      	moveq	r3, #32
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	4770      	bx	lr
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e7e4      	b.n	800c572 <__hi0bits+0xa>

0800c5a8 <__lo0bits>:
 800c5a8:	6803      	ldr	r3, [r0, #0]
 800c5aa:	f013 0207 	ands.w	r2, r3, #7
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	d00b      	beq.n	800c5ca <__lo0bits+0x22>
 800c5b2:	07da      	lsls	r2, r3, #31
 800c5b4:	d423      	bmi.n	800c5fe <__lo0bits+0x56>
 800c5b6:	0798      	lsls	r0, r3, #30
 800c5b8:	bf49      	itett	mi
 800c5ba:	085b      	lsrmi	r3, r3, #1
 800c5bc:	089b      	lsrpl	r3, r3, #2
 800c5be:	2001      	movmi	r0, #1
 800c5c0:	600b      	strmi	r3, [r1, #0]
 800c5c2:	bf5c      	itt	pl
 800c5c4:	600b      	strpl	r3, [r1, #0]
 800c5c6:	2002      	movpl	r0, #2
 800c5c8:	4770      	bx	lr
 800c5ca:	b298      	uxth	r0, r3
 800c5cc:	b9a8      	cbnz	r0, 800c5fa <__lo0bits+0x52>
 800c5ce:	0c1b      	lsrs	r3, r3, #16
 800c5d0:	2010      	movs	r0, #16
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	b90a      	cbnz	r2, 800c5da <__lo0bits+0x32>
 800c5d6:	3008      	adds	r0, #8
 800c5d8:	0a1b      	lsrs	r3, r3, #8
 800c5da:	071a      	lsls	r2, r3, #28
 800c5dc:	bf04      	itt	eq
 800c5de:	091b      	lsreq	r3, r3, #4
 800c5e0:	3004      	addeq	r0, #4
 800c5e2:	079a      	lsls	r2, r3, #30
 800c5e4:	bf04      	itt	eq
 800c5e6:	089b      	lsreq	r3, r3, #2
 800c5e8:	3002      	addeq	r0, #2
 800c5ea:	07da      	lsls	r2, r3, #31
 800c5ec:	d403      	bmi.n	800c5f6 <__lo0bits+0x4e>
 800c5ee:	085b      	lsrs	r3, r3, #1
 800c5f0:	f100 0001 	add.w	r0, r0, #1
 800c5f4:	d005      	beq.n	800c602 <__lo0bits+0x5a>
 800c5f6:	600b      	str	r3, [r1, #0]
 800c5f8:	4770      	bx	lr
 800c5fa:	4610      	mov	r0, r2
 800c5fc:	e7e9      	b.n	800c5d2 <__lo0bits+0x2a>
 800c5fe:	2000      	movs	r0, #0
 800c600:	4770      	bx	lr
 800c602:	2020      	movs	r0, #32
 800c604:	4770      	bx	lr
	...

0800c608 <__i2b>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	460c      	mov	r4, r1
 800c60c:	2101      	movs	r1, #1
 800c60e:	f7ff ff03 	bl	800c418 <_Balloc>
 800c612:	4602      	mov	r2, r0
 800c614:	b928      	cbnz	r0, 800c622 <__i2b+0x1a>
 800c616:	4b05      	ldr	r3, [pc, #20]	; (800c62c <__i2b+0x24>)
 800c618:	4805      	ldr	r0, [pc, #20]	; (800c630 <__i2b+0x28>)
 800c61a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c61e:	f000 fce1 	bl	800cfe4 <__assert_func>
 800c622:	2301      	movs	r3, #1
 800c624:	6144      	str	r4, [r0, #20]
 800c626:	6103      	str	r3, [r0, #16]
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	bf00      	nop
 800c62c:	08020dd7 	.word	0x08020dd7
 800c630:	08020de8 	.word	0x08020de8

0800c634 <__multiply>:
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	4691      	mov	r9, r2
 800c63a:	690a      	ldr	r2, [r1, #16]
 800c63c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c640:	429a      	cmp	r2, r3
 800c642:	bfb8      	it	lt
 800c644:	460b      	movlt	r3, r1
 800c646:	460c      	mov	r4, r1
 800c648:	bfbc      	itt	lt
 800c64a:	464c      	movlt	r4, r9
 800c64c:	4699      	movlt	r9, r3
 800c64e:	6927      	ldr	r7, [r4, #16]
 800c650:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c654:	68a3      	ldr	r3, [r4, #8]
 800c656:	6861      	ldr	r1, [r4, #4]
 800c658:	eb07 060a 	add.w	r6, r7, sl
 800c65c:	42b3      	cmp	r3, r6
 800c65e:	b085      	sub	sp, #20
 800c660:	bfb8      	it	lt
 800c662:	3101      	addlt	r1, #1
 800c664:	f7ff fed8 	bl	800c418 <_Balloc>
 800c668:	b930      	cbnz	r0, 800c678 <__multiply+0x44>
 800c66a:	4602      	mov	r2, r0
 800c66c:	4b44      	ldr	r3, [pc, #272]	; (800c780 <__multiply+0x14c>)
 800c66e:	4845      	ldr	r0, [pc, #276]	; (800c784 <__multiply+0x150>)
 800c670:	f240 115d 	movw	r1, #349	; 0x15d
 800c674:	f000 fcb6 	bl	800cfe4 <__assert_func>
 800c678:	f100 0514 	add.w	r5, r0, #20
 800c67c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c680:	462b      	mov	r3, r5
 800c682:	2200      	movs	r2, #0
 800c684:	4543      	cmp	r3, r8
 800c686:	d321      	bcc.n	800c6cc <__multiply+0x98>
 800c688:	f104 0314 	add.w	r3, r4, #20
 800c68c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c690:	f109 0314 	add.w	r3, r9, #20
 800c694:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c698:	9202      	str	r2, [sp, #8]
 800c69a:	1b3a      	subs	r2, r7, r4
 800c69c:	3a15      	subs	r2, #21
 800c69e:	f022 0203 	bic.w	r2, r2, #3
 800c6a2:	3204      	adds	r2, #4
 800c6a4:	f104 0115 	add.w	r1, r4, #21
 800c6a8:	428f      	cmp	r7, r1
 800c6aa:	bf38      	it	cc
 800c6ac:	2204      	movcc	r2, #4
 800c6ae:	9201      	str	r2, [sp, #4]
 800c6b0:	9a02      	ldr	r2, [sp, #8]
 800c6b2:	9303      	str	r3, [sp, #12]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d80c      	bhi.n	800c6d2 <__multiply+0x9e>
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	dd03      	ble.n	800c6c4 <__multiply+0x90>
 800c6bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d05a      	beq.n	800c77a <__multiply+0x146>
 800c6c4:	6106      	str	r6, [r0, #16]
 800c6c6:	b005      	add	sp, #20
 800c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6cc:	f843 2b04 	str.w	r2, [r3], #4
 800c6d0:	e7d8      	b.n	800c684 <__multiply+0x50>
 800c6d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6d6:	f1ba 0f00 	cmp.w	sl, #0
 800c6da:	d024      	beq.n	800c726 <__multiply+0xf2>
 800c6dc:	f104 0e14 	add.w	lr, r4, #20
 800c6e0:	46a9      	mov	r9, r5
 800c6e2:	f04f 0c00 	mov.w	ip, #0
 800c6e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6ea:	f8d9 1000 	ldr.w	r1, [r9]
 800c6ee:	fa1f fb82 	uxth.w	fp, r2
 800c6f2:	b289      	uxth	r1, r1
 800c6f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800c700:	4461      	add	r1, ip
 800c702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c706:	fb0a c20b 	mla	r2, sl, fp, ip
 800c70a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c70e:	b289      	uxth	r1, r1
 800c710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c714:	4577      	cmp	r7, lr
 800c716:	f849 1b04 	str.w	r1, [r9], #4
 800c71a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c71e:	d8e2      	bhi.n	800c6e6 <__multiply+0xb2>
 800c720:	9a01      	ldr	r2, [sp, #4]
 800c722:	f845 c002 	str.w	ip, [r5, r2]
 800c726:	9a03      	ldr	r2, [sp, #12]
 800c728:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c72c:	3304      	adds	r3, #4
 800c72e:	f1b9 0f00 	cmp.w	r9, #0
 800c732:	d020      	beq.n	800c776 <__multiply+0x142>
 800c734:	6829      	ldr	r1, [r5, #0]
 800c736:	f104 0c14 	add.w	ip, r4, #20
 800c73a:	46ae      	mov	lr, r5
 800c73c:	f04f 0a00 	mov.w	sl, #0
 800c740:	f8bc b000 	ldrh.w	fp, [ip]
 800c744:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c748:	fb09 220b 	mla	r2, r9, fp, r2
 800c74c:	4492      	add	sl, r2
 800c74e:	b289      	uxth	r1, r1
 800c750:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c754:	f84e 1b04 	str.w	r1, [lr], #4
 800c758:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c75c:	f8be 1000 	ldrh.w	r1, [lr]
 800c760:	0c12      	lsrs	r2, r2, #16
 800c762:	fb09 1102 	mla	r1, r9, r2, r1
 800c766:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c76a:	4567      	cmp	r7, ip
 800c76c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c770:	d8e6      	bhi.n	800c740 <__multiply+0x10c>
 800c772:	9a01      	ldr	r2, [sp, #4]
 800c774:	50a9      	str	r1, [r5, r2]
 800c776:	3504      	adds	r5, #4
 800c778:	e79a      	b.n	800c6b0 <__multiply+0x7c>
 800c77a:	3e01      	subs	r6, #1
 800c77c:	e79c      	b.n	800c6b8 <__multiply+0x84>
 800c77e:	bf00      	nop
 800c780:	08020dd7 	.word	0x08020dd7
 800c784:	08020de8 	.word	0x08020de8

0800c788 <__pow5mult>:
 800c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c78c:	4615      	mov	r5, r2
 800c78e:	f012 0203 	ands.w	r2, r2, #3
 800c792:	4606      	mov	r6, r0
 800c794:	460f      	mov	r7, r1
 800c796:	d007      	beq.n	800c7a8 <__pow5mult+0x20>
 800c798:	4c25      	ldr	r4, [pc, #148]	; (800c830 <__pow5mult+0xa8>)
 800c79a:	3a01      	subs	r2, #1
 800c79c:	2300      	movs	r3, #0
 800c79e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7a2:	f7ff fe9b 	bl	800c4dc <__multadd>
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	10ad      	asrs	r5, r5, #2
 800c7aa:	d03d      	beq.n	800c828 <__pow5mult+0xa0>
 800c7ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ae:	b97c      	cbnz	r4, 800c7d0 <__pow5mult+0x48>
 800c7b0:	2010      	movs	r0, #16
 800c7b2:	f7ff fe1b 	bl	800c3ec <malloc>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	6270      	str	r0, [r6, #36]	; 0x24
 800c7ba:	b928      	cbnz	r0, 800c7c8 <__pow5mult+0x40>
 800c7bc:	4b1d      	ldr	r3, [pc, #116]	; (800c834 <__pow5mult+0xac>)
 800c7be:	481e      	ldr	r0, [pc, #120]	; (800c838 <__pow5mult+0xb0>)
 800c7c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7c4:	f000 fc0e 	bl	800cfe4 <__assert_func>
 800c7c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7cc:	6004      	str	r4, [r0, #0]
 800c7ce:	60c4      	str	r4, [r0, #12]
 800c7d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7d8:	b94c      	cbnz	r4, 800c7ee <__pow5mult+0x66>
 800c7da:	f240 2171 	movw	r1, #625	; 0x271
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f7ff ff12 	bl	800c608 <__i2b>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	6003      	str	r3, [r0, #0]
 800c7ee:	f04f 0900 	mov.w	r9, #0
 800c7f2:	07eb      	lsls	r3, r5, #31
 800c7f4:	d50a      	bpl.n	800c80c <__pow5mult+0x84>
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4622      	mov	r2, r4
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ff1a 	bl	800c634 <__multiply>
 800c800:	4639      	mov	r1, r7
 800c802:	4680      	mov	r8, r0
 800c804:	4630      	mov	r0, r6
 800c806:	f7ff fe47 	bl	800c498 <_Bfree>
 800c80a:	4647      	mov	r7, r8
 800c80c:	106d      	asrs	r5, r5, #1
 800c80e:	d00b      	beq.n	800c828 <__pow5mult+0xa0>
 800c810:	6820      	ldr	r0, [r4, #0]
 800c812:	b938      	cbnz	r0, 800c824 <__pow5mult+0x9c>
 800c814:	4622      	mov	r2, r4
 800c816:	4621      	mov	r1, r4
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff ff0b 	bl	800c634 <__multiply>
 800c81e:	6020      	str	r0, [r4, #0]
 800c820:	f8c0 9000 	str.w	r9, [r0]
 800c824:	4604      	mov	r4, r0
 800c826:	e7e4      	b.n	800c7f2 <__pow5mult+0x6a>
 800c828:	4638      	mov	r0, r7
 800c82a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c82e:	bf00      	nop
 800c830:	08020f38 	.word	0x08020f38
 800c834:	08020d65 	.word	0x08020d65
 800c838:	08020de8 	.word	0x08020de8

0800c83c <__lshift>:
 800c83c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c840:	460c      	mov	r4, r1
 800c842:	6849      	ldr	r1, [r1, #4]
 800c844:	6923      	ldr	r3, [r4, #16]
 800c846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c84a:	68a3      	ldr	r3, [r4, #8]
 800c84c:	4607      	mov	r7, r0
 800c84e:	4691      	mov	r9, r2
 800c850:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c854:	f108 0601 	add.w	r6, r8, #1
 800c858:	42b3      	cmp	r3, r6
 800c85a:	db0b      	blt.n	800c874 <__lshift+0x38>
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff fddb 	bl	800c418 <_Balloc>
 800c862:	4605      	mov	r5, r0
 800c864:	b948      	cbnz	r0, 800c87a <__lshift+0x3e>
 800c866:	4602      	mov	r2, r0
 800c868:	4b2a      	ldr	r3, [pc, #168]	; (800c914 <__lshift+0xd8>)
 800c86a:	482b      	ldr	r0, [pc, #172]	; (800c918 <__lshift+0xdc>)
 800c86c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c870:	f000 fbb8 	bl	800cfe4 <__assert_func>
 800c874:	3101      	adds	r1, #1
 800c876:	005b      	lsls	r3, r3, #1
 800c878:	e7ee      	b.n	800c858 <__lshift+0x1c>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f100 0114 	add.w	r1, r0, #20
 800c880:	f100 0210 	add.w	r2, r0, #16
 800c884:	4618      	mov	r0, r3
 800c886:	4553      	cmp	r3, sl
 800c888:	db37      	blt.n	800c8fa <__lshift+0xbe>
 800c88a:	6920      	ldr	r0, [r4, #16]
 800c88c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c890:	f104 0314 	add.w	r3, r4, #20
 800c894:	f019 091f 	ands.w	r9, r9, #31
 800c898:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c89c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8a0:	d02f      	beq.n	800c902 <__lshift+0xc6>
 800c8a2:	f1c9 0e20 	rsb	lr, r9, #32
 800c8a6:	468a      	mov	sl, r1
 800c8a8:	f04f 0c00 	mov.w	ip, #0
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	fa02 f209 	lsl.w	r2, r2, r9
 800c8b2:	ea42 020c 	orr.w	r2, r2, ip
 800c8b6:	f84a 2b04 	str.w	r2, [sl], #4
 800c8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8be:	4298      	cmp	r0, r3
 800c8c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8c4:	d8f2      	bhi.n	800c8ac <__lshift+0x70>
 800c8c6:	1b03      	subs	r3, r0, r4
 800c8c8:	3b15      	subs	r3, #21
 800c8ca:	f023 0303 	bic.w	r3, r3, #3
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	f104 0215 	add.w	r2, r4, #21
 800c8d4:	4290      	cmp	r0, r2
 800c8d6:	bf38      	it	cc
 800c8d8:	2304      	movcc	r3, #4
 800c8da:	f841 c003 	str.w	ip, [r1, r3]
 800c8de:	f1bc 0f00 	cmp.w	ip, #0
 800c8e2:	d001      	beq.n	800c8e8 <__lshift+0xac>
 800c8e4:	f108 0602 	add.w	r6, r8, #2
 800c8e8:	3e01      	subs	r6, #1
 800c8ea:	4638      	mov	r0, r7
 800c8ec:	612e      	str	r6, [r5, #16]
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	f7ff fdd2 	bl	800c498 <_Bfree>
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8fe:	3301      	adds	r3, #1
 800c900:	e7c1      	b.n	800c886 <__lshift+0x4a>
 800c902:	3904      	subs	r1, #4
 800c904:	f853 2b04 	ldr.w	r2, [r3], #4
 800c908:	f841 2f04 	str.w	r2, [r1, #4]!
 800c90c:	4298      	cmp	r0, r3
 800c90e:	d8f9      	bhi.n	800c904 <__lshift+0xc8>
 800c910:	e7ea      	b.n	800c8e8 <__lshift+0xac>
 800c912:	bf00      	nop
 800c914:	08020dd7 	.word	0x08020dd7
 800c918:	08020de8 	.word	0x08020de8

0800c91c <__mcmp>:
 800c91c:	b530      	push	{r4, r5, lr}
 800c91e:	6902      	ldr	r2, [r0, #16]
 800c920:	690c      	ldr	r4, [r1, #16]
 800c922:	1b12      	subs	r2, r2, r4
 800c924:	d10e      	bne.n	800c944 <__mcmp+0x28>
 800c926:	f100 0314 	add.w	r3, r0, #20
 800c92a:	3114      	adds	r1, #20
 800c92c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c93c:	42a5      	cmp	r5, r4
 800c93e:	d003      	beq.n	800c948 <__mcmp+0x2c>
 800c940:	d305      	bcc.n	800c94e <__mcmp+0x32>
 800c942:	2201      	movs	r2, #1
 800c944:	4610      	mov	r0, r2
 800c946:	bd30      	pop	{r4, r5, pc}
 800c948:	4283      	cmp	r3, r0
 800c94a:	d3f3      	bcc.n	800c934 <__mcmp+0x18>
 800c94c:	e7fa      	b.n	800c944 <__mcmp+0x28>
 800c94e:	f04f 32ff 	mov.w	r2, #4294967295
 800c952:	e7f7      	b.n	800c944 <__mcmp+0x28>

0800c954 <__mdiff>:
 800c954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c958:	460c      	mov	r4, r1
 800c95a:	4606      	mov	r6, r0
 800c95c:	4611      	mov	r1, r2
 800c95e:	4620      	mov	r0, r4
 800c960:	4690      	mov	r8, r2
 800c962:	f7ff ffdb 	bl	800c91c <__mcmp>
 800c966:	1e05      	subs	r5, r0, #0
 800c968:	d110      	bne.n	800c98c <__mdiff+0x38>
 800c96a:	4629      	mov	r1, r5
 800c96c:	4630      	mov	r0, r6
 800c96e:	f7ff fd53 	bl	800c418 <_Balloc>
 800c972:	b930      	cbnz	r0, 800c982 <__mdiff+0x2e>
 800c974:	4b3a      	ldr	r3, [pc, #232]	; (800ca60 <__mdiff+0x10c>)
 800c976:	4602      	mov	r2, r0
 800c978:	f240 2132 	movw	r1, #562	; 0x232
 800c97c:	4839      	ldr	r0, [pc, #228]	; (800ca64 <__mdiff+0x110>)
 800c97e:	f000 fb31 	bl	800cfe4 <__assert_func>
 800c982:	2301      	movs	r3, #1
 800c984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98c:	bfa4      	itt	ge
 800c98e:	4643      	movge	r3, r8
 800c990:	46a0      	movge	r8, r4
 800c992:	4630      	mov	r0, r6
 800c994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c998:	bfa6      	itte	ge
 800c99a:	461c      	movge	r4, r3
 800c99c:	2500      	movge	r5, #0
 800c99e:	2501      	movlt	r5, #1
 800c9a0:	f7ff fd3a 	bl	800c418 <_Balloc>
 800c9a4:	b920      	cbnz	r0, 800c9b0 <__mdiff+0x5c>
 800c9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ca60 <__mdiff+0x10c>)
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9ae:	e7e5      	b.n	800c97c <__mdiff+0x28>
 800c9b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9b4:	6926      	ldr	r6, [r4, #16]
 800c9b6:	60c5      	str	r5, [r0, #12]
 800c9b8:	f104 0914 	add.w	r9, r4, #20
 800c9bc:	f108 0514 	add.w	r5, r8, #20
 800c9c0:	f100 0e14 	add.w	lr, r0, #20
 800c9c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9cc:	f108 0210 	add.w	r2, r8, #16
 800c9d0:	46f2      	mov	sl, lr
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9dc:	fa1f f883 	uxth.w	r8, r3
 800c9e0:	fa11 f18b 	uxtah	r1, r1, fp
 800c9e4:	0c1b      	lsrs	r3, r3, #16
 800c9e6:	eba1 0808 	sub.w	r8, r1, r8
 800c9ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9f2:	fa1f f888 	uxth.w	r8, r8
 800c9f6:	1419      	asrs	r1, r3, #16
 800c9f8:	454e      	cmp	r6, r9
 800c9fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c9fe:	f84a 3b04 	str.w	r3, [sl], #4
 800ca02:	d8e7      	bhi.n	800c9d4 <__mdiff+0x80>
 800ca04:	1b33      	subs	r3, r6, r4
 800ca06:	3b15      	subs	r3, #21
 800ca08:	f023 0303 	bic.w	r3, r3, #3
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	3415      	adds	r4, #21
 800ca10:	42a6      	cmp	r6, r4
 800ca12:	bf38      	it	cc
 800ca14:	2304      	movcc	r3, #4
 800ca16:	441d      	add	r5, r3
 800ca18:	4473      	add	r3, lr
 800ca1a:	469e      	mov	lr, r3
 800ca1c:	462e      	mov	r6, r5
 800ca1e:	4566      	cmp	r6, ip
 800ca20:	d30e      	bcc.n	800ca40 <__mdiff+0xec>
 800ca22:	f10c 0203 	add.w	r2, ip, #3
 800ca26:	1b52      	subs	r2, r2, r5
 800ca28:	f022 0203 	bic.w	r2, r2, #3
 800ca2c:	3d03      	subs	r5, #3
 800ca2e:	45ac      	cmp	ip, r5
 800ca30:	bf38      	it	cc
 800ca32:	2200      	movcc	r2, #0
 800ca34:	441a      	add	r2, r3
 800ca36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca3a:	b17b      	cbz	r3, 800ca5c <__mdiff+0x108>
 800ca3c:	6107      	str	r7, [r0, #16]
 800ca3e:	e7a3      	b.n	800c988 <__mdiff+0x34>
 800ca40:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca44:	fa11 f288 	uxtah	r2, r1, r8
 800ca48:	1414      	asrs	r4, r2, #16
 800ca4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca4e:	b292      	uxth	r2, r2
 800ca50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca54:	f84e 2b04 	str.w	r2, [lr], #4
 800ca58:	1421      	asrs	r1, r4, #16
 800ca5a:	e7e0      	b.n	800ca1e <__mdiff+0xca>
 800ca5c:	3f01      	subs	r7, #1
 800ca5e:	e7ea      	b.n	800ca36 <__mdiff+0xe2>
 800ca60:	08020dd7 	.word	0x08020dd7
 800ca64:	08020de8 	.word	0x08020de8

0800ca68 <__d2b>:
 800ca68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	4689      	mov	r9, r1
 800ca6e:	2101      	movs	r1, #1
 800ca70:	ec57 6b10 	vmov	r6, r7, d0
 800ca74:	4690      	mov	r8, r2
 800ca76:	f7ff fccf 	bl	800c418 <_Balloc>
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	b930      	cbnz	r0, 800ca8c <__d2b+0x24>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	4b25      	ldr	r3, [pc, #148]	; (800cb18 <__d2b+0xb0>)
 800ca82:	4826      	ldr	r0, [pc, #152]	; (800cb1c <__d2b+0xb4>)
 800ca84:	f240 310a 	movw	r1, #778	; 0x30a
 800ca88:	f000 faac 	bl	800cfe4 <__assert_func>
 800ca8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca94:	bb35      	cbnz	r5, 800cae4 <__d2b+0x7c>
 800ca96:	2e00      	cmp	r6, #0
 800ca98:	9301      	str	r3, [sp, #4]
 800ca9a:	d028      	beq.n	800caee <__d2b+0x86>
 800ca9c:	4668      	mov	r0, sp
 800ca9e:	9600      	str	r6, [sp, #0]
 800caa0:	f7ff fd82 	bl	800c5a8 <__lo0bits>
 800caa4:	9900      	ldr	r1, [sp, #0]
 800caa6:	b300      	cbz	r0, 800caea <__d2b+0x82>
 800caa8:	9a01      	ldr	r2, [sp, #4]
 800caaa:	f1c0 0320 	rsb	r3, r0, #32
 800caae:	fa02 f303 	lsl.w	r3, r2, r3
 800cab2:	430b      	orrs	r3, r1
 800cab4:	40c2      	lsrs	r2, r0
 800cab6:	6163      	str	r3, [r4, #20]
 800cab8:	9201      	str	r2, [sp, #4]
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	61a3      	str	r3, [r4, #24]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	bf14      	ite	ne
 800cac2:	2202      	movne	r2, #2
 800cac4:	2201      	moveq	r2, #1
 800cac6:	6122      	str	r2, [r4, #16]
 800cac8:	b1d5      	cbz	r5, 800cb00 <__d2b+0x98>
 800caca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cace:	4405      	add	r5, r0
 800cad0:	f8c9 5000 	str.w	r5, [r9]
 800cad4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cad8:	f8c8 0000 	str.w	r0, [r8]
 800cadc:	4620      	mov	r0, r4
 800cade:	b003      	add	sp, #12
 800cae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cae8:	e7d5      	b.n	800ca96 <__d2b+0x2e>
 800caea:	6161      	str	r1, [r4, #20]
 800caec:	e7e5      	b.n	800caba <__d2b+0x52>
 800caee:	a801      	add	r0, sp, #4
 800caf0:	f7ff fd5a 	bl	800c5a8 <__lo0bits>
 800caf4:	9b01      	ldr	r3, [sp, #4]
 800caf6:	6163      	str	r3, [r4, #20]
 800caf8:	2201      	movs	r2, #1
 800cafa:	6122      	str	r2, [r4, #16]
 800cafc:	3020      	adds	r0, #32
 800cafe:	e7e3      	b.n	800cac8 <__d2b+0x60>
 800cb00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb08:	f8c9 0000 	str.w	r0, [r9]
 800cb0c:	6918      	ldr	r0, [r3, #16]
 800cb0e:	f7ff fd2b 	bl	800c568 <__hi0bits>
 800cb12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb16:	e7df      	b.n	800cad8 <__d2b+0x70>
 800cb18:	08020dd7 	.word	0x08020dd7
 800cb1c:	08020de8 	.word	0x08020de8

0800cb20 <_calloc_r>:
 800cb20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb22:	fba1 2402 	umull	r2, r4, r1, r2
 800cb26:	b94c      	cbnz	r4, 800cb3c <_calloc_r+0x1c>
 800cb28:	4611      	mov	r1, r2
 800cb2a:	9201      	str	r2, [sp, #4]
 800cb2c:	f000 f87a 	bl	800cc24 <_malloc_r>
 800cb30:	9a01      	ldr	r2, [sp, #4]
 800cb32:	4605      	mov	r5, r0
 800cb34:	b930      	cbnz	r0, 800cb44 <_calloc_r+0x24>
 800cb36:	4628      	mov	r0, r5
 800cb38:	b003      	add	sp, #12
 800cb3a:	bd30      	pop	{r4, r5, pc}
 800cb3c:	220c      	movs	r2, #12
 800cb3e:	6002      	str	r2, [r0, #0]
 800cb40:	2500      	movs	r5, #0
 800cb42:	e7f8      	b.n	800cb36 <_calloc_r+0x16>
 800cb44:	4621      	mov	r1, r4
 800cb46:	f7fe f921 	bl	800ad8c <memset>
 800cb4a:	e7f4      	b.n	800cb36 <_calloc_r+0x16>

0800cb4c <_free_r>:
 800cb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d044      	beq.n	800cbdc <_free_r+0x90>
 800cb52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb56:	9001      	str	r0, [sp, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb5e:	bfb8      	it	lt
 800cb60:	18e4      	addlt	r4, r4, r3
 800cb62:	f000 fa9b 	bl	800d09c <__malloc_lock>
 800cb66:	4a1e      	ldr	r2, [pc, #120]	; (800cbe0 <_free_r+0x94>)
 800cb68:	9801      	ldr	r0, [sp, #4]
 800cb6a:	6813      	ldr	r3, [r2, #0]
 800cb6c:	b933      	cbnz	r3, 800cb7c <_free_r+0x30>
 800cb6e:	6063      	str	r3, [r4, #4]
 800cb70:	6014      	str	r4, [r2, #0]
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb78:	f000 ba96 	b.w	800d0a8 <__malloc_unlock>
 800cb7c:	42a3      	cmp	r3, r4
 800cb7e:	d908      	bls.n	800cb92 <_free_r+0x46>
 800cb80:	6825      	ldr	r5, [r4, #0]
 800cb82:	1961      	adds	r1, r4, r5
 800cb84:	428b      	cmp	r3, r1
 800cb86:	bf01      	itttt	eq
 800cb88:	6819      	ldreq	r1, [r3, #0]
 800cb8a:	685b      	ldreq	r3, [r3, #4]
 800cb8c:	1949      	addeq	r1, r1, r5
 800cb8e:	6021      	streq	r1, [r4, #0]
 800cb90:	e7ed      	b.n	800cb6e <_free_r+0x22>
 800cb92:	461a      	mov	r2, r3
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	b10b      	cbz	r3, 800cb9c <_free_r+0x50>
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	d9fa      	bls.n	800cb92 <_free_r+0x46>
 800cb9c:	6811      	ldr	r1, [r2, #0]
 800cb9e:	1855      	adds	r5, r2, r1
 800cba0:	42a5      	cmp	r5, r4
 800cba2:	d10b      	bne.n	800cbbc <_free_r+0x70>
 800cba4:	6824      	ldr	r4, [r4, #0]
 800cba6:	4421      	add	r1, r4
 800cba8:	1854      	adds	r4, r2, r1
 800cbaa:	42a3      	cmp	r3, r4
 800cbac:	6011      	str	r1, [r2, #0]
 800cbae:	d1e0      	bne.n	800cb72 <_free_r+0x26>
 800cbb0:	681c      	ldr	r4, [r3, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	6053      	str	r3, [r2, #4]
 800cbb6:	4421      	add	r1, r4
 800cbb8:	6011      	str	r1, [r2, #0]
 800cbba:	e7da      	b.n	800cb72 <_free_r+0x26>
 800cbbc:	d902      	bls.n	800cbc4 <_free_r+0x78>
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	e7d6      	b.n	800cb72 <_free_r+0x26>
 800cbc4:	6825      	ldr	r5, [r4, #0]
 800cbc6:	1961      	adds	r1, r4, r5
 800cbc8:	428b      	cmp	r3, r1
 800cbca:	bf04      	itt	eq
 800cbcc:	6819      	ldreq	r1, [r3, #0]
 800cbce:	685b      	ldreq	r3, [r3, #4]
 800cbd0:	6063      	str	r3, [r4, #4]
 800cbd2:	bf04      	itt	eq
 800cbd4:	1949      	addeq	r1, r1, r5
 800cbd6:	6021      	streq	r1, [r4, #0]
 800cbd8:	6054      	str	r4, [r2, #4]
 800cbda:	e7ca      	b.n	800cb72 <_free_r+0x26>
 800cbdc:	b003      	add	sp, #12
 800cbde:	bd30      	pop	{r4, r5, pc}
 800cbe0:	200045cc 	.word	0x200045cc

0800cbe4 <sbrk_aligned>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	4e0e      	ldr	r6, [pc, #56]	; (800cc20 <sbrk_aligned+0x3c>)
 800cbe8:	460c      	mov	r4, r1
 800cbea:	6831      	ldr	r1, [r6, #0]
 800cbec:	4605      	mov	r5, r0
 800cbee:	b911      	cbnz	r1, 800cbf6 <sbrk_aligned+0x12>
 800cbf0:	f000 f9e8 	bl	800cfc4 <_sbrk_r>
 800cbf4:	6030      	str	r0, [r6, #0]
 800cbf6:	4621      	mov	r1, r4
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	f000 f9e3 	bl	800cfc4 <_sbrk_r>
 800cbfe:	1c43      	adds	r3, r0, #1
 800cc00:	d00a      	beq.n	800cc18 <sbrk_aligned+0x34>
 800cc02:	1cc4      	adds	r4, r0, #3
 800cc04:	f024 0403 	bic.w	r4, r4, #3
 800cc08:	42a0      	cmp	r0, r4
 800cc0a:	d007      	beq.n	800cc1c <sbrk_aligned+0x38>
 800cc0c:	1a21      	subs	r1, r4, r0
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f000 f9d8 	bl	800cfc4 <_sbrk_r>
 800cc14:	3001      	adds	r0, #1
 800cc16:	d101      	bne.n	800cc1c <sbrk_aligned+0x38>
 800cc18:	f04f 34ff 	mov.w	r4, #4294967295
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
 800cc20:	200045d0 	.word	0x200045d0

0800cc24 <_malloc_r>:
 800cc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc28:	1ccd      	adds	r5, r1, #3
 800cc2a:	f025 0503 	bic.w	r5, r5, #3
 800cc2e:	3508      	adds	r5, #8
 800cc30:	2d0c      	cmp	r5, #12
 800cc32:	bf38      	it	cc
 800cc34:	250c      	movcc	r5, #12
 800cc36:	2d00      	cmp	r5, #0
 800cc38:	4607      	mov	r7, r0
 800cc3a:	db01      	blt.n	800cc40 <_malloc_r+0x1c>
 800cc3c:	42a9      	cmp	r1, r5
 800cc3e:	d905      	bls.n	800cc4c <_malloc_r+0x28>
 800cc40:	230c      	movs	r3, #12
 800cc42:	603b      	str	r3, [r7, #0]
 800cc44:	2600      	movs	r6, #0
 800cc46:	4630      	mov	r0, r6
 800cc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc4c:	4e2e      	ldr	r6, [pc, #184]	; (800cd08 <_malloc_r+0xe4>)
 800cc4e:	f000 fa25 	bl	800d09c <__malloc_lock>
 800cc52:	6833      	ldr	r3, [r6, #0]
 800cc54:	461c      	mov	r4, r3
 800cc56:	bb34      	cbnz	r4, 800cca6 <_malloc_r+0x82>
 800cc58:	4629      	mov	r1, r5
 800cc5a:	4638      	mov	r0, r7
 800cc5c:	f7ff ffc2 	bl	800cbe4 <sbrk_aligned>
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	4604      	mov	r4, r0
 800cc64:	d14d      	bne.n	800cd02 <_malloc_r+0xde>
 800cc66:	6834      	ldr	r4, [r6, #0]
 800cc68:	4626      	mov	r6, r4
 800cc6a:	2e00      	cmp	r6, #0
 800cc6c:	d140      	bne.n	800ccf0 <_malloc_r+0xcc>
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	4631      	mov	r1, r6
 800cc72:	4638      	mov	r0, r7
 800cc74:	eb04 0803 	add.w	r8, r4, r3
 800cc78:	f000 f9a4 	bl	800cfc4 <_sbrk_r>
 800cc7c:	4580      	cmp	r8, r0
 800cc7e:	d13a      	bne.n	800ccf6 <_malloc_r+0xd2>
 800cc80:	6821      	ldr	r1, [r4, #0]
 800cc82:	3503      	adds	r5, #3
 800cc84:	1a6d      	subs	r5, r5, r1
 800cc86:	f025 0503 	bic.w	r5, r5, #3
 800cc8a:	3508      	adds	r5, #8
 800cc8c:	2d0c      	cmp	r5, #12
 800cc8e:	bf38      	it	cc
 800cc90:	250c      	movcc	r5, #12
 800cc92:	4629      	mov	r1, r5
 800cc94:	4638      	mov	r0, r7
 800cc96:	f7ff ffa5 	bl	800cbe4 <sbrk_aligned>
 800cc9a:	3001      	adds	r0, #1
 800cc9c:	d02b      	beq.n	800ccf6 <_malloc_r+0xd2>
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	442b      	add	r3, r5
 800cca2:	6023      	str	r3, [r4, #0]
 800cca4:	e00e      	b.n	800ccc4 <_malloc_r+0xa0>
 800cca6:	6822      	ldr	r2, [r4, #0]
 800cca8:	1b52      	subs	r2, r2, r5
 800ccaa:	d41e      	bmi.n	800ccea <_malloc_r+0xc6>
 800ccac:	2a0b      	cmp	r2, #11
 800ccae:	d916      	bls.n	800ccde <_malloc_r+0xba>
 800ccb0:	1961      	adds	r1, r4, r5
 800ccb2:	42a3      	cmp	r3, r4
 800ccb4:	6025      	str	r5, [r4, #0]
 800ccb6:	bf18      	it	ne
 800ccb8:	6059      	strne	r1, [r3, #4]
 800ccba:	6863      	ldr	r3, [r4, #4]
 800ccbc:	bf08      	it	eq
 800ccbe:	6031      	streq	r1, [r6, #0]
 800ccc0:	5162      	str	r2, [r4, r5]
 800ccc2:	604b      	str	r3, [r1, #4]
 800ccc4:	4638      	mov	r0, r7
 800ccc6:	f104 060b 	add.w	r6, r4, #11
 800ccca:	f000 f9ed 	bl	800d0a8 <__malloc_unlock>
 800ccce:	f026 0607 	bic.w	r6, r6, #7
 800ccd2:	1d23      	adds	r3, r4, #4
 800ccd4:	1af2      	subs	r2, r6, r3
 800ccd6:	d0b6      	beq.n	800cc46 <_malloc_r+0x22>
 800ccd8:	1b9b      	subs	r3, r3, r6
 800ccda:	50a3      	str	r3, [r4, r2]
 800ccdc:	e7b3      	b.n	800cc46 <_malloc_r+0x22>
 800ccde:	6862      	ldr	r2, [r4, #4]
 800cce0:	42a3      	cmp	r3, r4
 800cce2:	bf0c      	ite	eq
 800cce4:	6032      	streq	r2, [r6, #0]
 800cce6:	605a      	strne	r2, [r3, #4]
 800cce8:	e7ec      	b.n	800ccc4 <_malloc_r+0xa0>
 800ccea:	4623      	mov	r3, r4
 800ccec:	6864      	ldr	r4, [r4, #4]
 800ccee:	e7b2      	b.n	800cc56 <_malloc_r+0x32>
 800ccf0:	4634      	mov	r4, r6
 800ccf2:	6876      	ldr	r6, [r6, #4]
 800ccf4:	e7b9      	b.n	800cc6a <_malloc_r+0x46>
 800ccf6:	230c      	movs	r3, #12
 800ccf8:	603b      	str	r3, [r7, #0]
 800ccfa:	4638      	mov	r0, r7
 800ccfc:	f000 f9d4 	bl	800d0a8 <__malloc_unlock>
 800cd00:	e7a1      	b.n	800cc46 <_malloc_r+0x22>
 800cd02:	6025      	str	r5, [r4, #0]
 800cd04:	e7de      	b.n	800ccc4 <_malloc_r+0xa0>
 800cd06:	bf00      	nop
 800cd08:	200045cc 	.word	0x200045cc

0800cd0c <__ssputs_r>:
 800cd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd10:	688e      	ldr	r6, [r1, #8]
 800cd12:	429e      	cmp	r6, r3
 800cd14:	4682      	mov	sl, r0
 800cd16:	460c      	mov	r4, r1
 800cd18:	4690      	mov	r8, r2
 800cd1a:	461f      	mov	r7, r3
 800cd1c:	d838      	bhi.n	800cd90 <__ssputs_r+0x84>
 800cd1e:	898a      	ldrh	r2, [r1, #12]
 800cd20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd24:	d032      	beq.n	800cd8c <__ssputs_r+0x80>
 800cd26:	6825      	ldr	r5, [r4, #0]
 800cd28:	6909      	ldr	r1, [r1, #16]
 800cd2a:	eba5 0901 	sub.w	r9, r5, r1
 800cd2e:	6965      	ldr	r5, [r4, #20]
 800cd30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd38:	3301      	adds	r3, #1
 800cd3a:	444b      	add	r3, r9
 800cd3c:	106d      	asrs	r5, r5, #1
 800cd3e:	429d      	cmp	r5, r3
 800cd40:	bf38      	it	cc
 800cd42:	461d      	movcc	r5, r3
 800cd44:	0553      	lsls	r3, r2, #21
 800cd46:	d531      	bpl.n	800cdac <__ssputs_r+0xa0>
 800cd48:	4629      	mov	r1, r5
 800cd4a:	f7ff ff6b 	bl	800cc24 <_malloc_r>
 800cd4e:	4606      	mov	r6, r0
 800cd50:	b950      	cbnz	r0, 800cd68 <__ssputs_r+0x5c>
 800cd52:	230c      	movs	r3, #12
 800cd54:	f8ca 3000 	str.w	r3, [sl]
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd68:	6921      	ldr	r1, [r4, #16]
 800cd6a:	464a      	mov	r2, r9
 800cd6c:	f7ff fb46 	bl	800c3fc <memcpy>
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd7a:	81a3      	strh	r3, [r4, #12]
 800cd7c:	6126      	str	r6, [r4, #16]
 800cd7e:	6165      	str	r5, [r4, #20]
 800cd80:	444e      	add	r6, r9
 800cd82:	eba5 0509 	sub.w	r5, r5, r9
 800cd86:	6026      	str	r6, [r4, #0]
 800cd88:	60a5      	str	r5, [r4, #8]
 800cd8a:	463e      	mov	r6, r7
 800cd8c:	42be      	cmp	r6, r7
 800cd8e:	d900      	bls.n	800cd92 <__ssputs_r+0x86>
 800cd90:	463e      	mov	r6, r7
 800cd92:	6820      	ldr	r0, [r4, #0]
 800cd94:	4632      	mov	r2, r6
 800cd96:	4641      	mov	r1, r8
 800cd98:	f000 f966 	bl	800d068 <memmove>
 800cd9c:	68a3      	ldr	r3, [r4, #8]
 800cd9e:	1b9b      	subs	r3, r3, r6
 800cda0:	60a3      	str	r3, [r4, #8]
 800cda2:	6823      	ldr	r3, [r4, #0]
 800cda4:	4433      	add	r3, r6
 800cda6:	6023      	str	r3, [r4, #0]
 800cda8:	2000      	movs	r0, #0
 800cdaa:	e7db      	b.n	800cd64 <__ssputs_r+0x58>
 800cdac:	462a      	mov	r2, r5
 800cdae:	f000 f981 	bl	800d0b4 <_realloc_r>
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	d1e1      	bne.n	800cd7c <__ssputs_r+0x70>
 800cdb8:	6921      	ldr	r1, [r4, #16]
 800cdba:	4650      	mov	r0, sl
 800cdbc:	f7ff fec6 	bl	800cb4c <_free_r>
 800cdc0:	e7c7      	b.n	800cd52 <__ssputs_r+0x46>
	...

0800cdc4 <_svfiprintf_r>:
 800cdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc8:	4698      	mov	r8, r3
 800cdca:	898b      	ldrh	r3, [r1, #12]
 800cdcc:	061b      	lsls	r3, r3, #24
 800cdce:	b09d      	sub	sp, #116	; 0x74
 800cdd0:	4607      	mov	r7, r0
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	4614      	mov	r4, r2
 800cdd6:	d50e      	bpl.n	800cdf6 <_svfiprintf_r+0x32>
 800cdd8:	690b      	ldr	r3, [r1, #16]
 800cdda:	b963      	cbnz	r3, 800cdf6 <_svfiprintf_r+0x32>
 800cddc:	2140      	movs	r1, #64	; 0x40
 800cdde:	f7ff ff21 	bl	800cc24 <_malloc_r>
 800cde2:	6028      	str	r0, [r5, #0]
 800cde4:	6128      	str	r0, [r5, #16]
 800cde6:	b920      	cbnz	r0, 800cdf2 <_svfiprintf_r+0x2e>
 800cde8:	230c      	movs	r3, #12
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e0d1      	b.n	800cf96 <_svfiprintf_r+0x1d2>
 800cdf2:	2340      	movs	r3, #64	; 0x40
 800cdf4:	616b      	str	r3, [r5, #20]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdfa:	2320      	movs	r3, #32
 800cdfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce04:	2330      	movs	r3, #48	; 0x30
 800ce06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfb0 <_svfiprintf_r+0x1ec>
 800ce0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce0e:	f04f 0901 	mov.w	r9, #1
 800ce12:	4623      	mov	r3, r4
 800ce14:	469a      	mov	sl, r3
 800ce16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce1a:	b10a      	cbz	r2, 800ce20 <_svfiprintf_r+0x5c>
 800ce1c:	2a25      	cmp	r2, #37	; 0x25
 800ce1e:	d1f9      	bne.n	800ce14 <_svfiprintf_r+0x50>
 800ce20:	ebba 0b04 	subs.w	fp, sl, r4
 800ce24:	d00b      	beq.n	800ce3e <_svfiprintf_r+0x7a>
 800ce26:	465b      	mov	r3, fp
 800ce28:	4622      	mov	r2, r4
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4638      	mov	r0, r7
 800ce2e:	f7ff ff6d 	bl	800cd0c <__ssputs_r>
 800ce32:	3001      	adds	r0, #1
 800ce34:	f000 80aa 	beq.w	800cf8c <_svfiprintf_r+0x1c8>
 800ce38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce3a:	445a      	add	r2, fp
 800ce3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 80a2 	beq.w	800cf8c <_svfiprintf_r+0x1c8>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce52:	f10a 0a01 	add.w	sl, sl, #1
 800ce56:	9304      	str	r3, [sp, #16]
 800ce58:	9307      	str	r3, [sp, #28]
 800ce5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ce60:	4654      	mov	r4, sl
 800ce62:	2205      	movs	r2, #5
 800ce64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce68:	4851      	ldr	r0, [pc, #324]	; (800cfb0 <_svfiprintf_r+0x1ec>)
 800ce6a:	f7f3 f9b9 	bl	80001e0 <memchr>
 800ce6e:	9a04      	ldr	r2, [sp, #16]
 800ce70:	b9d8      	cbnz	r0, 800ceaa <_svfiprintf_r+0xe6>
 800ce72:	06d0      	lsls	r0, r2, #27
 800ce74:	bf44      	itt	mi
 800ce76:	2320      	movmi	r3, #32
 800ce78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce7c:	0711      	lsls	r1, r2, #28
 800ce7e:	bf44      	itt	mi
 800ce80:	232b      	movmi	r3, #43	; 0x2b
 800ce82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce86:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce8c:	d015      	beq.n	800ceba <_svfiprintf_r+0xf6>
 800ce8e:	9a07      	ldr	r2, [sp, #28]
 800ce90:	4654      	mov	r4, sl
 800ce92:	2000      	movs	r0, #0
 800ce94:	f04f 0c0a 	mov.w	ip, #10
 800ce98:	4621      	mov	r1, r4
 800ce9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce9e:	3b30      	subs	r3, #48	; 0x30
 800cea0:	2b09      	cmp	r3, #9
 800cea2:	d94e      	bls.n	800cf42 <_svfiprintf_r+0x17e>
 800cea4:	b1b0      	cbz	r0, 800ced4 <_svfiprintf_r+0x110>
 800cea6:	9207      	str	r2, [sp, #28]
 800cea8:	e014      	b.n	800ced4 <_svfiprintf_r+0x110>
 800ceaa:	eba0 0308 	sub.w	r3, r0, r8
 800ceae:	fa09 f303 	lsl.w	r3, r9, r3
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	9304      	str	r3, [sp, #16]
 800ceb6:	46a2      	mov	sl, r4
 800ceb8:	e7d2      	b.n	800ce60 <_svfiprintf_r+0x9c>
 800ceba:	9b03      	ldr	r3, [sp, #12]
 800cebc:	1d19      	adds	r1, r3, #4
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	9103      	str	r1, [sp, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	bfbb      	ittet	lt
 800cec6:	425b      	neglt	r3, r3
 800cec8:	f042 0202 	orrlt.w	r2, r2, #2
 800cecc:	9307      	strge	r3, [sp, #28]
 800cece:	9307      	strlt	r3, [sp, #28]
 800ced0:	bfb8      	it	lt
 800ced2:	9204      	strlt	r2, [sp, #16]
 800ced4:	7823      	ldrb	r3, [r4, #0]
 800ced6:	2b2e      	cmp	r3, #46	; 0x2e
 800ced8:	d10c      	bne.n	800cef4 <_svfiprintf_r+0x130>
 800ceda:	7863      	ldrb	r3, [r4, #1]
 800cedc:	2b2a      	cmp	r3, #42	; 0x2a
 800cede:	d135      	bne.n	800cf4c <_svfiprintf_r+0x188>
 800cee0:	9b03      	ldr	r3, [sp, #12]
 800cee2:	1d1a      	adds	r2, r3, #4
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	9203      	str	r2, [sp, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	bfb8      	it	lt
 800ceec:	f04f 33ff 	movlt.w	r3, #4294967295
 800cef0:	3402      	adds	r4, #2
 800cef2:	9305      	str	r3, [sp, #20]
 800cef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfc0 <_svfiprintf_r+0x1fc>
 800cef8:	7821      	ldrb	r1, [r4, #0]
 800cefa:	2203      	movs	r2, #3
 800cefc:	4650      	mov	r0, sl
 800cefe:	f7f3 f96f 	bl	80001e0 <memchr>
 800cf02:	b140      	cbz	r0, 800cf16 <_svfiprintf_r+0x152>
 800cf04:	2340      	movs	r3, #64	; 0x40
 800cf06:	eba0 000a 	sub.w	r0, r0, sl
 800cf0a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf0e:	9b04      	ldr	r3, [sp, #16]
 800cf10:	4303      	orrs	r3, r0
 800cf12:	3401      	adds	r4, #1
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1a:	4826      	ldr	r0, [pc, #152]	; (800cfb4 <_svfiprintf_r+0x1f0>)
 800cf1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf20:	2206      	movs	r2, #6
 800cf22:	f7f3 f95d 	bl	80001e0 <memchr>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d038      	beq.n	800cf9c <_svfiprintf_r+0x1d8>
 800cf2a:	4b23      	ldr	r3, [pc, #140]	; (800cfb8 <_svfiprintf_r+0x1f4>)
 800cf2c:	bb1b      	cbnz	r3, 800cf76 <_svfiprintf_r+0x1b2>
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	3307      	adds	r3, #7
 800cf32:	f023 0307 	bic.w	r3, r3, #7
 800cf36:	3308      	adds	r3, #8
 800cf38:	9303      	str	r3, [sp, #12]
 800cf3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf3c:	4433      	add	r3, r6
 800cf3e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf40:	e767      	b.n	800ce12 <_svfiprintf_r+0x4e>
 800cf42:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf46:	460c      	mov	r4, r1
 800cf48:	2001      	movs	r0, #1
 800cf4a:	e7a5      	b.n	800ce98 <_svfiprintf_r+0xd4>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	3401      	adds	r4, #1
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	4619      	mov	r1, r3
 800cf54:	f04f 0c0a 	mov.w	ip, #10
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf5e:	3a30      	subs	r2, #48	; 0x30
 800cf60:	2a09      	cmp	r2, #9
 800cf62:	d903      	bls.n	800cf6c <_svfiprintf_r+0x1a8>
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0c5      	beq.n	800cef4 <_svfiprintf_r+0x130>
 800cf68:	9105      	str	r1, [sp, #20]
 800cf6a:	e7c3      	b.n	800cef4 <_svfiprintf_r+0x130>
 800cf6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf70:	4604      	mov	r4, r0
 800cf72:	2301      	movs	r3, #1
 800cf74:	e7f0      	b.n	800cf58 <_svfiprintf_r+0x194>
 800cf76:	ab03      	add	r3, sp, #12
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	462a      	mov	r2, r5
 800cf7c:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <_svfiprintf_r+0x1f8>)
 800cf7e:	a904      	add	r1, sp, #16
 800cf80:	4638      	mov	r0, r7
 800cf82:	f7fd ffab 	bl	800aedc <_printf_float>
 800cf86:	1c42      	adds	r2, r0, #1
 800cf88:	4606      	mov	r6, r0
 800cf8a:	d1d6      	bne.n	800cf3a <_svfiprintf_r+0x176>
 800cf8c:	89ab      	ldrh	r3, [r5, #12]
 800cf8e:	065b      	lsls	r3, r3, #25
 800cf90:	f53f af2c 	bmi.w	800cdec <_svfiprintf_r+0x28>
 800cf94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf96:	b01d      	add	sp, #116	; 0x74
 800cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9c:	ab03      	add	r3, sp, #12
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	462a      	mov	r2, r5
 800cfa2:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <_svfiprintf_r+0x1f8>)
 800cfa4:	a904      	add	r1, sp, #16
 800cfa6:	4638      	mov	r0, r7
 800cfa8:	f7fe fa3c 	bl	800b424 <_printf_i>
 800cfac:	e7eb      	b.n	800cf86 <_svfiprintf_r+0x1c2>
 800cfae:	bf00      	nop
 800cfb0:	08020f44 	.word	0x08020f44
 800cfb4:	08020f4e 	.word	0x08020f4e
 800cfb8:	0800aedd 	.word	0x0800aedd
 800cfbc:	0800cd0d 	.word	0x0800cd0d
 800cfc0:	08020f4a 	.word	0x08020f4a

0800cfc4 <_sbrk_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_sbrk_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f5 fde0 	bl	8002b94 <_sbrk>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_sbrk_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_sbrk_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200045d4 	.word	0x200045d4

0800cfe4 <__assert_func>:
 800cfe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4b09      	ldr	r3, [pc, #36]	; (800d010 <__assert_func+0x2c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4605      	mov	r5, r0
 800cff0:	68d8      	ldr	r0, [r3, #12]
 800cff2:	b14c      	cbz	r4, 800d008 <__assert_func+0x24>
 800cff4:	4b07      	ldr	r3, [pc, #28]	; (800d014 <__assert_func+0x30>)
 800cff6:	9100      	str	r1, [sp, #0]
 800cff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cffc:	4906      	ldr	r1, [pc, #24]	; (800d018 <__assert_func+0x34>)
 800cffe:	462b      	mov	r3, r5
 800d000:	f000 f80e 	bl	800d020 <fiprintf>
 800d004:	f000 faac 	bl	800d560 <abort>
 800d008:	4b04      	ldr	r3, [pc, #16]	; (800d01c <__assert_func+0x38>)
 800d00a:	461c      	mov	r4, r3
 800d00c:	e7f3      	b.n	800cff6 <__assert_func+0x12>
 800d00e:	bf00      	nop
 800d010:	20000014 	.word	0x20000014
 800d014:	08020f55 	.word	0x08020f55
 800d018:	08020f62 	.word	0x08020f62
 800d01c:	08020f90 	.word	0x08020f90

0800d020 <fiprintf>:
 800d020:	b40e      	push	{r1, r2, r3}
 800d022:	b503      	push	{r0, r1, lr}
 800d024:	4601      	mov	r1, r0
 800d026:	ab03      	add	r3, sp, #12
 800d028:	4805      	ldr	r0, [pc, #20]	; (800d040 <fiprintf+0x20>)
 800d02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d02e:	6800      	ldr	r0, [r0, #0]
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	f000 f897 	bl	800d164 <_vfiprintf_r>
 800d036:	b002      	add	sp, #8
 800d038:	f85d eb04 	ldr.w	lr, [sp], #4
 800d03c:	b003      	add	sp, #12
 800d03e:	4770      	bx	lr
 800d040:	20000014 	.word	0x20000014

0800d044 <__ascii_mbtowc>:
 800d044:	b082      	sub	sp, #8
 800d046:	b901      	cbnz	r1, 800d04a <__ascii_mbtowc+0x6>
 800d048:	a901      	add	r1, sp, #4
 800d04a:	b142      	cbz	r2, 800d05e <__ascii_mbtowc+0x1a>
 800d04c:	b14b      	cbz	r3, 800d062 <__ascii_mbtowc+0x1e>
 800d04e:	7813      	ldrb	r3, [r2, #0]
 800d050:	600b      	str	r3, [r1, #0]
 800d052:	7812      	ldrb	r2, [r2, #0]
 800d054:	1e10      	subs	r0, r2, #0
 800d056:	bf18      	it	ne
 800d058:	2001      	movne	r0, #1
 800d05a:	b002      	add	sp, #8
 800d05c:	4770      	bx	lr
 800d05e:	4610      	mov	r0, r2
 800d060:	e7fb      	b.n	800d05a <__ascii_mbtowc+0x16>
 800d062:	f06f 0001 	mvn.w	r0, #1
 800d066:	e7f8      	b.n	800d05a <__ascii_mbtowc+0x16>

0800d068 <memmove>:
 800d068:	4288      	cmp	r0, r1
 800d06a:	b510      	push	{r4, lr}
 800d06c:	eb01 0402 	add.w	r4, r1, r2
 800d070:	d902      	bls.n	800d078 <memmove+0x10>
 800d072:	4284      	cmp	r4, r0
 800d074:	4623      	mov	r3, r4
 800d076:	d807      	bhi.n	800d088 <memmove+0x20>
 800d078:	1e43      	subs	r3, r0, #1
 800d07a:	42a1      	cmp	r1, r4
 800d07c:	d008      	beq.n	800d090 <memmove+0x28>
 800d07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d082:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d086:	e7f8      	b.n	800d07a <memmove+0x12>
 800d088:	4402      	add	r2, r0
 800d08a:	4601      	mov	r1, r0
 800d08c:	428a      	cmp	r2, r1
 800d08e:	d100      	bne.n	800d092 <memmove+0x2a>
 800d090:	bd10      	pop	{r4, pc}
 800d092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d09a:	e7f7      	b.n	800d08c <memmove+0x24>

0800d09c <__malloc_lock>:
 800d09c:	4801      	ldr	r0, [pc, #4]	; (800d0a4 <__malloc_lock+0x8>)
 800d09e:	f000 bc1f 	b.w	800d8e0 <__retarget_lock_acquire_recursive>
 800d0a2:	bf00      	nop
 800d0a4:	200045d8 	.word	0x200045d8

0800d0a8 <__malloc_unlock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	; (800d0b0 <__malloc_unlock+0x8>)
 800d0aa:	f000 bc1a 	b.w	800d8e2 <__retarget_lock_release_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	200045d8 	.word	0x200045d8

0800d0b4 <_realloc_r>:
 800d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b8:	4680      	mov	r8, r0
 800d0ba:	4614      	mov	r4, r2
 800d0bc:	460e      	mov	r6, r1
 800d0be:	b921      	cbnz	r1, 800d0ca <_realloc_r+0x16>
 800d0c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	f7ff bdad 	b.w	800cc24 <_malloc_r>
 800d0ca:	b92a      	cbnz	r2, 800d0d8 <_realloc_r+0x24>
 800d0cc:	f7ff fd3e 	bl	800cb4c <_free_r>
 800d0d0:	4625      	mov	r5, r4
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d8:	f000 fc6a 	bl	800d9b0 <_malloc_usable_size_r>
 800d0dc:	4284      	cmp	r4, r0
 800d0de:	4607      	mov	r7, r0
 800d0e0:	d802      	bhi.n	800d0e8 <_realloc_r+0x34>
 800d0e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0e6:	d812      	bhi.n	800d10e <_realloc_r+0x5a>
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f7ff fd9a 	bl	800cc24 <_malloc_r>
 800d0f0:	4605      	mov	r5, r0
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d0ed      	beq.n	800d0d2 <_realloc_r+0x1e>
 800d0f6:	42bc      	cmp	r4, r7
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4631      	mov	r1, r6
 800d0fc:	bf28      	it	cs
 800d0fe:	463a      	movcs	r2, r7
 800d100:	f7ff f97c 	bl	800c3fc <memcpy>
 800d104:	4631      	mov	r1, r6
 800d106:	4640      	mov	r0, r8
 800d108:	f7ff fd20 	bl	800cb4c <_free_r>
 800d10c:	e7e1      	b.n	800d0d2 <_realloc_r+0x1e>
 800d10e:	4635      	mov	r5, r6
 800d110:	e7df      	b.n	800d0d2 <_realloc_r+0x1e>

0800d112 <__sfputc_r>:
 800d112:	6893      	ldr	r3, [r2, #8]
 800d114:	3b01      	subs	r3, #1
 800d116:	2b00      	cmp	r3, #0
 800d118:	b410      	push	{r4}
 800d11a:	6093      	str	r3, [r2, #8]
 800d11c:	da08      	bge.n	800d130 <__sfputc_r+0x1e>
 800d11e:	6994      	ldr	r4, [r2, #24]
 800d120:	42a3      	cmp	r3, r4
 800d122:	db01      	blt.n	800d128 <__sfputc_r+0x16>
 800d124:	290a      	cmp	r1, #10
 800d126:	d103      	bne.n	800d130 <__sfputc_r+0x1e>
 800d128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12c:	f000 b94a 	b.w	800d3c4 <__swbuf_r>
 800d130:	6813      	ldr	r3, [r2, #0]
 800d132:	1c58      	adds	r0, r3, #1
 800d134:	6010      	str	r0, [r2, #0]
 800d136:	7019      	strb	r1, [r3, #0]
 800d138:	4608      	mov	r0, r1
 800d13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d13e:	4770      	bx	lr

0800d140 <__sfputs_r>:
 800d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d142:	4606      	mov	r6, r0
 800d144:	460f      	mov	r7, r1
 800d146:	4614      	mov	r4, r2
 800d148:	18d5      	adds	r5, r2, r3
 800d14a:	42ac      	cmp	r4, r5
 800d14c:	d101      	bne.n	800d152 <__sfputs_r+0x12>
 800d14e:	2000      	movs	r0, #0
 800d150:	e007      	b.n	800d162 <__sfputs_r+0x22>
 800d152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d156:	463a      	mov	r2, r7
 800d158:	4630      	mov	r0, r6
 800d15a:	f7ff ffda 	bl	800d112 <__sfputc_r>
 800d15e:	1c43      	adds	r3, r0, #1
 800d160:	d1f3      	bne.n	800d14a <__sfputs_r+0xa>
 800d162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d164 <_vfiprintf_r>:
 800d164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d168:	460d      	mov	r5, r1
 800d16a:	b09d      	sub	sp, #116	; 0x74
 800d16c:	4614      	mov	r4, r2
 800d16e:	4698      	mov	r8, r3
 800d170:	4606      	mov	r6, r0
 800d172:	b118      	cbz	r0, 800d17c <_vfiprintf_r+0x18>
 800d174:	6983      	ldr	r3, [r0, #24]
 800d176:	b90b      	cbnz	r3, 800d17c <_vfiprintf_r+0x18>
 800d178:	f000 fb14 	bl	800d7a4 <__sinit>
 800d17c:	4b89      	ldr	r3, [pc, #548]	; (800d3a4 <_vfiprintf_r+0x240>)
 800d17e:	429d      	cmp	r5, r3
 800d180:	d11b      	bne.n	800d1ba <_vfiprintf_r+0x56>
 800d182:	6875      	ldr	r5, [r6, #4]
 800d184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d186:	07d9      	lsls	r1, r3, #31
 800d188:	d405      	bmi.n	800d196 <_vfiprintf_r+0x32>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	059a      	lsls	r2, r3, #22
 800d18e:	d402      	bmi.n	800d196 <_vfiprintf_r+0x32>
 800d190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d192:	f000 fba5 	bl	800d8e0 <__retarget_lock_acquire_recursive>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	071b      	lsls	r3, r3, #28
 800d19a:	d501      	bpl.n	800d1a0 <_vfiprintf_r+0x3c>
 800d19c:	692b      	ldr	r3, [r5, #16]
 800d19e:	b9eb      	cbnz	r3, 800d1dc <_vfiprintf_r+0x78>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f000 f96e 	bl	800d484 <__swsetup_r>
 800d1a8:	b1c0      	cbz	r0, 800d1dc <_vfiprintf_r+0x78>
 800d1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1ac:	07dc      	lsls	r4, r3, #31
 800d1ae:	d50e      	bpl.n	800d1ce <_vfiprintf_r+0x6a>
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	b01d      	add	sp, #116	; 0x74
 800d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ba:	4b7b      	ldr	r3, [pc, #492]	; (800d3a8 <_vfiprintf_r+0x244>)
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	d101      	bne.n	800d1c4 <_vfiprintf_r+0x60>
 800d1c0:	68b5      	ldr	r5, [r6, #8]
 800d1c2:	e7df      	b.n	800d184 <_vfiprintf_r+0x20>
 800d1c4:	4b79      	ldr	r3, [pc, #484]	; (800d3ac <_vfiprintf_r+0x248>)
 800d1c6:	429d      	cmp	r5, r3
 800d1c8:	bf08      	it	eq
 800d1ca:	68f5      	ldreq	r5, [r6, #12]
 800d1cc:	e7da      	b.n	800d184 <_vfiprintf_r+0x20>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	0598      	lsls	r0, r3, #22
 800d1d2:	d4ed      	bmi.n	800d1b0 <_vfiprintf_r+0x4c>
 800d1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1d6:	f000 fb84 	bl	800d8e2 <__retarget_lock_release_recursive>
 800d1da:	e7e9      	b.n	800d1b0 <_vfiprintf_r+0x4c>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e0:	2320      	movs	r3, #32
 800d1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ea:	2330      	movs	r3, #48	; 0x30
 800d1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3b0 <_vfiprintf_r+0x24c>
 800d1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1f4:	f04f 0901 	mov.w	r9, #1
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	469a      	mov	sl, r3
 800d1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d200:	b10a      	cbz	r2, 800d206 <_vfiprintf_r+0xa2>
 800d202:	2a25      	cmp	r2, #37	; 0x25
 800d204:	d1f9      	bne.n	800d1fa <_vfiprintf_r+0x96>
 800d206:	ebba 0b04 	subs.w	fp, sl, r4
 800d20a:	d00b      	beq.n	800d224 <_vfiprintf_r+0xc0>
 800d20c:	465b      	mov	r3, fp
 800d20e:	4622      	mov	r2, r4
 800d210:	4629      	mov	r1, r5
 800d212:	4630      	mov	r0, r6
 800d214:	f7ff ff94 	bl	800d140 <__sfputs_r>
 800d218:	3001      	adds	r0, #1
 800d21a:	f000 80aa 	beq.w	800d372 <_vfiprintf_r+0x20e>
 800d21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d220:	445a      	add	r2, fp
 800d222:	9209      	str	r2, [sp, #36]	; 0x24
 800d224:	f89a 3000 	ldrb.w	r3, [sl]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 80a2 	beq.w	800d372 <_vfiprintf_r+0x20e>
 800d22e:	2300      	movs	r3, #0
 800d230:	f04f 32ff 	mov.w	r2, #4294967295
 800d234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d238:	f10a 0a01 	add.w	sl, sl, #1
 800d23c:	9304      	str	r3, [sp, #16]
 800d23e:	9307      	str	r3, [sp, #28]
 800d240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d244:	931a      	str	r3, [sp, #104]	; 0x68
 800d246:	4654      	mov	r4, sl
 800d248:	2205      	movs	r2, #5
 800d24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d24e:	4858      	ldr	r0, [pc, #352]	; (800d3b0 <_vfiprintf_r+0x24c>)
 800d250:	f7f2 ffc6 	bl	80001e0 <memchr>
 800d254:	9a04      	ldr	r2, [sp, #16]
 800d256:	b9d8      	cbnz	r0, 800d290 <_vfiprintf_r+0x12c>
 800d258:	06d1      	lsls	r1, r2, #27
 800d25a:	bf44      	itt	mi
 800d25c:	2320      	movmi	r3, #32
 800d25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d262:	0713      	lsls	r3, r2, #28
 800d264:	bf44      	itt	mi
 800d266:	232b      	movmi	r3, #43	; 0x2b
 800d268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26c:	f89a 3000 	ldrb.w	r3, [sl]
 800d270:	2b2a      	cmp	r3, #42	; 0x2a
 800d272:	d015      	beq.n	800d2a0 <_vfiprintf_r+0x13c>
 800d274:	9a07      	ldr	r2, [sp, #28]
 800d276:	4654      	mov	r4, sl
 800d278:	2000      	movs	r0, #0
 800d27a:	f04f 0c0a 	mov.w	ip, #10
 800d27e:	4621      	mov	r1, r4
 800d280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d284:	3b30      	subs	r3, #48	; 0x30
 800d286:	2b09      	cmp	r3, #9
 800d288:	d94e      	bls.n	800d328 <_vfiprintf_r+0x1c4>
 800d28a:	b1b0      	cbz	r0, 800d2ba <_vfiprintf_r+0x156>
 800d28c:	9207      	str	r2, [sp, #28]
 800d28e:	e014      	b.n	800d2ba <_vfiprintf_r+0x156>
 800d290:	eba0 0308 	sub.w	r3, r0, r8
 800d294:	fa09 f303 	lsl.w	r3, r9, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	9304      	str	r3, [sp, #16]
 800d29c:	46a2      	mov	sl, r4
 800d29e:	e7d2      	b.n	800d246 <_vfiprintf_r+0xe2>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	1d19      	adds	r1, r3, #4
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	9103      	str	r1, [sp, #12]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	bfbb      	ittet	lt
 800d2ac:	425b      	neglt	r3, r3
 800d2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d2b2:	9307      	strge	r3, [sp, #28]
 800d2b4:	9307      	strlt	r3, [sp, #28]
 800d2b6:	bfb8      	it	lt
 800d2b8:	9204      	strlt	r2, [sp, #16]
 800d2ba:	7823      	ldrb	r3, [r4, #0]
 800d2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2be:	d10c      	bne.n	800d2da <_vfiprintf_r+0x176>
 800d2c0:	7863      	ldrb	r3, [r4, #1]
 800d2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d2c4:	d135      	bne.n	800d332 <_vfiprintf_r+0x1ce>
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	1d1a      	adds	r2, r3, #4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	9203      	str	r2, [sp, #12]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bfb8      	it	lt
 800d2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2d6:	3402      	adds	r4, #2
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3c0 <_vfiprintf_r+0x25c>
 800d2de:	7821      	ldrb	r1, [r4, #0]
 800d2e0:	2203      	movs	r2, #3
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f7f2 ff7c 	bl	80001e0 <memchr>
 800d2e8:	b140      	cbz	r0, 800d2fc <_vfiprintf_r+0x198>
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	eba0 000a 	sub.w	r0, r0, sl
 800d2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800d2f4:	9b04      	ldr	r3, [sp, #16]
 800d2f6:	4303      	orrs	r3, r0
 800d2f8:	3401      	adds	r4, #1
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d300:	482c      	ldr	r0, [pc, #176]	; (800d3b4 <_vfiprintf_r+0x250>)
 800d302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d306:	2206      	movs	r2, #6
 800d308:	f7f2 ff6a 	bl	80001e0 <memchr>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d03f      	beq.n	800d390 <_vfiprintf_r+0x22c>
 800d310:	4b29      	ldr	r3, [pc, #164]	; (800d3b8 <_vfiprintf_r+0x254>)
 800d312:	bb1b      	cbnz	r3, 800d35c <_vfiprintf_r+0x1f8>
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	3307      	adds	r3, #7
 800d318:	f023 0307 	bic.w	r3, r3, #7
 800d31c:	3308      	adds	r3, #8
 800d31e:	9303      	str	r3, [sp, #12]
 800d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d322:	443b      	add	r3, r7
 800d324:	9309      	str	r3, [sp, #36]	; 0x24
 800d326:	e767      	b.n	800d1f8 <_vfiprintf_r+0x94>
 800d328:	fb0c 3202 	mla	r2, ip, r2, r3
 800d32c:	460c      	mov	r4, r1
 800d32e:	2001      	movs	r0, #1
 800d330:	e7a5      	b.n	800d27e <_vfiprintf_r+0x11a>
 800d332:	2300      	movs	r3, #0
 800d334:	3401      	adds	r4, #1
 800d336:	9305      	str	r3, [sp, #20]
 800d338:	4619      	mov	r1, r3
 800d33a:	f04f 0c0a 	mov.w	ip, #10
 800d33e:	4620      	mov	r0, r4
 800d340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d344:	3a30      	subs	r2, #48	; 0x30
 800d346:	2a09      	cmp	r2, #9
 800d348:	d903      	bls.n	800d352 <_vfiprintf_r+0x1ee>
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0c5      	beq.n	800d2da <_vfiprintf_r+0x176>
 800d34e:	9105      	str	r1, [sp, #20]
 800d350:	e7c3      	b.n	800d2da <_vfiprintf_r+0x176>
 800d352:	fb0c 2101 	mla	r1, ip, r1, r2
 800d356:	4604      	mov	r4, r0
 800d358:	2301      	movs	r3, #1
 800d35a:	e7f0      	b.n	800d33e <_vfiprintf_r+0x1da>
 800d35c:	ab03      	add	r3, sp, #12
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	462a      	mov	r2, r5
 800d362:	4b16      	ldr	r3, [pc, #88]	; (800d3bc <_vfiprintf_r+0x258>)
 800d364:	a904      	add	r1, sp, #16
 800d366:	4630      	mov	r0, r6
 800d368:	f7fd fdb8 	bl	800aedc <_printf_float>
 800d36c:	4607      	mov	r7, r0
 800d36e:	1c78      	adds	r0, r7, #1
 800d370:	d1d6      	bne.n	800d320 <_vfiprintf_r+0x1bc>
 800d372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d374:	07d9      	lsls	r1, r3, #31
 800d376:	d405      	bmi.n	800d384 <_vfiprintf_r+0x220>
 800d378:	89ab      	ldrh	r3, [r5, #12]
 800d37a:	059a      	lsls	r2, r3, #22
 800d37c:	d402      	bmi.n	800d384 <_vfiprintf_r+0x220>
 800d37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d380:	f000 faaf 	bl	800d8e2 <__retarget_lock_release_recursive>
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	065b      	lsls	r3, r3, #25
 800d388:	f53f af12 	bmi.w	800d1b0 <_vfiprintf_r+0x4c>
 800d38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d38e:	e711      	b.n	800d1b4 <_vfiprintf_r+0x50>
 800d390:	ab03      	add	r3, sp, #12
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	462a      	mov	r2, r5
 800d396:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <_vfiprintf_r+0x258>)
 800d398:	a904      	add	r1, sp, #16
 800d39a:	4630      	mov	r0, r6
 800d39c:	f7fe f842 	bl	800b424 <_printf_i>
 800d3a0:	e7e4      	b.n	800d36c <_vfiprintf_r+0x208>
 800d3a2:	bf00      	nop
 800d3a4:	080210bc 	.word	0x080210bc
 800d3a8:	080210dc 	.word	0x080210dc
 800d3ac:	0802109c 	.word	0x0802109c
 800d3b0:	08020f44 	.word	0x08020f44
 800d3b4:	08020f4e 	.word	0x08020f4e
 800d3b8:	0800aedd 	.word	0x0800aedd
 800d3bc:	0800d141 	.word	0x0800d141
 800d3c0:	08020f4a 	.word	0x08020f4a

0800d3c4 <__swbuf_r>:
 800d3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c6:	460e      	mov	r6, r1
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	b118      	cbz	r0, 800d3d6 <__swbuf_r+0x12>
 800d3ce:	6983      	ldr	r3, [r0, #24]
 800d3d0:	b90b      	cbnz	r3, 800d3d6 <__swbuf_r+0x12>
 800d3d2:	f000 f9e7 	bl	800d7a4 <__sinit>
 800d3d6:	4b21      	ldr	r3, [pc, #132]	; (800d45c <__swbuf_r+0x98>)
 800d3d8:	429c      	cmp	r4, r3
 800d3da:	d12b      	bne.n	800d434 <__swbuf_r+0x70>
 800d3dc:	686c      	ldr	r4, [r5, #4]
 800d3de:	69a3      	ldr	r3, [r4, #24]
 800d3e0:	60a3      	str	r3, [r4, #8]
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	071a      	lsls	r2, r3, #28
 800d3e6:	d52f      	bpl.n	800d448 <__swbuf_r+0x84>
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	b36b      	cbz	r3, 800d448 <__swbuf_r+0x84>
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	6820      	ldr	r0, [r4, #0]
 800d3f0:	1ac0      	subs	r0, r0, r3
 800d3f2:	6963      	ldr	r3, [r4, #20]
 800d3f4:	b2f6      	uxtb	r6, r6
 800d3f6:	4283      	cmp	r3, r0
 800d3f8:	4637      	mov	r7, r6
 800d3fa:	dc04      	bgt.n	800d406 <__swbuf_r+0x42>
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4628      	mov	r0, r5
 800d400:	f000 f93c 	bl	800d67c <_fflush_r>
 800d404:	bb30      	cbnz	r0, 800d454 <__swbuf_r+0x90>
 800d406:	68a3      	ldr	r3, [r4, #8]
 800d408:	3b01      	subs	r3, #1
 800d40a:	60a3      	str	r3, [r4, #8]
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	6022      	str	r2, [r4, #0]
 800d412:	701e      	strb	r6, [r3, #0]
 800d414:	6963      	ldr	r3, [r4, #20]
 800d416:	3001      	adds	r0, #1
 800d418:	4283      	cmp	r3, r0
 800d41a:	d004      	beq.n	800d426 <__swbuf_r+0x62>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	07db      	lsls	r3, r3, #31
 800d420:	d506      	bpl.n	800d430 <__swbuf_r+0x6c>
 800d422:	2e0a      	cmp	r6, #10
 800d424:	d104      	bne.n	800d430 <__swbuf_r+0x6c>
 800d426:	4621      	mov	r1, r4
 800d428:	4628      	mov	r0, r5
 800d42a:	f000 f927 	bl	800d67c <_fflush_r>
 800d42e:	b988      	cbnz	r0, 800d454 <__swbuf_r+0x90>
 800d430:	4638      	mov	r0, r7
 800d432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d434:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <__swbuf_r+0x9c>)
 800d436:	429c      	cmp	r4, r3
 800d438:	d101      	bne.n	800d43e <__swbuf_r+0x7a>
 800d43a:	68ac      	ldr	r4, [r5, #8]
 800d43c:	e7cf      	b.n	800d3de <__swbuf_r+0x1a>
 800d43e:	4b09      	ldr	r3, [pc, #36]	; (800d464 <__swbuf_r+0xa0>)
 800d440:	429c      	cmp	r4, r3
 800d442:	bf08      	it	eq
 800d444:	68ec      	ldreq	r4, [r5, #12]
 800d446:	e7ca      	b.n	800d3de <__swbuf_r+0x1a>
 800d448:	4621      	mov	r1, r4
 800d44a:	4628      	mov	r0, r5
 800d44c:	f000 f81a 	bl	800d484 <__swsetup_r>
 800d450:	2800      	cmp	r0, #0
 800d452:	d0cb      	beq.n	800d3ec <__swbuf_r+0x28>
 800d454:	f04f 37ff 	mov.w	r7, #4294967295
 800d458:	e7ea      	b.n	800d430 <__swbuf_r+0x6c>
 800d45a:	bf00      	nop
 800d45c:	080210bc 	.word	0x080210bc
 800d460:	080210dc 	.word	0x080210dc
 800d464:	0802109c 	.word	0x0802109c

0800d468 <__ascii_wctomb>:
 800d468:	b149      	cbz	r1, 800d47e <__ascii_wctomb+0x16>
 800d46a:	2aff      	cmp	r2, #255	; 0xff
 800d46c:	bf85      	ittet	hi
 800d46e:	238a      	movhi	r3, #138	; 0x8a
 800d470:	6003      	strhi	r3, [r0, #0]
 800d472:	700a      	strbls	r2, [r1, #0]
 800d474:	f04f 30ff 	movhi.w	r0, #4294967295
 800d478:	bf98      	it	ls
 800d47a:	2001      	movls	r0, #1
 800d47c:	4770      	bx	lr
 800d47e:	4608      	mov	r0, r1
 800d480:	4770      	bx	lr
	...

0800d484 <__swsetup_r>:
 800d484:	4b32      	ldr	r3, [pc, #200]	; (800d550 <__swsetup_r+0xcc>)
 800d486:	b570      	push	{r4, r5, r6, lr}
 800d488:	681d      	ldr	r5, [r3, #0]
 800d48a:	4606      	mov	r6, r0
 800d48c:	460c      	mov	r4, r1
 800d48e:	b125      	cbz	r5, 800d49a <__swsetup_r+0x16>
 800d490:	69ab      	ldr	r3, [r5, #24]
 800d492:	b913      	cbnz	r3, 800d49a <__swsetup_r+0x16>
 800d494:	4628      	mov	r0, r5
 800d496:	f000 f985 	bl	800d7a4 <__sinit>
 800d49a:	4b2e      	ldr	r3, [pc, #184]	; (800d554 <__swsetup_r+0xd0>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	d10f      	bne.n	800d4c0 <__swsetup_r+0x3c>
 800d4a0:	686c      	ldr	r4, [r5, #4]
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4a8:	0719      	lsls	r1, r3, #28
 800d4aa:	d42c      	bmi.n	800d506 <__swsetup_r+0x82>
 800d4ac:	06dd      	lsls	r5, r3, #27
 800d4ae:	d411      	bmi.n	800d4d4 <__swsetup_r+0x50>
 800d4b0:	2309      	movs	r3, #9
 800d4b2:	6033      	str	r3, [r6, #0]
 800d4b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d4be:	e03e      	b.n	800d53e <__swsetup_r+0xba>
 800d4c0:	4b25      	ldr	r3, [pc, #148]	; (800d558 <__swsetup_r+0xd4>)
 800d4c2:	429c      	cmp	r4, r3
 800d4c4:	d101      	bne.n	800d4ca <__swsetup_r+0x46>
 800d4c6:	68ac      	ldr	r4, [r5, #8]
 800d4c8:	e7eb      	b.n	800d4a2 <__swsetup_r+0x1e>
 800d4ca:	4b24      	ldr	r3, [pc, #144]	; (800d55c <__swsetup_r+0xd8>)
 800d4cc:	429c      	cmp	r4, r3
 800d4ce:	bf08      	it	eq
 800d4d0:	68ec      	ldreq	r4, [r5, #12]
 800d4d2:	e7e6      	b.n	800d4a2 <__swsetup_r+0x1e>
 800d4d4:	0758      	lsls	r0, r3, #29
 800d4d6:	d512      	bpl.n	800d4fe <__swsetup_r+0x7a>
 800d4d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4da:	b141      	cbz	r1, 800d4ee <__swsetup_r+0x6a>
 800d4dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4e0:	4299      	cmp	r1, r3
 800d4e2:	d002      	beq.n	800d4ea <__swsetup_r+0x66>
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff fb31 	bl	800cb4c <_free_r>
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	6363      	str	r3, [r4, #52]	; 0x34
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4f4:	81a3      	strh	r3, [r4, #12]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6063      	str	r3, [r4, #4]
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	6023      	str	r3, [r4, #0]
 800d4fe:	89a3      	ldrh	r3, [r4, #12]
 800d500:	f043 0308 	orr.w	r3, r3, #8
 800d504:	81a3      	strh	r3, [r4, #12]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	b94b      	cbnz	r3, 800d51e <__swsetup_r+0x9a>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d514:	d003      	beq.n	800d51e <__swsetup_r+0x9a>
 800d516:	4621      	mov	r1, r4
 800d518:	4630      	mov	r0, r6
 800d51a:	f000 fa09 	bl	800d930 <__smakebuf_r>
 800d51e:	89a0      	ldrh	r0, [r4, #12]
 800d520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d524:	f010 0301 	ands.w	r3, r0, #1
 800d528:	d00a      	beq.n	800d540 <__swsetup_r+0xbc>
 800d52a:	2300      	movs	r3, #0
 800d52c:	60a3      	str	r3, [r4, #8]
 800d52e:	6963      	ldr	r3, [r4, #20]
 800d530:	425b      	negs	r3, r3
 800d532:	61a3      	str	r3, [r4, #24]
 800d534:	6923      	ldr	r3, [r4, #16]
 800d536:	b943      	cbnz	r3, 800d54a <__swsetup_r+0xc6>
 800d538:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d53c:	d1ba      	bne.n	800d4b4 <__swsetup_r+0x30>
 800d53e:	bd70      	pop	{r4, r5, r6, pc}
 800d540:	0781      	lsls	r1, r0, #30
 800d542:	bf58      	it	pl
 800d544:	6963      	ldrpl	r3, [r4, #20]
 800d546:	60a3      	str	r3, [r4, #8]
 800d548:	e7f4      	b.n	800d534 <__swsetup_r+0xb0>
 800d54a:	2000      	movs	r0, #0
 800d54c:	e7f7      	b.n	800d53e <__swsetup_r+0xba>
 800d54e:	bf00      	nop
 800d550:	20000014 	.word	0x20000014
 800d554:	080210bc 	.word	0x080210bc
 800d558:	080210dc 	.word	0x080210dc
 800d55c:	0802109c 	.word	0x0802109c

0800d560 <abort>:
 800d560:	b508      	push	{r3, lr}
 800d562:	2006      	movs	r0, #6
 800d564:	f000 fa54 	bl	800da10 <raise>
 800d568:	2001      	movs	r0, #1
 800d56a:	f7f5 fa9b 	bl	8002aa4 <_exit>
	...

0800d570 <__sflush_r>:
 800d570:	898a      	ldrh	r2, [r1, #12]
 800d572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	0710      	lsls	r0, r2, #28
 800d57a:	460c      	mov	r4, r1
 800d57c:	d458      	bmi.n	800d630 <__sflush_r+0xc0>
 800d57e:	684b      	ldr	r3, [r1, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc05      	bgt.n	800d590 <__sflush_r+0x20>
 800d584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d586:	2b00      	cmp	r3, #0
 800d588:	dc02      	bgt.n	800d590 <__sflush_r+0x20>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d592:	2e00      	cmp	r6, #0
 800d594:	d0f9      	beq.n	800d58a <__sflush_r+0x1a>
 800d596:	2300      	movs	r3, #0
 800d598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d59c:	682f      	ldr	r7, [r5, #0]
 800d59e:	602b      	str	r3, [r5, #0]
 800d5a0:	d032      	beq.n	800d608 <__sflush_r+0x98>
 800d5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	075a      	lsls	r2, r3, #29
 800d5a8:	d505      	bpl.n	800d5b6 <__sflush_r+0x46>
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	1ac0      	subs	r0, r0, r3
 800d5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b0:	b10b      	cbz	r3, 800d5b6 <__sflush_r+0x46>
 800d5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5b4:	1ac0      	subs	r0, r0, r3
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	d106      	bne.n	800d5d6 <__sflush_r+0x66>
 800d5c8:	6829      	ldr	r1, [r5, #0]
 800d5ca:	291d      	cmp	r1, #29
 800d5cc:	d82c      	bhi.n	800d628 <__sflush_r+0xb8>
 800d5ce:	4a2a      	ldr	r2, [pc, #168]	; (800d678 <__sflush_r+0x108>)
 800d5d0:	40ca      	lsrs	r2, r1
 800d5d2:	07d6      	lsls	r6, r2, #31
 800d5d4:	d528      	bpl.n	800d628 <__sflush_r+0xb8>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	6062      	str	r2, [r4, #4]
 800d5da:	04d9      	lsls	r1, r3, #19
 800d5dc:	6922      	ldr	r2, [r4, #16]
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	d504      	bpl.n	800d5ec <__sflush_r+0x7c>
 800d5e2:	1c42      	adds	r2, r0, #1
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0x7a>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b903      	cbnz	r3, 800d5ec <__sflush_r+0x7c>
 800d5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800d5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ee:	602f      	str	r7, [r5, #0]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d0ca      	beq.n	800d58a <__sflush_r+0x1a>
 800d5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d002      	beq.n	800d602 <__sflush_r+0x92>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f7ff faa5 	bl	800cb4c <_free_r>
 800d602:	2000      	movs	r0, #0
 800d604:	6360      	str	r0, [r4, #52]	; 0x34
 800d606:	e7c1      	b.n	800d58c <__sflush_r+0x1c>
 800d608:	6a21      	ldr	r1, [r4, #32]
 800d60a:	2301      	movs	r3, #1
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b0      	blx	r6
 800d610:	1c41      	adds	r1, r0, #1
 800d612:	d1c7      	bne.n	800d5a4 <__sflush_r+0x34>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0c4      	beq.n	800d5a4 <__sflush_r+0x34>
 800d61a:	2b1d      	cmp	r3, #29
 800d61c:	d001      	beq.n	800d622 <__sflush_r+0xb2>
 800d61e:	2b16      	cmp	r3, #22
 800d620:	d101      	bne.n	800d626 <__sflush_r+0xb6>
 800d622:	602f      	str	r7, [r5, #0]
 800d624:	e7b1      	b.n	800d58a <__sflush_r+0x1a>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	e7ad      	b.n	800d58c <__sflush_r+0x1c>
 800d630:	690f      	ldr	r7, [r1, #16]
 800d632:	2f00      	cmp	r7, #0
 800d634:	d0a9      	beq.n	800d58a <__sflush_r+0x1a>
 800d636:	0793      	lsls	r3, r2, #30
 800d638:	680e      	ldr	r6, [r1, #0]
 800d63a:	bf08      	it	eq
 800d63c:	694b      	ldreq	r3, [r1, #20]
 800d63e:	600f      	str	r7, [r1, #0]
 800d640:	bf18      	it	ne
 800d642:	2300      	movne	r3, #0
 800d644:	eba6 0807 	sub.w	r8, r6, r7
 800d648:	608b      	str	r3, [r1, #8]
 800d64a:	f1b8 0f00 	cmp.w	r8, #0
 800d64e:	dd9c      	ble.n	800d58a <__sflush_r+0x1a>
 800d650:	6a21      	ldr	r1, [r4, #32]
 800d652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d654:	4643      	mov	r3, r8
 800d656:	463a      	mov	r2, r7
 800d658:	4628      	mov	r0, r5
 800d65a:	47b0      	blx	r6
 800d65c:	2800      	cmp	r0, #0
 800d65e:	dc06      	bgt.n	800d66e <__sflush_r+0xfe>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e78e      	b.n	800d58c <__sflush_r+0x1c>
 800d66e:	4407      	add	r7, r0
 800d670:	eba8 0800 	sub.w	r8, r8, r0
 800d674:	e7e9      	b.n	800d64a <__sflush_r+0xda>
 800d676:	bf00      	nop
 800d678:	20400001 	.word	0x20400001

0800d67c <_fflush_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	690b      	ldr	r3, [r1, #16]
 800d680:	4605      	mov	r5, r0
 800d682:	460c      	mov	r4, r1
 800d684:	b913      	cbnz	r3, 800d68c <_fflush_r+0x10>
 800d686:	2500      	movs	r5, #0
 800d688:	4628      	mov	r0, r5
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	b118      	cbz	r0, 800d696 <_fflush_r+0x1a>
 800d68e:	6983      	ldr	r3, [r0, #24]
 800d690:	b90b      	cbnz	r3, 800d696 <_fflush_r+0x1a>
 800d692:	f000 f887 	bl	800d7a4 <__sinit>
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <_fflush_r+0x6c>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	d11b      	bne.n	800d6d4 <_fflush_r+0x58>
 800d69c:	686c      	ldr	r4, [r5, #4]
 800d69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0ef      	beq.n	800d686 <_fflush_r+0xa>
 800d6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6a8:	07d0      	lsls	r0, r2, #31
 800d6aa:	d404      	bmi.n	800d6b6 <_fflush_r+0x3a>
 800d6ac:	0599      	lsls	r1, r3, #22
 800d6ae:	d402      	bmi.n	800d6b6 <_fflush_r+0x3a>
 800d6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6b2:	f000 f915 	bl	800d8e0 <__retarget_lock_acquire_recursive>
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f7ff ff59 	bl	800d570 <__sflush_r>
 800d6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c0:	07da      	lsls	r2, r3, #31
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	d4e0      	bmi.n	800d688 <_fflush_r+0xc>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	059b      	lsls	r3, r3, #22
 800d6ca:	d4dd      	bmi.n	800d688 <_fflush_r+0xc>
 800d6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ce:	f000 f908 	bl	800d8e2 <__retarget_lock_release_recursive>
 800d6d2:	e7d9      	b.n	800d688 <_fflush_r+0xc>
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <_fflush_r+0x70>)
 800d6d6:	429c      	cmp	r4, r3
 800d6d8:	d101      	bne.n	800d6de <_fflush_r+0x62>
 800d6da:	68ac      	ldr	r4, [r5, #8]
 800d6dc:	e7df      	b.n	800d69e <_fflush_r+0x22>
 800d6de:	4b04      	ldr	r3, [pc, #16]	; (800d6f0 <_fflush_r+0x74>)
 800d6e0:	429c      	cmp	r4, r3
 800d6e2:	bf08      	it	eq
 800d6e4:	68ec      	ldreq	r4, [r5, #12]
 800d6e6:	e7da      	b.n	800d69e <_fflush_r+0x22>
 800d6e8:	080210bc 	.word	0x080210bc
 800d6ec:	080210dc 	.word	0x080210dc
 800d6f0:	0802109c 	.word	0x0802109c

0800d6f4 <std>:
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d702:	6083      	str	r3, [r0, #8]
 800d704:	8181      	strh	r1, [r0, #12]
 800d706:	6643      	str	r3, [r0, #100]	; 0x64
 800d708:	81c2      	strh	r2, [r0, #14]
 800d70a:	6183      	str	r3, [r0, #24]
 800d70c:	4619      	mov	r1, r3
 800d70e:	2208      	movs	r2, #8
 800d710:	305c      	adds	r0, #92	; 0x5c
 800d712:	f7fd fb3b 	bl	800ad8c <memset>
 800d716:	4b05      	ldr	r3, [pc, #20]	; (800d72c <std+0x38>)
 800d718:	6263      	str	r3, [r4, #36]	; 0x24
 800d71a:	4b05      	ldr	r3, [pc, #20]	; (800d730 <std+0x3c>)
 800d71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <std+0x40>)
 800d720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x44>)
 800d724:	6224      	str	r4, [r4, #32]
 800d726:	6323      	str	r3, [r4, #48]	; 0x30
 800d728:	bd10      	pop	{r4, pc}
 800d72a:	bf00      	nop
 800d72c:	0800da49 	.word	0x0800da49
 800d730:	0800da6b 	.word	0x0800da6b
 800d734:	0800daa3 	.word	0x0800daa3
 800d738:	0800dac7 	.word	0x0800dac7

0800d73c <_cleanup_r>:
 800d73c:	4901      	ldr	r1, [pc, #4]	; (800d744 <_cleanup_r+0x8>)
 800d73e:	f000 b8af 	b.w	800d8a0 <_fwalk_reent>
 800d742:	bf00      	nop
 800d744:	0800d67d 	.word	0x0800d67d

0800d748 <__sfmoreglue>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	2268      	movs	r2, #104	; 0x68
 800d74c:	1e4d      	subs	r5, r1, #1
 800d74e:	4355      	muls	r5, r2
 800d750:	460e      	mov	r6, r1
 800d752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d756:	f7ff fa65 	bl	800cc24 <_malloc_r>
 800d75a:	4604      	mov	r4, r0
 800d75c:	b140      	cbz	r0, 800d770 <__sfmoreglue+0x28>
 800d75e:	2100      	movs	r1, #0
 800d760:	e9c0 1600 	strd	r1, r6, [r0]
 800d764:	300c      	adds	r0, #12
 800d766:	60a0      	str	r0, [r4, #8]
 800d768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d76c:	f7fd fb0e 	bl	800ad8c <memset>
 800d770:	4620      	mov	r0, r4
 800d772:	bd70      	pop	{r4, r5, r6, pc}

0800d774 <__sfp_lock_acquire>:
 800d774:	4801      	ldr	r0, [pc, #4]	; (800d77c <__sfp_lock_acquire+0x8>)
 800d776:	f000 b8b3 	b.w	800d8e0 <__retarget_lock_acquire_recursive>
 800d77a:	bf00      	nop
 800d77c:	200045d9 	.word	0x200045d9

0800d780 <__sfp_lock_release>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__sfp_lock_release+0x8>)
 800d782:	f000 b8ae 	b.w	800d8e2 <__retarget_lock_release_recursive>
 800d786:	bf00      	nop
 800d788:	200045d9 	.word	0x200045d9

0800d78c <__sinit_lock_acquire>:
 800d78c:	4801      	ldr	r0, [pc, #4]	; (800d794 <__sinit_lock_acquire+0x8>)
 800d78e:	f000 b8a7 	b.w	800d8e0 <__retarget_lock_acquire_recursive>
 800d792:	bf00      	nop
 800d794:	200045da 	.word	0x200045da

0800d798 <__sinit_lock_release>:
 800d798:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <__sinit_lock_release+0x8>)
 800d79a:	f000 b8a2 	b.w	800d8e2 <__retarget_lock_release_recursive>
 800d79e:	bf00      	nop
 800d7a0:	200045da 	.word	0x200045da

0800d7a4 <__sinit>:
 800d7a4:	b510      	push	{r4, lr}
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	f7ff fff0 	bl	800d78c <__sinit_lock_acquire>
 800d7ac:	69a3      	ldr	r3, [r4, #24]
 800d7ae:	b11b      	cbz	r3, 800d7b8 <__sinit+0x14>
 800d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b4:	f7ff bff0 	b.w	800d798 <__sinit_lock_release>
 800d7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800d7be:	4b13      	ldr	r3, [pc, #76]	; (800d80c <__sinit+0x68>)
 800d7c0:	4a13      	ldr	r2, [pc, #76]	; (800d810 <__sinit+0x6c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	bf04      	itt	eq
 800d7ca:	2301      	moveq	r3, #1
 800d7cc:	61a3      	streq	r3, [r4, #24]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 f820 	bl	800d814 <__sfp>
 800d7d4:	6060      	str	r0, [r4, #4]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 f81c 	bl	800d814 <__sfp>
 800d7dc:	60a0      	str	r0, [r4, #8]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 f818 	bl	800d814 <__sfp>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	60e0      	str	r0, [r4, #12]
 800d7e8:	2104      	movs	r1, #4
 800d7ea:	6860      	ldr	r0, [r4, #4]
 800d7ec:	f7ff ff82 	bl	800d6f4 <std>
 800d7f0:	68a0      	ldr	r0, [r4, #8]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	2109      	movs	r1, #9
 800d7f6:	f7ff ff7d 	bl	800d6f4 <std>
 800d7fa:	68e0      	ldr	r0, [r4, #12]
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	2112      	movs	r1, #18
 800d800:	f7ff ff78 	bl	800d6f4 <std>
 800d804:	2301      	movs	r3, #1
 800d806:	61a3      	str	r3, [r4, #24]
 800d808:	e7d2      	b.n	800d7b0 <__sinit+0xc>
 800d80a:	bf00      	nop
 800d80c:	08020d20 	.word	0x08020d20
 800d810:	0800d73d 	.word	0x0800d73d

0800d814 <__sfp>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	4607      	mov	r7, r0
 800d818:	f7ff ffac 	bl	800d774 <__sfp_lock_acquire>
 800d81c:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <__sfp+0x84>)
 800d81e:	681e      	ldr	r6, [r3, #0]
 800d820:	69b3      	ldr	r3, [r6, #24]
 800d822:	b913      	cbnz	r3, 800d82a <__sfp+0x16>
 800d824:	4630      	mov	r0, r6
 800d826:	f7ff ffbd 	bl	800d7a4 <__sinit>
 800d82a:	3648      	adds	r6, #72	; 0x48
 800d82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d830:	3b01      	subs	r3, #1
 800d832:	d503      	bpl.n	800d83c <__sfp+0x28>
 800d834:	6833      	ldr	r3, [r6, #0]
 800d836:	b30b      	cbz	r3, 800d87c <__sfp+0x68>
 800d838:	6836      	ldr	r6, [r6, #0]
 800d83a:	e7f7      	b.n	800d82c <__sfp+0x18>
 800d83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d840:	b9d5      	cbnz	r5, 800d878 <__sfp+0x64>
 800d842:	4b16      	ldr	r3, [pc, #88]	; (800d89c <__sfp+0x88>)
 800d844:	60e3      	str	r3, [r4, #12]
 800d846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d84a:	6665      	str	r5, [r4, #100]	; 0x64
 800d84c:	f000 f847 	bl	800d8de <__retarget_lock_init_recursive>
 800d850:	f7ff ff96 	bl	800d780 <__sfp_lock_release>
 800d854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d85c:	6025      	str	r5, [r4, #0]
 800d85e:	61a5      	str	r5, [r4, #24]
 800d860:	2208      	movs	r2, #8
 800d862:	4629      	mov	r1, r5
 800d864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d868:	f7fd fa90 	bl	800ad8c <memset>
 800d86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d874:	4620      	mov	r0, r4
 800d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d878:	3468      	adds	r4, #104	; 0x68
 800d87a:	e7d9      	b.n	800d830 <__sfp+0x1c>
 800d87c:	2104      	movs	r1, #4
 800d87e:	4638      	mov	r0, r7
 800d880:	f7ff ff62 	bl	800d748 <__sfmoreglue>
 800d884:	4604      	mov	r4, r0
 800d886:	6030      	str	r0, [r6, #0]
 800d888:	2800      	cmp	r0, #0
 800d88a:	d1d5      	bne.n	800d838 <__sfp+0x24>
 800d88c:	f7ff ff78 	bl	800d780 <__sfp_lock_release>
 800d890:	230c      	movs	r3, #12
 800d892:	603b      	str	r3, [r7, #0]
 800d894:	e7ee      	b.n	800d874 <__sfp+0x60>
 800d896:	bf00      	nop
 800d898:	08020d20 	.word	0x08020d20
 800d89c:	ffff0001 	.word	0xffff0001

0800d8a0 <_fwalk_reent>:
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	4688      	mov	r8, r1
 800d8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8ac:	2700      	movs	r7, #0
 800d8ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d8b6:	d505      	bpl.n	800d8c4 <_fwalk_reent+0x24>
 800d8b8:	6824      	ldr	r4, [r4, #0]
 800d8ba:	2c00      	cmp	r4, #0
 800d8bc:	d1f7      	bne.n	800d8ae <_fwalk_reent+0xe>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c4:	89ab      	ldrh	r3, [r5, #12]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d907      	bls.n	800d8da <_fwalk_reent+0x3a>
 800d8ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	d003      	beq.n	800d8da <_fwalk_reent+0x3a>
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	47c0      	blx	r8
 800d8d8:	4307      	orrs	r7, r0
 800d8da:	3568      	adds	r5, #104	; 0x68
 800d8dc:	e7e9      	b.n	800d8b2 <_fwalk_reent+0x12>

0800d8de <__retarget_lock_init_recursive>:
 800d8de:	4770      	bx	lr

0800d8e0 <__retarget_lock_acquire_recursive>:
 800d8e0:	4770      	bx	lr

0800d8e2 <__retarget_lock_release_recursive>:
 800d8e2:	4770      	bx	lr

0800d8e4 <__swhatbuf_r>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	460e      	mov	r6, r1
 800d8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ec:	2900      	cmp	r1, #0
 800d8ee:	b096      	sub	sp, #88	; 0x58
 800d8f0:	4614      	mov	r4, r2
 800d8f2:	461d      	mov	r5, r3
 800d8f4:	da08      	bge.n	800d908 <__swhatbuf_r+0x24>
 800d8f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	602a      	str	r2, [r5, #0]
 800d8fe:	061a      	lsls	r2, r3, #24
 800d900:	d410      	bmi.n	800d924 <__swhatbuf_r+0x40>
 800d902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d906:	e00e      	b.n	800d926 <__swhatbuf_r+0x42>
 800d908:	466a      	mov	r2, sp
 800d90a:	f000 f903 	bl	800db14 <_fstat_r>
 800d90e:	2800      	cmp	r0, #0
 800d910:	dbf1      	blt.n	800d8f6 <__swhatbuf_r+0x12>
 800d912:	9a01      	ldr	r2, [sp, #4]
 800d914:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d918:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d91c:	425a      	negs	r2, r3
 800d91e:	415a      	adcs	r2, r3
 800d920:	602a      	str	r2, [r5, #0]
 800d922:	e7ee      	b.n	800d902 <__swhatbuf_r+0x1e>
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	2000      	movs	r0, #0
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	b016      	add	sp, #88	; 0x58
 800d92c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d930 <__smakebuf_r>:
 800d930:	898b      	ldrh	r3, [r1, #12]
 800d932:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d934:	079d      	lsls	r5, r3, #30
 800d936:	4606      	mov	r6, r0
 800d938:	460c      	mov	r4, r1
 800d93a:	d507      	bpl.n	800d94c <__smakebuf_r+0x1c>
 800d93c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	6123      	str	r3, [r4, #16]
 800d944:	2301      	movs	r3, #1
 800d946:	6163      	str	r3, [r4, #20]
 800d948:	b002      	add	sp, #8
 800d94a:	bd70      	pop	{r4, r5, r6, pc}
 800d94c:	ab01      	add	r3, sp, #4
 800d94e:	466a      	mov	r2, sp
 800d950:	f7ff ffc8 	bl	800d8e4 <__swhatbuf_r>
 800d954:	9900      	ldr	r1, [sp, #0]
 800d956:	4605      	mov	r5, r0
 800d958:	4630      	mov	r0, r6
 800d95a:	f7ff f963 	bl	800cc24 <_malloc_r>
 800d95e:	b948      	cbnz	r0, 800d974 <__smakebuf_r+0x44>
 800d960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d964:	059a      	lsls	r2, r3, #22
 800d966:	d4ef      	bmi.n	800d948 <__smakebuf_r+0x18>
 800d968:	f023 0303 	bic.w	r3, r3, #3
 800d96c:	f043 0302 	orr.w	r3, r3, #2
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	e7e3      	b.n	800d93c <__smakebuf_r+0xc>
 800d974:	4b0d      	ldr	r3, [pc, #52]	; (800d9ac <__smakebuf_r+0x7c>)
 800d976:	62b3      	str	r3, [r6, #40]	; 0x28
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	6020      	str	r0, [r4, #0]
 800d97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	9b00      	ldr	r3, [sp, #0]
 800d984:	6163      	str	r3, [r4, #20]
 800d986:	9b01      	ldr	r3, [sp, #4]
 800d988:	6120      	str	r0, [r4, #16]
 800d98a:	b15b      	cbz	r3, 800d9a4 <__smakebuf_r+0x74>
 800d98c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d990:	4630      	mov	r0, r6
 800d992:	f000 f8d1 	bl	800db38 <_isatty_r>
 800d996:	b128      	cbz	r0, 800d9a4 <__smakebuf_r+0x74>
 800d998:	89a3      	ldrh	r3, [r4, #12]
 800d99a:	f023 0303 	bic.w	r3, r3, #3
 800d99e:	f043 0301 	orr.w	r3, r3, #1
 800d9a2:	81a3      	strh	r3, [r4, #12]
 800d9a4:	89a0      	ldrh	r0, [r4, #12]
 800d9a6:	4305      	orrs	r5, r0
 800d9a8:	81a5      	strh	r5, [r4, #12]
 800d9aa:	e7cd      	b.n	800d948 <__smakebuf_r+0x18>
 800d9ac:	0800d73d 	.word	0x0800d73d

0800d9b0 <_malloc_usable_size_r>:
 800d9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b4:	1f18      	subs	r0, r3, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfbc      	itt	lt
 800d9ba:	580b      	ldrlt	r3, [r1, r0]
 800d9bc:	18c0      	addlt	r0, r0, r3
 800d9be:	4770      	bx	lr

0800d9c0 <_raise_r>:
 800d9c0:	291f      	cmp	r1, #31
 800d9c2:	b538      	push	{r3, r4, r5, lr}
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	460d      	mov	r5, r1
 800d9c8:	d904      	bls.n	800d9d4 <_raise_r+0x14>
 800d9ca:	2316      	movs	r3, #22
 800d9cc:	6003      	str	r3, [r0, #0]
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9d6:	b112      	cbz	r2, 800d9de <_raise_r+0x1e>
 800d9d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9dc:	b94b      	cbnz	r3, 800d9f2 <_raise_r+0x32>
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 f830 	bl	800da44 <_getpid_r>
 800d9e4:	462a      	mov	r2, r5
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ee:	f000 b817 	b.w	800da20 <_kill_r>
 800d9f2:	2b01      	cmp	r3, #1
 800d9f4:	d00a      	beq.n	800da0c <_raise_r+0x4c>
 800d9f6:	1c59      	adds	r1, r3, #1
 800d9f8:	d103      	bne.n	800da02 <_raise_r+0x42>
 800d9fa:	2316      	movs	r3, #22
 800d9fc:	6003      	str	r3, [r0, #0]
 800d9fe:	2001      	movs	r0, #1
 800da00:	e7e7      	b.n	800d9d2 <_raise_r+0x12>
 800da02:	2400      	movs	r4, #0
 800da04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da08:	4628      	mov	r0, r5
 800da0a:	4798      	blx	r3
 800da0c:	2000      	movs	r0, #0
 800da0e:	e7e0      	b.n	800d9d2 <_raise_r+0x12>

0800da10 <raise>:
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <raise+0xc>)
 800da12:	4601      	mov	r1, r0
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	f7ff bfd3 	b.w	800d9c0 <_raise_r>
 800da1a:	bf00      	nop
 800da1c:	20000014 	.word	0x20000014

0800da20 <_kill_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_kill_r+0x20>)
 800da24:	2300      	movs	r3, #0
 800da26:	4604      	mov	r4, r0
 800da28:	4608      	mov	r0, r1
 800da2a:	4611      	mov	r1, r2
 800da2c:	602b      	str	r3, [r5, #0]
 800da2e:	f7f5 f829 	bl	8002a84 <_kill>
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	d102      	bne.n	800da3c <_kill_r+0x1c>
 800da36:	682b      	ldr	r3, [r5, #0]
 800da38:	b103      	cbz	r3, 800da3c <_kill_r+0x1c>
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	bf00      	nop
 800da40:	200045d4 	.word	0x200045d4

0800da44 <_getpid_r>:
 800da44:	f7f5 b816 	b.w	8002a74 <_getpid>

0800da48 <__sread>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	460c      	mov	r4, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 f894 	bl	800db7c <_read_r>
 800da54:	2800      	cmp	r0, #0
 800da56:	bfab      	itete	ge
 800da58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da5a:	89a3      	ldrhlt	r3, [r4, #12]
 800da5c:	181b      	addge	r3, r3, r0
 800da5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da62:	bfac      	ite	ge
 800da64:	6563      	strge	r3, [r4, #84]	; 0x54
 800da66:	81a3      	strhlt	r3, [r4, #12]
 800da68:	bd10      	pop	{r4, pc}

0800da6a <__swrite>:
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	898b      	ldrh	r3, [r1, #12]
 800da72:	05db      	lsls	r3, r3, #23
 800da74:	4605      	mov	r5, r0
 800da76:	460c      	mov	r4, r1
 800da78:	4616      	mov	r6, r2
 800da7a:	d505      	bpl.n	800da88 <__swrite+0x1e>
 800da7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da80:	2302      	movs	r3, #2
 800da82:	2200      	movs	r2, #0
 800da84:	f000 f868 	bl	800db58 <_lseek_r>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4628      	mov	r0, r5
 800da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9e:	f000 b817 	b.w	800dad0 <_write_r>

0800daa2 <__sseek>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 f855 	bl	800db58 <_lseek_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	bf15      	itete	ne
 800dab4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dabe:	81a3      	strheq	r3, [r4, #12]
 800dac0:	bf18      	it	ne
 800dac2:	81a3      	strhne	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__sclose>:
 800dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daca:	f000 b813 	b.w	800daf4 <_close_r>
	...

0800dad0 <_write_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4d07      	ldr	r5, [pc, #28]	; (800daf0 <_write_r+0x20>)
 800dad4:	4604      	mov	r4, r0
 800dad6:	4608      	mov	r0, r1
 800dad8:	4611      	mov	r1, r2
 800dada:	2200      	movs	r2, #0
 800dadc:	602a      	str	r2, [r5, #0]
 800dade:	461a      	mov	r2, r3
 800dae0:	f7f5 f807 	bl	8002af2 <_write>
 800dae4:	1c43      	adds	r3, r0, #1
 800dae6:	d102      	bne.n	800daee <_write_r+0x1e>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	b103      	cbz	r3, 800daee <_write_r+0x1e>
 800daec:	6023      	str	r3, [r4, #0]
 800daee:	bd38      	pop	{r3, r4, r5, pc}
 800daf0:	200045d4 	.word	0x200045d4

0800daf4 <_close_r>:
 800daf4:	b538      	push	{r3, r4, r5, lr}
 800daf6:	4d06      	ldr	r5, [pc, #24]	; (800db10 <_close_r+0x1c>)
 800daf8:	2300      	movs	r3, #0
 800dafa:	4604      	mov	r4, r0
 800dafc:	4608      	mov	r0, r1
 800dafe:	602b      	str	r3, [r5, #0]
 800db00:	f7f5 f813 	bl	8002b2a <_close>
 800db04:	1c43      	adds	r3, r0, #1
 800db06:	d102      	bne.n	800db0e <_close_r+0x1a>
 800db08:	682b      	ldr	r3, [r5, #0]
 800db0a:	b103      	cbz	r3, 800db0e <_close_r+0x1a>
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	bd38      	pop	{r3, r4, r5, pc}
 800db10:	200045d4 	.word	0x200045d4

0800db14 <_fstat_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d07      	ldr	r5, [pc, #28]	; (800db34 <_fstat_r+0x20>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f7f5 f80e 	bl	8002b42 <_fstat>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d102      	bne.n	800db30 <_fstat_r+0x1c>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b103      	cbz	r3, 800db30 <_fstat_r+0x1c>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	200045d4 	.word	0x200045d4

0800db38 <_isatty_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4d06      	ldr	r5, [pc, #24]	; (800db54 <_isatty_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f5 f80d 	bl	8002b62 <_isatty>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_isatty_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_isatty_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	200045d4 	.word	0x200045d4

0800db58 <_lseek_r>:
 800db58:	b538      	push	{r3, r4, r5, lr}
 800db5a:	4d07      	ldr	r5, [pc, #28]	; (800db78 <_lseek_r+0x20>)
 800db5c:	4604      	mov	r4, r0
 800db5e:	4608      	mov	r0, r1
 800db60:	4611      	mov	r1, r2
 800db62:	2200      	movs	r2, #0
 800db64:	602a      	str	r2, [r5, #0]
 800db66:	461a      	mov	r2, r3
 800db68:	f7f5 f806 	bl	8002b78 <_lseek>
 800db6c:	1c43      	adds	r3, r0, #1
 800db6e:	d102      	bne.n	800db76 <_lseek_r+0x1e>
 800db70:	682b      	ldr	r3, [r5, #0]
 800db72:	b103      	cbz	r3, 800db76 <_lseek_r+0x1e>
 800db74:	6023      	str	r3, [r4, #0]
 800db76:	bd38      	pop	{r3, r4, r5, pc}
 800db78:	200045d4 	.word	0x200045d4

0800db7c <_read_r>:
 800db7c:	b538      	push	{r3, r4, r5, lr}
 800db7e:	4d07      	ldr	r5, [pc, #28]	; (800db9c <_read_r+0x20>)
 800db80:	4604      	mov	r4, r0
 800db82:	4608      	mov	r0, r1
 800db84:	4611      	mov	r1, r2
 800db86:	2200      	movs	r2, #0
 800db88:	602a      	str	r2, [r5, #0]
 800db8a:	461a      	mov	r2, r3
 800db8c:	f7f4 ff94 	bl	8002ab8 <_read>
 800db90:	1c43      	adds	r3, r0, #1
 800db92:	d102      	bne.n	800db9a <_read_r+0x1e>
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	b103      	cbz	r3, 800db9a <_read_r+0x1e>
 800db98:	6023      	str	r3, [r4, #0]
 800db9a:	bd38      	pop	{r3, r4, r5, pc}
 800db9c:	200045d4 	.word	0x200045d4

0800dba0 <round>:
 800dba0:	ec51 0b10 	vmov	r0, r1, d0
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dbaa:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dbae:	2c13      	cmp	r4, #19
 800dbb0:	ee10 2a10 	vmov	r2, s0
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	dc19      	bgt.n	800dbec <round+0x4c>
 800dbb8:	2c00      	cmp	r4, #0
 800dbba:	da09      	bge.n	800dbd0 <round+0x30>
 800dbbc:	3401      	adds	r4, #1
 800dbbe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dbc2:	d103      	bne.n	800dbcc <round+0x2c>
 800dbc4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dbc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dbcc:	2200      	movs	r2, #0
 800dbce:	e028      	b.n	800dc22 <round+0x82>
 800dbd0:	4d15      	ldr	r5, [pc, #84]	; (800dc28 <round+0x88>)
 800dbd2:	4125      	asrs	r5, r4
 800dbd4:	ea01 0605 	and.w	r6, r1, r5
 800dbd8:	4332      	orrs	r2, r6
 800dbda:	d00e      	beq.n	800dbfa <round+0x5a>
 800dbdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dbe0:	fa42 f404 	asr.w	r4, r2, r4
 800dbe4:	4423      	add	r3, r4
 800dbe6:	ea23 0305 	bic.w	r3, r3, r5
 800dbea:	e7ef      	b.n	800dbcc <round+0x2c>
 800dbec:	2c33      	cmp	r4, #51	; 0x33
 800dbee:	dd07      	ble.n	800dc00 <round+0x60>
 800dbf0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dbf4:	d101      	bne.n	800dbfa <round+0x5a>
 800dbf6:	f7f2 fb49 	bl	800028c <__adddf3>
 800dbfa:	ec41 0b10 	vmov	d0, r0, r1
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dc04:	f04f 35ff 	mov.w	r5, #4294967295
 800dc08:	40f5      	lsrs	r5, r6
 800dc0a:	4228      	tst	r0, r5
 800dc0c:	d0f5      	beq.n	800dbfa <round+0x5a>
 800dc0e:	2101      	movs	r1, #1
 800dc10:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dc14:	fa01 f404 	lsl.w	r4, r1, r4
 800dc18:	1912      	adds	r2, r2, r4
 800dc1a:	bf28      	it	cs
 800dc1c:	185b      	addcs	r3, r3, r1
 800dc1e:	ea22 0205 	bic.w	r2, r2, r5
 800dc22:	4619      	mov	r1, r3
 800dc24:	4610      	mov	r0, r2
 800dc26:	e7e8      	b.n	800dbfa <round+0x5a>
 800dc28:	000fffff 	.word	0x000fffff

0800dc2c <sqrtf>:
 800dc2c:	b508      	push	{r3, lr}
 800dc2e:	ed2d 8b02 	vpush	{d8}
 800dc32:	eeb0 8a40 	vmov.f32	s16, s0
 800dc36:	f000 f817 	bl	800dc68 <__ieee754_sqrtf>
 800dc3a:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc42:	d60c      	bvs.n	800dc5e <sqrtf+0x32>
 800dc44:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dc64 <sqrtf+0x38>
 800dc48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc50:	d505      	bpl.n	800dc5e <sqrtf+0x32>
 800dc52:	f7fd f871 	bl	800ad38 <__errno>
 800dc56:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dc5a:	2321      	movs	r3, #33	; 0x21
 800dc5c:	6003      	str	r3, [r0, #0]
 800dc5e:	ecbd 8b02 	vpop	{d8}
 800dc62:	bd08      	pop	{r3, pc}
 800dc64:	00000000 	.word	0x00000000

0800dc68 <__ieee754_sqrtf>:
 800dc68:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dc6c:	4770      	bx	lr
	...

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr
